
REAR_CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074e4  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08007694  08007694  00017694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076ac  080076ac  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080076ac  080076ac  000176ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076b4  080076b4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076b4  080076b4  000176b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076b8  080076b8  000176b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080076bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          0000050c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000051c  2000051c  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011b05  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002366  00000000  00000000  00031b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011a8  00000000  00000000  00033ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000de0  00000000  00000000  00035098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024be2  00000000  00000000  00035e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013cf4  00000000  00000000  0005aa5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e7840  00000000  00000000  0006e74e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004cec  00000000  00000000  00155f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0015ac7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800767c 	.word	0x0800767c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	0800767c 	.word	0x0800767c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2f>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000994:	bf24      	itt	cs
 8000996:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800099a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800099e:	d90d      	bls.n	80009bc <__aeabi_d2f+0x30>
 80009a0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009b4:	bf08      	it	eq
 80009b6:	f020 0001 	biceq.w	r0, r0, #1
 80009ba:	4770      	bx	lr
 80009bc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009c0:	d121      	bne.n	8000a06 <__aeabi_d2f+0x7a>
 80009c2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009c6:	bfbc      	itt	lt
 80009c8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009cc:	4770      	bxlt	lr
 80009ce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009d6:	f1c2 0218 	rsb	r2, r2, #24
 80009da:	f1c2 0c20 	rsb	ip, r2, #32
 80009de:	fa10 f30c 	lsls.w	r3, r0, ip
 80009e2:	fa20 f002 	lsr.w	r0, r0, r2
 80009e6:	bf18      	it	ne
 80009e8:	f040 0001 	orrne.w	r0, r0, #1
 80009ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f8:	ea40 000c 	orr.w	r0, r0, ip
 80009fc:	fa23 f302 	lsr.w	r3, r3, r2
 8000a00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a04:	e7cc      	b.n	80009a0 <__aeabi_d2f+0x14>
 8000a06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a0a:	d107      	bne.n	8000a1c <__aeabi_d2f+0x90>
 8000a0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a10:	bf1e      	ittt	ne
 8000a12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a1a:	4770      	bxne	lr
 8000a1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop

08000a2c <__aeabi_uldivmod>:
 8000a2c:	b953      	cbnz	r3, 8000a44 <__aeabi_uldivmod+0x18>
 8000a2e:	b94a      	cbnz	r2, 8000a44 <__aeabi_uldivmod+0x18>
 8000a30:	2900      	cmp	r1, #0
 8000a32:	bf08      	it	eq
 8000a34:	2800      	cmpeq	r0, #0
 8000a36:	bf1c      	itt	ne
 8000a38:	f04f 31ff 	movne.w	r1, #4294967295
 8000a3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a40:	f000 b970 	b.w	8000d24 <__aeabi_idiv0>
 8000a44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a4c:	f000 f806 	bl	8000a5c <__udivmoddi4>
 8000a50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a58:	b004      	add	sp, #16
 8000a5a:	4770      	bx	lr

08000a5c <__udivmoddi4>:
 8000a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a60:	9e08      	ldr	r6, [sp, #32]
 8000a62:	460d      	mov	r5, r1
 8000a64:	4604      	mov	r4, r0
 8000a66:	460f      	mov	r7, r1
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d14a      	bne.n	8000b02 <__udivmoddi4+0xa6>
 8000a6c:	428a      	cmp	r2, r1
 8000a6e:	4694      	mov	ip, r2
 8000a70:	d965      	bls.n	8000b3e <__udivmoddi4+0xe2>
 8000a72:	fab2 f382 	clz	r3, r2
 8000a76:	b143      	cbz	r3, 8000a8a <__udivmoddi4+0x2e>
 8000a78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a7c:	f1c3 0220 	rsb	r2, r3, #32
 8000a80:	409f      	lsls	r7, r3
 8000a82:	fa20 f202 	lsr.w	r2, r0, r2
 8000a86:	4317      	orrs	r7, r2
 8000a88:	409c      	lsls	r4, r3
 8000a8a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a8e:	fa1f f58c 	uxth.w	r5, ip
 8000a92:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a96:	0c22      	lsrs	r2, r4, #16
 8000a98:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a9c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000aa0:	fb01 f005 	mul.w	r0, r1, r5
 8000aa4:	4290      	cmp	r0, r2
 8000aa6:	d90a      	bls.n	8000abe <__udivmoddi4+0x62>
 8000aa8:	eb1c 0202 	adds.w	r2, ip, r2
 8000aac:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ab0:	f080 811c 	bcs.w	8000cec <__udivmoddi4+0x290>
 8000ab4:	4290      	cmp	r0, r2
 8000ab6:	f240 8119 	bls.w	8000cec <__udivmoddi4+0x290>
 8000aba:	3902      	subs	r1, #2
 8000abc:	4462      	add	r2, ip
 8000abe:	1a12      	subs	r2, r2, r0
 8000ac0:	b2a4      	uxth	r4, r4
 8000ac2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ac6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ace:	fb00 f505 	mul.w	r5, r0, r5
 8000ad2:	42a5      	cmp	r5, r4
 8000ad4:	d90a      	bls.n	8000aec <__udivmoddi4+0x90>
 8000ad6:	eb1c 0404 	adds.w	r4, ip, r4
 8000ada:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ade:	f080 8107 	bcs.w	8000cf0 <__udivmoddi4+0x294>
 8000ae2:	42a5      	cmp	r5, r4
 8000ae4:	f240 8104 	bls.w	8000cf0 <__udivmoddi4+0x294>
 8000ae8:	4464      	add	r4, ip
 8000aea:	3802      	subs	r0, #2
 8000aec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000af0:	1b64      	subs	r4, r4, r5
 8000af2:	2100      	movs	r1, #0
 8000af4:	b11e      	cbz	r6, 8000afe <__udivmoddi4+0xa2>
 8000af6:	40dc      	lsrs	r4, r3
 8000af8:	2300      	movs	r3, #0
 8000afa:	e9c6 4300 	strd	r4, r3, [r6]
 8000afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b02:	428b      	cmp	r3, r1
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0xbc>
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	f000 80ed 	beq.w	8000ce6 <__udivmoddi4+0x28a>
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b12:	4608      	mov	r0, r1
 8000b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b18:	fab3 f183 	clz	r1, r3
 8000b1c:	2900      	cmp	r1, #0
 8000b1e:	d149      	bne.n	8000bb4 <__udivmoddi4+0x158>
 8000b20:	42ab      	cmp	r3, r5
 8000b22:	d302      	bcc.n	8000b2a <__udivmoddi4+0xce>
 8000b24:	4282      	cmp	r2, r0
 8000b26:	f200 80f8 	bhi.w	8000d1a <__udivmoddi4+0x2be>
 8000b2a:	1a84      	subs	r4, r0, r2
 8000b2c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b30:	2001      	movs	r0, #1
 8000b32:	4617      	mov	r7, r2
 8000b34:	2e00      	cmp	r6, #0
 8000b36:	d0e2      	beq.n	8000afe <__udivmoddi4+0xa2>
 8000b38:	e9c6 4700 	strd	r4, r7, [r6]
 8000b3c:	e7df      	b.n	8000afe <__udivmoddi4+0xa2>
 8000b3e:	b902      	cbnz	r2, 8000b42 <__udivmoddi4+0xe6>
 8000b40:	deff      	udf	#255	; 0xff
 8000b42:	fab2 f382 	clz	r3, r2
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f040 8090 	bne.w	8000c6c <__udivmoddi4+0x210>
 8000b4c:	1a8a      	subs	r2, r1, r2
 8000b4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b52:	fa1f fe8c 	uxth.w	lr, ip
 8000b56:	2101      	movs	r1, #1
 8000b58:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b5c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b60:	0c22      	lsrs	r2, r4, #16
 8000b62:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b66:	fb0e f005 	mul.w	r0, lr, r5
 8000b6a:	4290      	cmp	r0, r2
 8000b6c:	d908      	bls.n	8000b80 <__udivmoddi4+0x124>
 8000b6e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b72:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x122>
 8000b78:	4290      	cmp	r0, r2
 8000b7a:	f200 80cb 	bhi.w	8000d14 <__udivmoddi4+0x2b8>
 8000b7e:	4645      	mov	r5, r8
 8000b80:	1a12      	subs	r2, r2, r0
 8000b82:	b2a4      	uxth	r4, r4
 8000b84:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b88:	fb07 2210 	mls	r2, r7, r0, r2
 8000b8c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b90:	fb0e fe00 	mul.w	lr, lr, r0
 8000b94:	45a6      	cmp	lr, r4
 8000b96:	d908      	bls.n	8000baa <__udivmoddi4+0x14e>
 8000b98:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ba0:	d202      	bcs.n	8000ba8 <__udivmoddi4+0x14c>
 8000ba2:	45a6      	cmp	lr, r4
 8000ba4:	f200 80bb 	bhi.w	8000d1e <__udivmoddi4+0x2c2>
 8000ba8:	4610      	mov	r0, r2
 8000baa:	eba4 040e 	sub.w	r4, r4, lr
 8000bae:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bb2:	e79f      	b.n	8000af4 <__udivmoddi4+0x98>
 8000bb4:	f1c1 0720 	rsb	r7, r1, #32
 8000bb8:	408b      	lsls	r3, r1
 8000bba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bbe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bc2:	fa05 f401 	lsl.w	r4, r5, r1
 8000bc6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bca:	40fd      	lsrs	r5, r7
 8000bcc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bd0:	4323      	orrs	r3, r4
 8000bd2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bd6:	fa1f fe8c 	uxth.w	lr, ip
 8000bda:	fb09 5518 	mls	r5, r9, r8, r5
 8000bde:	0c1c      	lsrs	r4, r3, #16
 8000be0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000be4:	fb08 f50e 	mul.w	r5, r8, lr
 8000be8:	42a5      	cmp	r5, r4
 8000bea:	fa02 f201 	lsl.w	r2, r2, r1
 8000bee:	fa00 f001 	lsl.w	r0, r0, r1
 8000bf2:	d90b      	bls.n	8000c0c <__udivmoddi4+0x1b0>
 8000bf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bfc:	f080 8088 	bcs.w	8000d10 <__udivmoddi4+0x2b4>
 8000c00:	42a5      	cmp	r5, r4
 8000c02:	f240 8085 	bls.w	8000d10 <__udivmoddi4+0x2b4>
 8000c06:	f1a8 0802 	sub.w	r8, r8, #2
 8000c0a:	4464      	add	r4, ip
 8000c0c:	1b64      	subs	r4, r4, r5
 8000c0e:	b29d      	uxth	r5, r3
 8000c10:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c14:	fb09 4413 	mls	r4, r9, r3, r4
 8000c18:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c1c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c20:	45a6      	cmp	lr, r4
 8000c22:	d908      	bls.n	8000c36 <__udivmoddi4+0x1da>
 8000c24:	eb1c 0404 	adds.w	r4, ip, r4
 8000c28:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c2c:	d26c      	bcs.n	8000d08 <__udivmoddi4+0x2ac>
 8000c2e:	45a6      	cmp	lr, r4
 8000c30:	d96a      	bls.n	8000d08 <__udivmoddi4+0x2ac>
 8000c32:	3b02      	subs	r3, #2
 8000c34:	4464      	add	r4, ip
 8000c36:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c3e:	eba4 040e 	sub.w	r4, r4, lr
 8000c42:	42ac      	cmp	r4, r5
 8000c44:	46c8      	mov	r8, r9
 8000c46:	46ae      	mov	lr, r5
 8000c48:	d356      	bcc.n	8000cf8 <__udivmoddi4+0x29c>
 8000c4a:	d053      	beq.n	8000cf4 <__udivmoddi4+0x298>
 8000c4c:	b156      	cbz	r6, 8000c64 <__udivmoddi4+0x208>
 8000c4e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c52:	eb64 040e 	sbc.w	r4, r4, lr
 8000c56:	fa04 f707 	lsl.w	r7, r4, r7
 8000c5a:	40ca      	lsrs	r2, r1
 8000c5c:	40cc      	lsrs	r4, r1
 8000c5e:	4317      	orrs	r7, r2
 8000c60:	e9c6 7400 	strd	r7, r4, [r6]
 8000c64:	4618      	mov	r0, r3
 8000c66:	2100      	movs	r1, #0
 8000c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6c:	f1c3 0120 	rsb	r1, r3, #32
 8000c70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c74:	fa20 f201 	lsr.w	r2, r0, r1
 8000c78:	fa25 f101 	lsr.w	r1, r5, r1
 8000c7c:	409d      	lsls	r5, r3
 8000c7e:	432a      	orrs	r2, r5
 8000c80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c84:	fa1f fe8c 	uxth.w	lr, ip
 8000c88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c8c:	fb07 1510 	mls	r5, r7, r0, r1
 8000c90:	0c11      	lsrs	r1, r2, #16
 8000c92:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c96:	fb00 f50e 	mul.w	r5, r0, lr
 8000c9a:	428d      	cmp	r5, r1
 8000c9c:	fa04 f403 	lsl.w	r4, r4, r3
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x258>
 8000ca2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000caa:	d22f      	bcs.n	8000d0c <__udivmoddi4+0x2b0>
 8000cac:	428d      	cmp	r5, r1
 8000cae:	d92d      	bls.n	8000d0c <__udivmoddi4+0x2b0>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	4461      	add	r1, ip
 8000cb4:	1b49      	subs	r1, r1, r5
 8000cb6:	b292      	uxth	r2, r2
 8000cb8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cbc:	fb07 1115 	mls	r1, r7, r5, r1
 8000cc0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cc4:	fb05 f10e 	mul.w	r1, r5, lr
 8000cc8:	4291      	cmp	r1, r2
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x282>
 8000ccc:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cd4:	d216      	bcs.n	8000d04 <__udivmoddi4+0x2a8>
 8000cd6:	4291      	cmp	r1, r2
 8000cd8:	d914      	bls.n	8000d04 <__udivmoddi4+0x2a8>
 8000cda:	3d02      	subs	r5, #2
 8000cdc:	4462      	add	r2, ip
 8000cde:	1a52      	subs	r2, r2, r1
 8000ce0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ce4:	e738      	b.n	8000b58 <__udivmoddi4+0xfc>
 8000ce6:	4631      	mov	r1, r6
 8000ce8:	4630      	mov	r0, r6
 8000cea:	e708      	b.n	8000afe <__udivmoddi4+0xa2>
 8000cec:	4639      	mov	r1, r7
 8000cee:	e6e6      	b.n	8000abe <__udivmoddi4+0x62>
 8000cf0:	4610      	mov	r0, r2
 8000cf2:	e6fb      	b.n	8000aec <__udivmoddi4+0x90>
 8000cf4:	4548      	cmp	r0, r9
 8000cf6:	d2a9      	bcs.n	8000c4c <__udivmoddi4+0x1f0>
 8000cf8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cfc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d00:	3b01      	subs	r3, #1
 8000d02:	e7a3      	b.n	8000c4c <__udivmoddi4+0x1f0>
 8000d04:	4645      	mov	r5, r8
 8000d06:	e7ea      	b.n	8000cde <__udivmoddi4+0x282>
 8000d08:	462b      	mov	r3, r5
 8000d0a:	e794      	b.n	8000c36 <__udivmoddi4+0x1da>
 8000d0c:	4640      	mov	r0, r8
 8000d0e:	e7d1      	b.n	8000cb4 <__udivmoddi4+0x258>
 8000d10:	46d0      	mov	r8, sl
 8000d12:	e77b      	b.n	8000c0c <__udivmoddi4+0x1b0>
 8000d14:	3d02      	subs	r5, #2
 8000d16:	4462      	add	r2, ip
 8000d18:	e732      	b.n	8000b80 <__udivmoddi4+0x124>
 8000d1a:	4608      	mov	r0, r1
 8000d1c:	e70a      	b.n	8000b34 <__udivmoddi4+0xd8>
 8000d1e:	4464      	add	r4, ip
 8000d20:	3802      	subs	r0, #2
 8000d22:	e742      	b.n	8000baa <__udivmoddi4+0x14e>

08000d24 <__aeabi_idiv0>:
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d2c:	f002 f838 	bl	8002da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d30:	f000 f834 	bl	8000d9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d34:	f000 fc80 	bl	8001638 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000d38:	f000 f934 	bl	8000fa4 <MX_ADC3_Init>
  MX_CAN1_Init();
 8000d3c:	f000 f984 	bl	8001048 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000d40:	f000 f9b8 	bl	80010b4 <MX_CAN2_Init>
  MX_I2C1_Init();
 8000d44:	f000 f9ea 	bl	800111c <MX_I2C1_Init>
  MX_SPI4_Init();
 8000d48:	f000 fa68 	bl	800121c <MX_SPI4_Init>
  MX_ADC2_Init();
 8000d4c:	f000 f8d8 	bl	8000f00 <MX_ADC2_Init>
  MX_TIM1_Init();
 8000d50:	f000 fa9a 	bl	8001288 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d54:	f000 fb56 	bl	8001404 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000d58:	f000 f880 	bl	8000e5c <MX_ADC1_Init>
  MX_I2C2_Init();
 8000d5c:	f000 fa1e 	bl	800119c <MX_I2C2_Init>
  MX_TIM13_Init();
 8000d60:	f000 fc46 	bl	80015f0 <MX_TIM13_Init>
  MX_TIM5_Init();
 8000d64:	f000 fbc2 	bl	80014ec <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

Tim2_cust();
 8000d68:	f000 fe28 	bl	80019bc <Tim2_cust>
Tim1_cust();
 8000d6c:	f000 fd84 	bl	8001878 <Tim1_cust>
CAN_Start();
 8000d70:	f001 fa5e 	bl	8002230 <CAN_Start>
//  if(HAL_ADC_Start_IT(&hadc1) != HAL_OK)
//                 Error_Handler();

   // start pwm generation
  HAL_TIM_Base_Start(&htim2);
 8000d74:	4806      	ldr	r0, [pc, #24]	; (8000d90 <main+0x68>)
 8000d76:	f005 f98d 	bl	8006094 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4805      	ldr	r0, [pc, #20]	; (8000d94 <main+0x6c>)
 8000d7e:	f005 fb13 	bl	80063a8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_Base_Start_IT(&htim13);
 8000d82:	4805      	ldr	r0, [pc, #20]	; (8000d98 <main+0x70>)
 8000d84:	f005 f9ee 	bl	8006164 <HAL_TIM_Base_Start_IT>
  fanpwm();
 8000d88:	f001 fbfa 	bl	8002580 <fanpwm>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <main+0x64>
 8000d8e:	bf00      	nop
 8000d90:	20000368 	.word	0x20000368
 8000d94:	20000320 	.word	0x20000320
 8000d98:	200003f8 	.word	0x200003f8

08000d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b094      	sub	sp, #80	; 0x50
 8000da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da2:	f107 0320 	add.w	r3, r7, #32
 8000da6:	2230      	movs	r2, #48	; 0x30
 8000da8:	2100      	movs	r1, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f006 fc3a 	bl	8007624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db0:	f107 030c 	add.w	r3, r7, #12
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	4b23      	ldr	r3, [pc, #140]	; (8000e54 <SystemClock_Config+0xb8>)
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	4a22      	ldr	r2, [pc, #136]	; (8000e54 <SystemClock_Config+0xb8>)
 8000dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dce:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd0:	4b20      	ldr	r3, [pc, #128]	; (8000e54 <SystemClock_Config+0xb8>)
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ddc:	2300      	movs	r3, #0
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <SystemClock_Config+0xbc>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000de8:	4a1b      	ldr	r2, [pc, #108]	; (8000e58 <SystemClock_Config+0xbc>)
 8000dea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dee:	6013      	str	r3, [r2, #0]
 8000df0:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <SystemClock_Config+0xbc>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e00:	2301      	movs	r3, #1
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e04:	2310      	movs	r3, #16
 8000e06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e0c:	f107 0320 	add.w	r3, r7, #32
 8000e10:	4618      	mov	r0, r3
 8000e12:	f004 fc23 	bl	800565c <HAL_RCC_OscConfig>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000e1c:	f001 fbbe 	bl	800259c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e20:	230f      	movs	r3, #15
 8000e22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e24:	2300      	movs	r3, #0
 8000e26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f004 fe86 	bl	8005b4c <HAL_RCC_ClockConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e46:	f001 fba9 	bl	800259c <Error_Handler>
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	3750      	adds	r7, #80	; 0x50
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40007000 	.word	0x40007000

08000e5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e62:	463b      	mov	r3, r7
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e6e:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <MX_ADC1_Init+0x98>)
 8000e70:	4a21      	ldr	r2, [pc, #132]	; (8000ef8 <MX_ADC1_Init+0x9c>)
 8000e72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e74:	4b1f      	ldr	r3, [pc, #124]	; (8000ef4 <MX_ADC1_Init+0x98>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e7a:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <MX_ADC1_Init+0x98>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e80:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <MX_ADC1_Init+0x98>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e86:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <MX_ADC1_Init+0x98>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e8c:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <MX_ADC1_Init+0x98>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e94:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <MX_ADC1_Init+0x98>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e9a:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <MX_ADC1_Init+0x98>)
 8000e9c:	4a17      	ldr	r2, [pc, #92]	; (8000efc <MX_ADC1_Init+0xa0>)
 8000e9e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ea0:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <MX_ADC1_Init+0x98>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ea6:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <MX_ADC1_Init+0x98>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <MX_ADC1_Init+0x98>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <MX_ADC1_Init+0x98>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eba:	480e      	ldr	r0, [pc, #56]	; (8000ef4 <MX_ADC1_Init+0x98>)
 8000ebc:	f001 ffe2 	bl	8002e84 <HAL_ADC_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ec6:	f001 fb69 	bl	800259c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000eca:	2305      	movs	r3, #5
 8000ecc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4806      	ldr	r0, [pc, #24]	; (8000ef4 <MX_ADC1_Init+0x98>)
 8000edc:	f002 f9b4 	bl	8003248 <HAL_ADC_ConfigChannel>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000ee6:	f001 fb59 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200000f8 	.word	0x200000f8
 8000ef8:	40012000 	.word	0x40012000
 8000efc:	0f000001 	.word	0x0f000001

08000f00 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f06:	463b      	mov	r3, r7
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000f12:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <MX_ADC2_Init+0x98>)
 8000f14:	4a21      	ldr	r2, [pc, #132]	; (8000f9c <MX_ADC2_Init+0x9c>)
 8000f16:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f18:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <MX_ADC2_Init+0x98>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f1e:	4b1e      	ldr	r3, [pc, #120]	; (8000f98 <MX_ADC2_Init+0x98>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000f24:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <MX_ADC2_Init+0x98>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f2a:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <MX_ADC2_Init+0x98>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f30:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <MX_ADC2_Init+0x98>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f38:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <MX_ADC2_Init+0x98>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f3e:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <MX_ADC2_Init+0x98>)
 8000f40:	4a17      	ldr	r2, [pc, #92]	; (8000fa0 <MX_ADC2_Init+0xa0>)
 8000f42:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f44:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <MX_ADC2_Init+0x98>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <MX_ADC2_Init+0x98>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_ADC2_Init+0x98>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f58:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <MX_ADC2_Init+0x98>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f5e:	480e      	ldr	r0, [pc, #56]	; (8000f98 <MX_ADC2_Init+0x98>)
 8000f60:	f001 ff90 	bl	8002e84 <HAL_ADC_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000f6a:	f001 fb17 	bl	800259c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f6e:	230c      	movs	r3, #12
 8000f70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f72:	2301      	movs	r3, #1
 8000f74:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4806      	ldr	r0, [pc, #24]	; (8000f98 <MX_ADC2_Init+0x98>)
 8000f80:	f002 f962 	bl	8003248 <HAL_ADC_ConfigChannel>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000f8a:	f001 fb07 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000140 	.word	0x20000140
 8000f9c:	40012100 	.word	0x40012100
 8000fa0:	0f000001 	.word	0x0f000001

08000fa4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000faa:	463b      	mov	r3, r7
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000fb6:	4b21      	ldr	r3, [pc, #132]	; (800103c <MX_ADC3_Init+0x98>)
 8000fb8:	4a21      	ldr	r2, [pc, #132]	; (8001040 <MX_ADC3_Init+0x9c>)
 8000fba:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fbc:	4b1f      	ldr	r3, [pc, #124]	; (800103c <MX_ADC3_Init+0x98>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000fc2:	4b1e      	ldr	r3, [pc, #120]	; (800103c <MX_ADC3_Init+0x98>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000fc8:	4b1c      	ldr	r3, [pc, #112]	; (800103c <MX_ADC3_Init+0x98>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000fce:	4b1b      	ldr	r3, [pc, #108]	; (800103c <MX_ADC3_Init+0x98>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000fd4:	4b19      	ldr	r3, [pc, #100]	; (800103c <MX_ADC3_Init+0x98>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fdc:	4b17      	ldr	r3, [pc, #92]	; (800103c <MX_ADC3_Init+0x98>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fe2:	4b16      	ldr	r3, [pc, #88]	; (800103c <MX_ADC3_Init+0x98>)
 8000fe4:	4a17      	ldr	r2, [pc, #92]	; (8001044 <MX_ADC3_Init+0xa0>)
 8000fe6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <MX_ADC3_Init+0x98>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000fee:	4b13      	ldr	r3, [pc, #76]	; (800103c <MX_ADC3_Init+0x98>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <MX_ADC3_Init+0x98>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <MX_ADC3_Init+0x98>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001002:	480e      	ldr	r0, [pc, #56]	; (800103c <MX_ADC3_Init+0x98>)
 8001004:	f001 ff3e 	bl	8002e84 <HAL_ADC_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 800100e:	f001 fac5 	bl	800259c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001012:	230e      	movs	r3, #14
 8001014:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001016:	2301      	movs	r3, #1
 8001018:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800101e:	463b      	mov	r3, r7
 8001020:	4619      	mov	r1, r3
 8001022:	4806      	ldr	r0, [pc, #24]	; (800103c <MX_ADC3_Init+0x98>)
 8001024:	f002 f910 	bl	8003248 <HAL_ADC_ConfigChannel>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800102e:	f001 fab5 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000188 	.word	0x20000188
 8001040:	40012200 	.word	0x40012200
 8001044:	0f000001 	.word	0x0f000001

08001048 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800104c:	4b17      	ldr	r3, [pc, #92]	; (80010ac <MX_CAN1_Init+0x64>)
 800104e:	4a18      	ldr	r2, [pc, #96]	; (80010b0 <MX_CAN1_Init+0x68>)
 8001050:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8001052:	4b16      	ldr	r3, [pc, #88]	; (80010ac <MX_CAN1_Init+0x64>)
 8001054:	2202      	movs	r2, #2
 8001056:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001058:	4b14      	ldr	r3, [pc, #80]	; (80010ac <MX_CAN1_Init+0x64>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800105e:	4b13      	ldr	r3, [pc, #76]	; (80010ac <MX_CAN1_Init+0x64>)
 8001060:	2200      	movs	r2, #0
 8001062:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <MX_CAN1_Init+0x64>)
 8001066:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 800106a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <MX_CAN1_Init+0x64>)
 800106e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001072:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001074:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <MX_CAN1_Init+0x64>)
 8001076:	2200      	movs	r2, #0
 8001078:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <MX_CAN1_Init+0x64>)
 800107c:	2200      	movs	r2, #0
 800107e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <MX_CAN1_Init+0x64>)
 8001082:	2201      	movs	r2, #1
 8001084:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <MX_CAN1_Init+0x64>)
 8001088:	2201      	movs	r2, #1
 800108a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800108c:	4b07      	ldr	r3, [pc, #28]	; (80010ac <MX_CAN1_Init+0x64>)
 800108e:	2200      	movs	r2, #0
 8001090:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <MX_CAN1_Init+0x64>)
 8001094:	2200      	movs	r2, #0
 8001096:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001098:	4804      	ldr	r0, [pc, #16]	; (80010ac <MX_CAN1_Init+0x64>)
 800109a:	f002 fb03 	bl	80036a4 <HAL_CAN_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80010a4:	f001 fa7a 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	200001d0 	.word	0x200001d0
 80010b0:	40006400 	.word	0x40006400

080010b4 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80010b8:	4b16      	ldr	r3, [pc, #88]	; (8001114 <MX_CAN2_Init+0x60>)
 80010ba:	4a17      	ldr	r2, [pc, #92]	; (8001118 <MX_CAN2_Init+0x64>)
 80010bc:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <MX_CAN2_Init+0x60>)
 80010c0:	2210      	movs	r2, #16
 80010c2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80010c4:	4b13      	ldr	r3, [pc, #76]	; (8001114 <MX_CAN2_Init+0x60>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010ca:	4b12      	ldr	r3, [pc, #72]	; (8001114 <MX_CAN2_Init+0x60>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80010d0:	4b10      	ldr	r3, [pc, #64]	; (8001114 <MX_CAN2_Init+0x60>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80010d6:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <MX_CAN2_Init+0x60>)
 80010d8:	2200      	movs	r2, #0
 80010da:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80010dc:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <MX_CAN2_Init+0x60>)
 80010de:	2200      	movs	r2, #0
 80010e0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80010e2:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <MX_CAN2_Init+0x60>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80010e8:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <MX_CAN2_Init+0x60>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <MX_CAN2_Init+0x60>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <MX_CAN2_Init+0x60>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <MX_CAN2_Init+0x60>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001100:	4804      	ldr	r0, [pc, #16]	; (8001114 <MX_CAN2_Init+0x60>)
 8001102:	f002 facf 	bl	80036a4 <HAL_CAN_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 800110c:	f001 fa46 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	200001f8 	.word	0x200001f8
 8001118:	40006800 	.word	0x40006800

0800111c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001120:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <MX_I2C1_Init+0x74>)
 8001122:	4a1c      	ldr	r2, [pc, #112]	; (8001194 <MX_I2C1_Init+0x78>)
 8001124:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001126:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <MX_I2C1_Init+0x74>)
 8001128:	4a1b      	ldr	r2, [pc, #108]	; (8001198 <MX_I2C1_Init+0x7c>)
 800112a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800112c:	4b18      	ldr	r3, [pc, #96]	; (8001190 <MX_I2C1_Init+0x74>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001132:	4b17      	ldr	r3, [pc, #92]	; (8001190 <MX_I2C1_Init+0x74>)
 8001134:	2200      	movs	r2, #0
 8001136:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001138:	4b15      	ldr	r3, [pc, #84]	; (8001190 <MX_I2C1_Init+0x74>)
 800113a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800113e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001140:	4b13      	ldr	r3, [pc, #76]	; (8001190 <MX_I2C1_Init+0x74>)
 8001142:	2200      	movs	r2, #0
 8001144:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001146:	4b12      	ldr	r3, [pc, #72]	; (8001190 <MX_I2C1_Init+0x74>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800114c:	4b10      	ldr	r3, [pc, #64]	; (8001190 <MX_I2C1_Init+0x74>)
 800114e:	2200      	movs	r2, #0
 8001150:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001152:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <MX_I2C1_Init+0x74>)
 8001154:	2200      	movs	r2, #0
 8001156:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001158:	480d      	ldr	r0, [pc, #52]	; (8001190 <MX_I2C1_Init+0x74>)
 800115a:	f003 fc49 	bl	80049f0 <HAL_I2C_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001164:	f001 fa1a 	bl	800259c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001168:	2100      	movs	r1, #0
 800116a:	4809      	ldr	r0, [pc, #36]	; (8001190 <MX_I2C1_Init+0x74>)
 800116c:	f004 f9fb 	bl	8005566 <HAL_I2CEx_ConfigAnalogFilter>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001176:	f001 fa11 	bl	800259c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800117a:	2100      	movs	r1, #0
 800117c:	4804      	ldr	r0, [pc, #16]	; (8001190 <MX_I2C1_Init+0x74>)
 800117e:	f004 fa2e 	bl	80055de <HAL_I2CEx_ConfigDigitalFilter>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001188:	f001 fa08 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000220 	.word	0x20000220
 8001194:	40005400 	.word	0x40005400
 8001198:	000186a0 	.word	0x000186a0

0800119c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011a0:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <MX_I2C2_Init+0x74>)
 80011a2:	4a1c      	ldr	r2, [pc, #112]	; (8001214 <MX_I2C2_Init+0x78>)
 80011a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80011a6:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <MX_I2C2_Init+0x74>)
 80011a8:	4a1b      	ldr	r2, [pc, #108]	; (8001218 <MX_I2C2_Init+0x7c>)
 80011aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011ac:	4b18      	ldr	r3, [pc, #96]	; (8001210 <MX_I2C2_Init+0x74>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <MX_I2C2_Init+0x74>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011b8:	4b15      	ldr	r3, [pc, #84]	; (8001210 <MX_I2C2_Init+0x74>)
 80011ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011be:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c0:	4b13      	ldr	r3, [pc, #76]	; (8001210 <MX_I2C2_Init+0x74>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80011c6:	4b12      	ldr	r3, [pc, #72]	; (8001210 <MX_I2C2_Init+0x74>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011cc:	4b10      	ldr	r3, [pc, #64]	; (8001210 <MX_I2C2_Init+0x74>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011d2:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <MX_I2C2_Init+0x74>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011d8:	480d      	ldr	r0, [pc, #52]	; (8001210 <MX_I2C2_Init+0x74>)
 80011da:	f003 fc09 	bl	80049f0 <HAL_I2C_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80011e4:	f001 f9da 	bl	800259c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011e8:	2100      	movs	r1, #0
 80011ea:	4809      	ldr	r0, [pc, #36]	; (8001210 <MX_I2C2_Init+0x74>)
 80011ec:	f004 f9bb 	bl	8005566 <HAL_I2CEx_ConfigAnalogFilter>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80011f6:	f001 f9d1 	bl	800259c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80011fa:	2100      	movs	r1, #0
 80011fc:	4804      	ldr	r0, [pc, #16]	; (8001210 <MX_I2C2_Init+0x74>)
 80011fe:	f004 f9ee 	bl	80055de <HAL_I2CEx_ConfigDigitalFilter>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001208:	f001 f9c8 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000274 	.word	0x20000274
 8001214:	40005800 	.word	0x40005800
 8001218:	000186a0 	.word	0x000186a0

0800121c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001220:	4b17      	ldr	r3, [pc, #92]	; (8001280 <MX_SPI4_Init+0x64>)
 8001222:	4a18      	ldr	r2, [pc, #96]	; (8001284 <MX_SPI4_Init+0x68>)
 8001224:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001226:	4b16      	ldr	r3, [pc, #88]	; (8001280 <MX_SPI4_Init+0x64>)
 8001228:	f44f 7282 	mov.w	r2, #260	; 0x104
 800122c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800122e:	4b14      	ldr	r3, [pc, #80]	; (8001280 <MX_SPI4_Init+0x64>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <MX_SPI4_Init+0x64>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800123a:	4b11      	ldr	r3, [pc, #68]	; (8001280 <MX_SPI4_Init+0x64>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001240:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <MX_SPI4_Init+0x64>)
 8001242:	2200      	movs	r2, #0
 8001244:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <MX_SPI4_Init+0x64>)
 8001248:	f44f 7200 	mov.w	r2, #512	; 0x200
 800124c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800124e:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <MX_SPI4_Init+0x64>)
 8001250:	2200      	movs	r2, #0
 8001252:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001254:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <MX_SPI4_Init+0x64>)
 8001256:	2200      	movs	r2, #0
 8001258:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <MX_SPI4_Init+0x64>)
 800125c:	2200      	movs	r2, #0
 800125e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <MX_SPI4_Init+0x64>)
 8001262:	2200      	movs	r2, #0
 8001264:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <MX_SPI4_Init+0x64>)
 8001268:	220a      	movs	r2, #10
 800126a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <MX_SPI4_Init+0x64>)
 800126e:	f004 fe39 	bl	8005ee4 <HAL_SPI_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001278:	f001 f990 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200002c8 	.word	0x200002c8
 8001284:	40013400 	.word	0x40013400

08001288 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b09a      	sub	sp, #104	; 0x68
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800129c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012b6:	f107 0320 	add.w	r3, r7, #32
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
 80012c4:	611a      	str	r2, [r3, #16]
 80012c6:	615a      	str	r2, [r3, #20]
 80012c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012ca:	463b      	mov	r3, r7
 80012cc:	2220      	movs	r2, #32
 80012ce:	2100      	movs	r1, #0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f006 f9a7 	bl	8007624 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012d6:	4b49      	ldr	r3, [pc, #292]	; (80013fc <MX_TIM1_Init+0x174>)
 80012d8:	4a49      	ldr	r2, [pc, #292]	; (8001400 <MX_TIM1_Init+0x178>)
 80012da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15999;
 80012dc:	4b47      	ldr	r3, [pc, #284]	; (80013fc <MX_TIM1_Init+0x174>)
 80012de:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80012e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e4:	4b45      	ldr	r3, [pc, #276]	; (80013fc <MX_TIM1_Init+0x174>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80012ea:	4b44      	ldr	r3, [pc, #272]	; (80013fc <MX_TIM1_Init+0x174>)
 80012ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f2:	4b42      	ldr	r3, [pc, #264]	; (80013fc <MX_TIM1_Init+0x174>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 5;
 80012f8:	4b40      	ldr	r3, [pc, #256]	; (80013fc <MX_TIM1_Init+0x174>)
 80012fa:	2205      	movs	r2, #5
 80012fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012fe:	4b3f      	ldr	r3, [pc, #252]	; (80013fc <MX_TIM1_Init+0x174>)
 8001300:	2280      	movs	r2, #128	; 0x80
 8001302:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001304:	483d      	ldr	r0, [pc, #244]	; (80013fc <MX_TIM1_Init+0x174>)
 8001306:	f004 fe76 	bl	8005ff6 <HAL_TIM_Base_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001310:	f001 f944 	bl	800259c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001318:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800131a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800131e:	4619      	mov	r1, r3
 8001320:	4836      	ldr	r0, [pc, #216]	; (80013fc <MX_TIM1_Init+0x174>)
 8001322:	f005 fbbf 	bl	8006aa4 <HAL_TIM_ConfigClockSource>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800132c:	f001 f936 	bl	800259c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001330:	4832      	ldr	r0, [pc, #200]	; (80013fc <MX_TIM1_Init+0x174>)
 8001332:	f004 ffe0 	bl	80062f6 <HAL_TIM_PWM_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 800133c:	f001 f92e 	bl	800259c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8001340:	2108      	movs	r1, #8
 8001342:	482e      	ldr	r0, [pc, #184]	; (80013fc <MX_TIM1_Init+0x174>)
 8001344:	f005 f946 	bl	80065d4 <HAL_TIM_OnePulse_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800134e:	f001 f925 	bl	800259c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001352:	2306      	movs	r3, #6
 8001354:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8001356:	2310      	movs	r3, #16
 8001358:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800135a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800135e:	4619      	mov	r1, r3
 8001360:	4826      	ldr	r0, [pc, #152]	; (80013fc <MX_TIM1_Init+0x174>)
 8001362:	f005 fc66 	bl	8006c32 <HAL_TIM_SlaveConfigSynchro>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM1_Init+0xe8>
  {
    Error_Handler();
 800136c:	f001 f916 	bl	800259c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001370:	2300      	movs	r3, #0
 8001372:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001378:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800137c:	4619      	mov	r1, r3
 800137e:	481f      	ldr	r0, [pc, #124]	; (80013fc <MX_TIM1_Init+0x174>)
 8001380:	f006 f86e 	bl	8007460 <HAL_TIMEx_MasterConfigSynchronization>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800138a:	f001 f907 	bl	800259c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800138e:	2360      	movs	r3, #96	; 0x60
 8001390:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 100;
 8001392:	2364      	movs	r3, #100	; 0x64
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001396:	2300      	movs	r3, #0
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800139a:	2300      	movs	r3, #0
 800139c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800139e:	2300      	movs	r3, #0
 80013a0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013a2:	2300      	movs	r3, #0
 80013a4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013a6:	2300      	movs	r3, #0
 80013a8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013aa:	f107 0320 	add.w	r3, r7, #32
 80013ae:	2200      	movs	r2, #0
 80013b0:	4619      	mov	r1, r3
 80013b2:	4812      	ldr	r0, [pc, #72]	; (80013fc <MX_TIM1_Init+0x174>)
 80013b4:	f005 fab4 	bl	8006920 <HAL_TIM_PWM_ConfigChannel>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 80013be:	f001 f8ed 	bl	800259c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013e0:	463b      	mov	r3, r7
 80013e2:	4619      	mov	r1, r3
 80013e4:	4805      	ldr	r0, [pc, #20]	; (80013fc <MX_TIM1_Init+0x174>)
 80013e6:	f006 f8b7 	bl	8007558 <HAL_TIMEx_ConfigBreakDeadTime>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM1_Init+0x16c>
  {
    Error_Handler();
 80013f0:	f001 f8d4 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013f4:	bf00      	nop
 80013f6:	3768      	adds	r7, #104	; 0x68
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000320 	.word	0x20000320
 8001400:	40010000 	.word	0x40010000

08001404 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08e      	sub	sp, #56	; 0x38
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800140a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001418:	f107 0320 	add.w	r3, r7, #32
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
 8001430:	615a      	str	r2, [r3, #20]
 8001432:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001434:	4b2c      	ldr	r3, [pc, #176]	; (80014e8 <MX_TIM2_Init+0xe4>)
 8001436:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800143a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 800143c:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <MX_TIM2_Init+0xe4>)
 800143e:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001442:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001444:	4b28      	ldr	r3, [pc, #160]	; (80014e8 <MX_TIM2_Init+0xe4>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800144a:	4b27      	ldr	r3, [pc, #156]	; (80014e8 <MX_TIM2_Init+0xe4>)
 800144c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001450:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001452:	4b25      	ldr	r3, [pc, #148]	; (80014e8 <MX_TIM2_Init+0xe4>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001458:	4b23      	ldr	r3, [pc, #140]	; (80014e8 <MX_TIM2_Init+0xe4>)
 800145a:	2200      	movs	r2, #0
 800145c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800145e:	4822      	ldr	r0, [pc, #136]	; (80014e8 <MX_TIM2_Init+0xe4>)
 8001460:	f004 fdc9 	bl	8005ff6 <HAL_TIM_Base_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800146a:	f001 f897 	bl	800259c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800146e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001474:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001478:	4619      	mov	r1, r3
 800147a:	481b      	ldr	r0, [pc, #108]	; (80014e8 <MX_TIM2_Init+0xe4>)
 800147c:	f005 fb12 	bl	8006aa4 <HAL_TIM_ConfigClockSource>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001486:	f001 f889 	bl	800259c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800148a:	4817      	ldr	r0, [pc, #92]	; (80014e8 <MX_TIM2_Init+0xe4>)
 800148c:	f004 feda 	bl	8006244 <HAL_TIM_OC_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001496:	f001 f881 	bl	800259c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800149a:	2320      	movs	r3, #32
 800149c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149e:	2300      	movs	r3, #0
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014a2:	f107 0320 	add.w	r3, r7, #32
 80014a6:	4619      	mov	r1, r3
 80014a8:	480f      	ldr	r0, [pc, #60]	; (80014e8 <MX_TIM2_Init+0xe4>)
 80014aa:	f005 ffd9 	bl	8007460 <HAL_TIMEx_MasterConfigSynchronization>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80014b4:	f001 f872 	bl	800259c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80014b8:	2300      	movs	r3, #0
 80014ba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	2200      	movs	r2, #0
 80014cc:	4619      	mov	r1, r3
 80014ce:	4806      	ldr	r0, [pc, #24]	; (80014e8 <MX_TIM2_Init+0xe4>)
 80014d0:	f005 f9ca 	bl	8006868 <HAL_TIM_OC_ConfigChannel>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80014da:	f001 f85f 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014de:	bf00      	nop
 80014e0:	3738      	adds	r7, #56	; 0x38
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000368 	.word	0x20000368

080014ec <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08e      	sub	sp, #56	; 0x38
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001500:	f107 0320 	add.w	r3, r7, #32
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
 8001518:	615a      	str	r2, [r3, #20]
 800151a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800151c:	4b32      	ldr	r3, [pc, #200]	; (80015e8 <MX_TIM5_Init+0xfc>)
 800151e:	4a33      	ldr	r2, [pc, #204]	; (80015ec <MX_TIM5_Init+0x100>)
 8001520:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 15999;
 8001522:	4b31      	ldr	r3, [pc, #196]	; (80015e8 <MX_TIM5_Init+0xfc>)
 8001524:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001528:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152a:	4b2f      	ldr	r3, [pc, #188]	; (80015e8 <MX_TIM5_Init+0xfc>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 19;
 8001530:	4b2d      	ldr	r3, [pc, #180]	; (80015e8 <MX_TIM5_Init+0xfc>)
 8001532:	2213      	movs	r2, #19
 8001534:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001536:	4b2c      	ldr	r3, [pc, #176]	; (80015e8 <MX_TIM5_Init+0xfc>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800153c:	4b2a      	ldr	r3, [pc, #168]	; (80015e8 <MX_TIM5_Init+0xfc>)
 800153e:	2280      	movs	r2, #128	; 0x80
 8001540:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001542:	4829      	ldr	r0, [pc, #164]	; (80015e8 <MX_TIM5_Init+0xfc>)
 8001544:	f004 fd57 	bl	8005ff6 <HAL_TIM_Base_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800154e:	f001 f825 	bl	800259c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001558:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800155c:	4619      	mov	r1, r3
 800155e:	4822      	ldr	r0, [pc, #136]	; (80015e8 <MX_TIM5_Init+0xfc>)
 8001560:	f005 faa0 	bl	8006aa4 <HAL_TIM_ConfigClockSource>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800156a:	f001 f817 	bl	800259c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800156e:	481e      	ldr	r0, [pc, #120]	; (80015e8 <MX_TIM5_Init+0xfc>)
 8001570:	f004 fec1 	bl	80062f6 <HAL_TIM_PWM_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800157a:	f001 f80f 	bl	800259c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001586:	f107 0320 	add.w	r3, r7, #32
 800158a:	4619      	mov	r1, r3
 800158c:	4816      	ldr	r0, [pc, #88]	; (80015e8 <MX_TIM5_Init+0xfc>)
 800158e:	f005 ff67 	bl	8007460 <HAL_TIMEx_MasterConfigSynchronization>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001598:	f001 f800 	bl	800259c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800159c:	2360      	movs	r3, #96	; 0x60
 800159e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 80015a0:	230a      	movs	r3, #10
 80015a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	2200      	movs	r2, #0
 80015b0:	4619      	mov	r1, r3
 80015b2:	480d      	ldr	r0, [pc, #52]	; (80015e8 <MX_TIM5_Init+0xfc>)
 80015b4:	f005 f9b4 	bl	8006920 <HAL_TIM_PWM_ConfigChannel>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80015be:	f000 ffed 	bl	800259c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	2204      	movs	r2, #4
 80015c6:	4619      	mov	r1, r3
 80015c8:	4807      	ldr	r0, [pc, #28]	; (80015e8 <MX_TIM5_Init+0xfc>)
 80015ca:	f005 f9a9 	bl	8006920 <HAL_TIM_PWM_ConfigChannel>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 80015d4:	f000 ffe2 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80015d8:	4803      	ldr	r0, [pc, #12]	; (80015e8 <MX_TIM5_Init+0xfc>)
 80015da:	f001 fadd 	bl	8002b98 <HAL_TIM_MspPostInit>

}
 80015de:	bf00      	nop
 80015e0:	3738      	adds	r7, #56	; 0x38
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200003b0 	.word	0x200003b0
 80015ec:	40000c00 	.word	0x40000c00

080015f0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80015f4:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <MX_TIM13_Init+0x40>)
 80015f6:	4a0f      	ldr	r2, [pc, #60]	; (8001634 <MX_TIM13_Init+0x44>)
 80015f8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 15999;
 80015fa:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <MX_TIM13_Init+0x40>)
 80015fc:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001600:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <MX_TIM13_Init+0x40>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9;
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <MX_TIM13_Init+0x40>)
 800160a:	2209      	movs	r2, #9
 800160c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800160e:	4b08      	ldr	r3, [pc, #32]	; (8001630 <MX_TIM13_Init+0x40>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <MX_TIM13_Init+0x40>)
 8001616:	2200      	movs	r2, #0
 8001618:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800161a:	4805      	ldr	r0, [pc, #20]	; (8001630 <MX_TIM13_Init+0x40>)
 800161c:	f004 fceb 	bl	8005ff6 <HAL_TIM_Base_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8001626:	f000 ffb9 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200003f8 	.word	0x200003f8
 8001634:	40001c00 	.word	0x40001c00

08001638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08c      	sub	sp, #48	; 0x30
 800163c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163e:	f107 031c 	add.w	r3, r7, #28
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	61bb      	str	r3, [r7, #24]
 8001652:	4b5e      	ldr	r3, [pc, #376]	; (80017cc <MX_GPIO_Init+0x194>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a5d      	ldr	r2, [pc, #372]	; (80017cc <MX_GPIO_Init+0x194>)
 8001658:	f043 0320 	orr.w	r3, r3, #32
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b5b      	ldr	r3, [pc, #364]	; (80017cc <MX_GPIO_Init+0x194>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0320 	and.w	r3, r3, #32
 8001666:	61bb      	str	r3, [r7, #24]
 8001668:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
 800166e:	4b57      	ldr	r3, [pc, #348]	; (80017cc <MX_GPIO_Init+0x194>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a56      	ldr	r2, [pc, #344]	; (80017cc <MX_GPIO_Init+0x194>)
 8001674:	f043 0304 	orr.w	r3, r3, #4
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b54      	ldr	r3, [pc, #336]	; (80017cc <MX_GPIO_Init+0x194>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0304 	and.w	r3, r3, #4
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	4b50      	ldr	r3, [pc, #320]	; (80017cc <MX_GPIO_Init+0x194>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a4f      	ldr	r2, [pc, #316]	; (80017cc <MX_GPIO_Init+0x194>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b4d      	ldr	r3, [pc, #308]	; (80017cc <MX_GPIO_Init+0x194>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	4b49      	ldr	r3, [pc, #292]	; (80017cc <MX_GPIO_Init+0x194>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a48      	ldr	r2, [pc, #288]	; (80017cc <MX_GPIO_Init+0x194>)
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b46      	ldr	r3, [pc, #280]	; (80017cc <MX_GPIO_Init+0x194>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	4b42      	ldr	r3, [pc, #264]	; (80017cc <MX_GPIO_Init+0x194>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a41      	ldr	r2, [pc, #260]	; (80017cc <MX_GPIO_Init+0x194>)
 80016c8:	f043 0310 	orr.w	r3, r3, #16
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b3f      	ldr	r3, [pc, #252]	; (80017cc <MX_GPIO_Init+0x194>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0310 	and.w	r3, r3, #16
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	607b      	str	r3, [r7, #4]
 80016de:	4b3b      	ldr	r3, [pc, #236]	; (80017cc <MX_GPIO_Init+0x194>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a3a      	ldr	r2, [pc, #232]	; (80017cc <MX_GPIO_Init+0x194>)
 80016e4:	f043 0308 	orr.w	r3, r3, #8
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b38      	ldr	r3, [pc, #224]	; (80017cc <MX_GPIO_Init+0x194>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CAN_LED_Pin|LED4_Pin, GPIO_PIN_RESET);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2130      	movs	r1, #48	; 0x30
 80016fa:	4835      	ldr	r0, [pc, #212]	; (80017d0 <MX_GPIO_Init+0x198>)
 80016fc:	f003 f92c 	bl	8004958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_5_Pin|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001700:	2200      	movs	r2, #0
 8001702:	f24c 0101 	movw	r1, #49153	; 0xc001
 8001706:	4833      	ldr	r0, [pc, #204]	; (80017d4 <MX_GPIO_Init+0x19c>)
 8001708:	f003 f926 	bl	8004958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11|SPI_CSN_Pin, GPIO_PIN_RESET);
 800170c:	2200      	movs	r2, #0
 800170e:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8001712:	4831      	ldr	r0, [pc, #196]	; (80017d8 <MX_GPIO_Init+0x1a0>)
 8001714:	f003 f920 	bl	8004958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8001718:	2200      	movs	r2, #0
 800171a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800171e:	482f      	ldr	r0, [pc, #188]	; (80017dc <MX_GPIO_Init+0x1a4>)
 8001720:	f003 f91a 	bl	8004958 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FR1_Pin FR2_Pin */
  GPIO_InitStruct.Pin = FR1_Pin|FR2_Pin;
 8001724:	23c0      	movs	r3, #192	; 0xc0
 8001726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001728:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800172c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001732:	f107 031c 	add.w	r3, r7, #28
 8001736:	4619      	mov	r1, r3
 8001738:	4829      	ldr	r0, [pc, #164]	; (80017e0 <MX_GPIO_Init+0x1a8>)
 800173a:	f002 ff61 	bl	8004600 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAN_LED_Pin LED4_Pin */
  GPIO_InitStruct.Pin = CAN_LED_Pin|LED4_Pin;
 800173e:	2330      	movs	r3, #48	; 0x30
 8001740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001742:	2301      	movs	r3, #1
 8001744:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800174e:	f107 031c 	add.w	r3, r7, #28
 8001752:	4619      	mov	r1, r3
 8001754:	481e      	ldr	r0, [pc, #120]	; (80017d0 <MX_GPIO_Init+0x198>)
 8001756:	f002 ff53 	bl	8004600 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_5_Pin PB14 PB15 */
  GPIO_InitStruct.Pin = LED_5_Pin|GPIO_PIN_14|GPIO_PIN_15;
 800175a:	f24c 0301 	movw	r3, #49153	; 0xc001
 800175e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001760:	2301      	movs	r3, #1
 8001762:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001768:	2300      	movs	r3, #0
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176c:	f107 031c 	add.w	r3, r7, #28
 8001770:	4619      	mov	r1, r3
 8001772:	4818      	ldr	r0, [pc, #96]	; (80017d4 <MX_GPIO_Init+0x19c>)
 8001774:	f002 ff44 	bl	8004600 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE11 SPI_CSN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_11|SPI_CSN_Pin;
 8001778:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 800177c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177e:	2301      	movs	r3, #1
 8001780:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001786:	2300      	movs	r3, #0
 8001788:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800178a:	f107 031c 	add.w	r3, r7, #28
 800178e:	4619      	mov	r1, r3
 8001790:	4811      	ldr	r0, [pc, #68]	; (80017d8 <MX_GPIO_Init+0x1a0>)
 8001792:	f002 ff35 	bl	8004600 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001796:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800179a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179c:	2301      	movs	r3, #1
 800179e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017a8:	f107 031c 	add.w	r3, r7, #28
 80017ac:	4619      	mov	r1, r3
 80017ae:	480b      	ldr	r0, [pc, #44]	; (80017dc <MX_GPIO_Init+0x1a4>)
 80017b0:	f002 ff26 	bl	8004600 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2101      	movs	r1, #1
 80017b8:	2017      	movs	r0, #23
 80017ba:	f002 feea 	bl	8004592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017be:	2017      	movs	r0, #23
 80017c0:	f002 ff03 	bl	80045ca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017c4:	bf00      	nop
 80017c6:	3730      	adds	r7, #48	; 0x30
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40020800 	.word	0x40020800
 80017d4:	40020400 	.word	0x40020400
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40020c00 	.word	0x40020c00
 80017e0:	40020000 	.word	0x40020000

080017e4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==FR1_Pin){
 80017ee:	88fb      	ldrh	r3, [r7, #6]
 80017f0:	2b40      	cmp	r3, #64	; 0x40
 80017f2:	d104      	bne.n	80017fe <HAL_GPIO_EXTI_Callback+0x1a>
		count++;
 80017f4:	4b09      	ldr	r3, [pc, #36]	; (800181c <HAL_GPIO_EXTI_Callback+0x38>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	3301      	adds	r3, #1
 80017fa:	4a08      	ldr	r2, [pc, #32]	; (800181c <HAL_GPIO_EXTI_Callback+0x38>)
 80017fc:	6013      	str	r3, [r2, #0]
	}
	if(GPIO_Pin==FR2_Pin){
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	2b80      	cmp	r3, #128	; 0x80
 8001802:	d104      	bne.n	800180e <HAL_GPIO_EXTI_Callback+0x2a>
			count1++;
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	3301      	adds	r3, #1
 800180a:	4a05      	ldr	r2, [pc, #20]	; (8001820 <HAL_GPIO_EXTI_Callback+0x3c>)
 800180c:	6013      	str	r3, [r2, #0]
		}
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	20000484 	.word	0x20000484
 8001820:	20000488 	.word	0x20000488

08001824 <ADC_Read>:

uint16_t ADC_Read(ADC_HandleTypeDef* hadc, uint32_t ADC_CH)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
	uint32_t val;
	ADC_ChannelConfTypeDef sConfig = {0};
 800182e:	f107 030c 	add.w	r3, r7, #12
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CH;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = 1;
 8001840:	2301      	movs	r3, #1
 8001842:	613b      	str	r3, [r7, #16]
	HAL_ADC_ConfigChannel(hadc, &sConfig);
 8001844:	f107 030c 	add.w	r3, r7, #12
 8001848:	4619      	mov	r1, r3
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f001 fcfc 	bl	8003248 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(hadc);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f001 fb5b 	bl	8002f0c <HAL_ADC_Start>
        HAL_ADC_PollForConversion(hadc, 1);
 8001856:	2101      	movs	r1, #1
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f001 fc5c 	bl	8003116 <HAL_ADC_PollForConversion>
	val = HAL_ADC_GetValue(hadc);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f001 fce4 	bl	800322c <HAL_ADC_GetValue>
 8001864:	61f8      	str	r0, [r7, #28]
	HAL_ADC_Stop(hadc);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f001 fc22 	bl	80030b0 <HAL_ADC_Stop>
	return val;
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	b29b      	uxth	r3, r3
}
 8001870:	4618      	mov	r0, r3
 8001872:	3720      	adds	r7, #32
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <Tim1_cust>:


static void Tim1_cust(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
	/* set the Timer prescaler to get 1kHz as counter clock */
	 Tim1Prescaler= (uint16_t) (SystemCoreClock / 1000) - 1;
 800187c:	4b49      	ldr	r3, [pc, #292]	; (80019a4 <Tim1_cust+0x12c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a49      	ldr	r2, [pc, #292]	; (80019a8 <Tim1_cust+0x130>)
 8001882:	fba2 2303 	umull	r2, r3, r2, r3
 8001886:	099b      	lsrs	r3, r3, #6
 8001888:	b29b      	uxth	r3, r3
 800188a:	3b01      	subs	r3, #1
 800188c:	b29a      	uxth	r2, r3
 800188e:	4b47      	ldr	r3, [pc, #284]	; (80019ac <Tim1_cust+0x134>)
 8001890:	801a      	strh	r2, [r3, #0]
	/* configure the repetition counter */
      TIM1->RCR = ((uint32_t) 9) -1;
 8001892:	4b47      	ldr	r3, [pc, #284]	; (80019b0 <Tim1_cust+0x138>)
 8001894:	2208      	movs	r2, #8
 8001896:	631a      	str	r2, [r3, #48]	; 0x30
 	 rcr_value=TIM1->RCR;
 8001898:	4b45      	ldr	r3, [pc, #276]	; (80019b0 <Tim1_cust+0x138>)
 800189a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189c:	4a45      	ldr	r2, [pc, #276]	; (80019b4 <Tim1_cust+0x13c>)
 800189e:	6013      	str	r3, [r2, #0]
 	/* Initialize the PWM period to get 150 ms as frequency from 1kHz */
	 Period = 110;
 80018a0:	4b45      	ldr	r3, [pc, #276]	; (80019b8 <Tim1_cust+0x140>)
 80018a2:	226e      	movs	r2, #110	; 0x6e
 80018a4:	801a      	strh	r2, [r3, #0]
		/* configure pulse width */
		 TIM1->CCR1 = 100;
 80018a6:	4b42      	ldr	r3, [pc, #264]	; (80019b0 <Tim1_cust+0x138>)
 80018a8:	2264      	movs	r2, #100	; 0x64
 80018aa:	635a      	str	r2, [r3, #52]	; 0x34
	/* configure the Timer prescaler */
	 TIM1->PSC = Tim1Prescaler;
 80018ac:	4b3f      	ldr	r3, [pc, #252]	; (80019ac <Tim1_cust+0x134>)
 80018ae:	881a      	ldrh	r2, [r3, #0]
 80018b0:	4b3f      	ldr	r3, [pc, #252]	; (80019b0 <Tim1_cust+0x138>)
 80018b2:	629a      	str	r2, [r3, #40]	; 0x28
	/* configure the period */
	 TIM1->ARR = Period-1;
 80018b4:	4b40      	ldr	r3, [pc, #256]	; (80019b8 <Tim1_cust+0x140>)
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	1e5a      	subs	r2, r3, #1
 80018ba:	4b3d      	ldr	r3, [pc, #244]	; (80019b0 <Tim1_cust+0x138>)
 80018bc:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Select the Clock Division to 1*/
	/* Reset clock Division bit field */
	 TIM1->CR1 &= ~ TIM_CR1_CKD;
 80018be:	4b3c      	ldr	r3, [pc, #240]	; (80019b0 <Tim1_cust+0x138>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a3b      	ldr	r2, [pc, #236]	; (80019b0 <Tim1_cust+0x138>)
 80018c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018c8:	6013      	str	r3, [r2, #0]
	/* Select DIV1 as clock division*/
	 TIM1->CR1 |= TIM_CLOCKDIVISION_DIV1;
 80018ca:	4b39      	ldr	r3, [pc, #228]	; (80019b0 <Tim1_cust+0x138>)
 80018cc:	4a38      	ldr	r2, [pc, #224]	; (80019b0 <Tim1_cust+0x138>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6013      	str	r3, [r2, #0]
	/* Select the Up-counting for TIM1 counter */
	/* Reset mode selection bit fields*/
	 TIM1->CR1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018d2:	4b37      	ldr	r3, [pc, #220]	; (80019b0 <Tim1_cust+0x138>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a36      	ldr	r2, [pc, #216]	; (80019b0 <Tim1_cust+0x138>)
 80018d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018dc:	6013      	str	r3, [r2, #0]
	/* select Up-counting mode */
	 TIM1->CR1 |= TIM_COUNTERMODE_UP;
 80018de:	4b34      	ldr	r3, [pc, #208]	; (80019b0 <Tim1_cust+0x138>)
 80018e0:	4a33      	ldr	r2, [pc, #204]	; (80019b0 <Tim1_cust+0x138>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6013      	str	r3, [r2, #0]
	/* SET PWM1 mode */
	/* Reset the Output Compare Mode Bits */
	 TIM1->CCMR1 &= ~TIM_CCMR1_OC1M;
 80018e6:	4b32      	ldr	r3, [pc, #200]	; (80019b0 <Tim1_cust+0x138>)
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	4a31      	ldr	r2, [pc, #196]	; (80019b0 <Tim1_cust+0x138>)
 80018ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018f0:	6193      	str	r3, [r2, #24]
	 TIM1->CCMR1 &= ~TIM_CCMR1_CC1S;
 80018f2:	4b2f      	ldr	r3, [pc, #188]	; (80019b0 <Tim1_cust+0x138>)
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	4a2e      	ldr	r2, [pc, #184]	; (80019b0 <Tim1_cust+0x138>)
 80018f8:	f023 0303 	bic.w	r3, r3, #3
 80018fc:	6193      	str	r3, [r2, #24]
	 /* Select the output compare mode 1*/
	  TIM1->CCMR1 |= TIM_OCMODE_PWM1;
 80018fe:	4b2c      	ldr	r3, [pc, #176]	; (80019b0 <Tim1_cust+0x138>)
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	4a2b      	ldr	r2, [pc, #172]	; (80019b0 <Tim1_cust+0x138>)
 8001904:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001908:	6193      	str	r3, [r2, #24]
	 /************** One pulse mode configuration ************/
	  /* One Pulse Mode selection */
	  TIM1->CR1 |= TIM_CR1_OPM;
 800190a:	4b29      	ldr	r3, [pc, #164]	; (80019b0 <Tim1_cust+0x138>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a28      	ldr	r2, [pc, #160]	; (80019b0 <Tim1_cust+0x138>)
 8001910:	f043 0308 	orr.w	r3, r3, #8
 8001914:	6013      	str	r3, [r2, #0]
	 /********************************************************/
	 /******* Slave mode configuration: Trigger mode *********/
	 /* Select the TIM_TS_ITR1 signal as Input trigger for the TIM */
	  TIM1->SMCR &= ~TIM_SMCR_TS;
 8001916:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <Tim1_cust+0x138>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	4a25      	ldr	r2, [pc, #148]	; (80019b0 <Tim1_cust+0x138>)
 800191c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001920:	6093      	str	r3, [r2, #8]
	  TIM1->SMCR |= TIM_TS_ITR1;
 8001922:	4b23      	ldr	r3, [pc, #140]	; (80019b0 <Tim1_cust+0x138>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	4a22      	ldr	r2, [pc, #136]	; (80019b0 <Tim1_cust+0x138>)
 8001928:	f043 0310 	orr.w	r3, r3, #16
 800192c:	6093      	str	r3, [r2, #8]
	 /* Select the Slave Mode */
	  TIM1->SMCR &= ~TIM_SMCR_SMS;
 800192e:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <Tim1_cust+0x138>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	4a1f      	ldr	r2, [pc, #124]	; (80019b0 <Tim1_cust+0x138>)
 8001934:	f023 0307 	bic.w	r3, r3, #7
 8001938:	6093      	str	r3, [r2, #8]
	  TIM1->SMCR |= TIM_SLAVEMODE_TRIGGER;
 800193a:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <Tim1_cust+0x138>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	4a1c      	ldr	r2, [pc, #112]	; (80019b0 <Tim1_cust+0x138>)
 8001940:	f043 0306 	orr.w	r3, r3, #6
 8001944:	6093      	str	r3, [r2, #8]
	 /******************************************************************/
	 /* Enable the output compare 1 Preload */
	  TIM1->CCMR1 |= TIM_CCMR1_OC1PE;
 8001946:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <Tim1_cust+0x138>)
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	4a19      	ldr	r2, [pc, #100]	; (80019b0 <Tim1_cust+0x138>)
 800194c:	f043 0308 	orr.w	r3, r3, #8
 8001950:	6193      	str	r3, [r2, #24]
	 /* Set the UG bit to enable UEV */
	  TIM1->EGR |= TIM_EGR_UG;
 8001952:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <Tim1_cust+0x138>)
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	4a16      	ldr	r2, [pc, #88]	; (80019b0 <Tim1_cust+0x138>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6153      	str	r3, [r2, #20]
	 /* Enable the TIM1 Main Output */
	  TIM1->BDTR |= TIM_BDTR_MOE;
 800195e:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <Tim1_cust+0x138>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	4a13      	ldr	r2, [pc, #76]	; (80019b0 <Tim1_cust+0x138>)
 8001964:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001968:	6453      	str	r3, [r2, #68]	; 0x44
	 /* Select active low as output polarity level */
	 /* Reset the Output Polarity level */
	  TIM1->CCER &= ~TIM_CCER_CC1P;
 800196a:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <Tim1_cust+0x138>)
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	4a10      	ldr	r2, [pc, #64]	; (80019b0 <Tim1_cust+0x138>)
 8001970:	f023 0302 	bic.w	r3, r3, #2
 8001974:	6213      	str	r3, [r2, #32]
	 /* Set the Low output */
	  TIM1->CCER |= TIM_OCPOLARITY_LOW;
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <Tim1_cust+0x138>)
 8001978:	6a1b      	ldr	r3, [r3, #32]
 800197a:	4a0d      	ldr	r2, [pc, #52]	; (80019b0 <Tim1_cust+0x138>)
 800197c:	f043 0302 	orr.w	r3, r3, #2
 8001980:	6213      	str	r3, [r2, #32]
	 /* Enable CC1 output on High level */
	  TIM1->CCER |= TIM_CCER_CC1E;
 8001982:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <Tim1_cust+0x138>)
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <Tim1_cust+0x138>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6213      	str	r3, [r2, #32]
	 /* Enable the TIM Counter */
	  TIM1->CR1 |= TIM_CR1_CEN;
 800198e:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <Tim1_cust+0x138>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a07      	ldr	r2, [pc, #28]	; (80019b0 <Tim1_cust+0x138>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6013      	str	r3, [r2, #0]



}
 800199a:	bf00      	nop
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	20000004 	.word	0x20000004
 80019a8:	10624dd3 	.word	0x10624dd3
 80019ac:	20000474 	.word	0x20000474
 80019b0:	40010000 	.word	0x40010000
 80019b4:	20000490 	.word	0x20000490
 80019b8:	20000476 	.word	0x20000476

080019bc <Tim2_cust>:

static void Tim2_cust(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
	/* set the Timer prescaler to get 1kHz as counter clock */
	 Tim2Prescaler= (uint16_t) ((SystemCoreClock ) / 1000) - 1;
 80019c0:	4b28      	ldr	r3, [pc, #160]	; (8001a64 <Tim2_cust+0xa8>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a28      	ldr	r2, [pc, #160]	; (8001a68 <Tim2_cust+0xac>)
 80019c6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ca:	099b      	lsrs	r3, r3, #6
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	3b01      	subs	r3, #1
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	4b26      	ldr	r3, [pc, #152]	; (8001a6c <Tim2_cust+0xb0>)
 80019d4:	801a      	strh	r2, [r3, #0]
	/* Initialize the PWM period to get 1 sec as frequency from 1MHz */
	 Period2 = 1000;
 80019d6:	4b26      	ldr	r3, [pc, #152]	; (8001a70 <Tim2_cust+0xb4>)
 80019d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019dc:	801a      	strh	r2, [r3, #0]
	/* configure the period */
	 TIM2->ARR = Period2-1;
 80019de:	4b24      	ldr	r3, [pc, #144]	; (8001a70 <Tim2_cust+0xb4>)
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	1e5a      	subs	r2, r3, #1
 80019e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019e8:	62da      	str	r2, [r3, #44]	; 0x2c
	/* configure the Timer prescaler */
	 TIM2->PSC = Tim2Prescaler;
 80019ea:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <Tim2_cust+0xb0>)
 80019ec:	881a      	ldrh	r2, [r3, #0]
 80019ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019f2:	629a      	str	r2, [r3, #40]	; 0x28
	 /* Select the Clock Divison to 1*/
	 /* Reset clock Division bit field */
	  TIM2->CR1 &= ~ TIM_CR1_CKD;
 80019f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a02:	6013      	str	r3, [r2, #0]
	 /* Select DIV1 as clock division*/
	  TIM2->CR1 |= TIM_CLOCKDIVISION_DIV1;
 8001a04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6013      	str	r3, [r2, #0]
	 /* Select the Up-counting for TIM1 counter */
	 /* Reset mode selection bit fields */
	  TIM2->CR1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a1e:	6013      	str	r3, [r2, #0]
	 /* select Up-counting mode */
	  TIM2->CR1 |= TIM_COUNTERMODE_UP;
 8001a20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6013      	str	r3, [r2, #0]
	 /****** Master mode configuration: Trigger update mode *******/
	 /* Trigger of TIM2 Update into TIM1 Slave */
	  TIM1->CR2 &= ~ TIM_CR2_MMS;
 8001a2c:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <Tim2_cust+0xb8>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	4a10      	ldr	r2, [pc, #64]	; (8001a74 <Tim2_cust+0xb8>)
 8001a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a36:	6053      	str	r3, [r2, #4]
	  TIM2->CR2 |= TIM_TRGO_UPDATE;
 8001a38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a42:	f043 0320 	orr.w	r3, r3, #32
 8001a46:	6053      	str	r3, [r2, #4]
	 /*************************************************************/
	 /* Enable the TIM Counter */
	  TIM2->CR1 |= TIM_CR1_CEN;
 8001a48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	6013      	str	r3, [r2, #0]

}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	20000004 	.word	0x20000004
 8001a68:	10624dd3 	.word	0x10624dd3
 8001a6c:	2000047a 	.word	0x2000047a
 8001a70:	20000478 	.word	0x20000478
 8001a74:	40010000 	.word	0x40010000

08001a78 <func_time>:


void func_time(int c)
{if(c==1)
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d101      	bne.n	8001a8a <func_time+0x12>
   flowrate1();
 8001a86:	f000 fb43 	bl	8002110 <flowrate1>
 if(c==2)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d101      	bne.n	8001a94 <func_time+0x1c>
  flowrate2();
 8001a90:	f000 fb66 	bl	8002160 <flowrate2>

 if(c>2)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	dd01      	ble.n	8001a9e <func_time+0x26>
 	 diffunc();
 8001a9a:	f000 f804 	bl	8001aa6 <diffunc>
 }
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <diffunc>:

void diffunc(void)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	af00      	add	r7, sp, #0
//	irsens();
	dampers();
 8001aaa:	f000 facd 	bl	8002048 <dampers>
	pres_temp();
 8001aae:	f000 f807 	bl	8001ac0 <pres_temp>
	lv_batt();
 8001ab2:	f000 fb7d 	bl	80021b0 <lv_batt>
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9,GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10,GPIO_PIN_SET);

}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	0000      	movs	r0, r0
 8001abc:	0000      	movs	r0, r0
	...

08001ac0 <pres_temp>:


void pres_temp(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af02      	add	r7, sp, #8
	      HAL_I2C_Master_Receive(&hi2c1, (uint16_t) (0x36<<1)+1, data1, 4, 10);
 8001ac6:	230a      	movs	r3, #10
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	2304      	movs	r3, #4
 8001acc:	4ac0      	ldr	r2, [pc, #768]	; (8001dd0 <pres_temp+0x310>)
 8001ace:	216d      	movs	r1, #109	; 0x6d
 8001ad0:	48c0      	ldr	r0, [pc, #768]	; (8001dd4 <pres_temp+0x314>)
 8001ad2:	f003 f8d1 	bl	8004c78 <HAL_I2C_Master_Receive>
		  HAL_I2C_Master_Receive(&hi2c1, (uint16_t) (0x28<<1)+1, data2, 4, 10);
 8001ad6:	230a      	movs	r3, #10
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	2304      	movs	r3, #4
 8001adc:	4abe      	ldr	r2, [pc, #760]	; (8001dd8 <pres_temp+0x318>)
 8001ade:	2151      	movs	r1, #81	; 0x51
 8001ae0:	48bc      	ldr	r0, [pc, #752]	; (8001dd4 <pres_temp+0x314>)
 8001ae2:	f003 f8c9 	bl	8004c78 <HAL_I2C_Master_Receive>
	      HAL_I2C_Master_Receive(&hi2c2, (uint16_t) (0x36<<1)+1, data3, 4, 10);
 8001ae6:	230a      	movs	r3, #10
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	2304      	movs	r3, #4
 8001aec:	4abb      	ldr	r2, [pc, #748]	; (8001ddc <pres_temp+0x31c>)
 8001aee:	216d      	movs	r1, #109	; 0x6d
 8001af0:	48bb      	ldr	r0, [pc, #748]	; (8001de0 <pres_temp+0x320>)
 8001af2:	f003 f8c1 	bl	8004c78 <HAL_I2C_Master_Receive>
		  HAL_I2C_Master_Receive(&hi2c2, (uint16_t) (0x28<<1)+1, data4, 4, 10);
 8001af6:	230a      	movs	r3, #10
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	2304      	movs	r3, #4
 8001afc:	4ab9      	ldr	r2, [pc, #740]	; (8001de4 <pres_temp+0x324>)
 8001afe:	2151      	movs	r1, #81	; 0x51
 8001b00:	48b7      	ldr	r0, [pc, #732]	; (8001de0 <pres_temp+0x320>)
 8001b02:	f003 f8b9 	bl	8004c78 <HAL_I2C_Master_Receive>

		  pres=(data1[0]<<8) | data1[1];
 8001b06:	4bb2      	ldr	r3, [pc, #712]	; (8001dd0 <pres_temp+0x310>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	021b      	lsls	r3, r3, #8
 8001b0c:	4ab0      	ldr	r2, [pc, #704]	; (8001dd0 <pres_temp+0x310>)
 8001b0e:	7852      	ldrb	r2, [r2, #1]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	461a      	mov	r2, r3
 8001b14:	4bb4      	ldr	r3, [pc, #720]	; (8001de8 <pres_temp+0x328>)
 8001b16:	601a      	str	r2, [r3, #0]
		  temp = (data1[2]<<3) | (data1[3]>>5);
 8001b18:	4bad      	ldr	r3, [pc, #692]	; (8001dd0 <pres_temp+0x310>)
 8001b1a:	789b      	ldrb	r3, [r3, #2]
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	4aac      	ldr	r2, [pc, #688]	; (8001dd0 <pres_temp+0x310>)
 8001b20:	78d2      	ldrb	r2, [r2, #3]
 8001b22:	0952      	lsrs	r2, r2, #5
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	4313      	orrs	r3, r2
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4bb0      	ldr	r3, [pc, #704]	; (8001dec <pres_temp+0x32c>)
 8001b2c:	601a      	str	r2, [r3, #0]

		  pres2=(data2[0]<<8) | data2[1];
 8001b2e:	4baa      	ldr	r3, [pc, #680]	; (8001dd8 <pres_temp+0x318>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	4aa8      	ldr	r2, [pc, #672]	; (8001dd8 <pres_temp+0x318>)
 8001b36:	7852      	ldrb	r2, [r2, #1]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	4bac      	ldr	r3, [pc, #688]	; (8001df0 <pres_temp+0x330>)
 8001b3e:	601a      	str	r2, [r3, #0]
		  temp2 = (data2[2]<<3) | (data2[3]>>5);
 8001b40:	4ba5      	ldr	r3, [pc, #660]	; (8001dd8 <pres_temp+0x318>)
 8001b42:	789b      	ldrb	r3, [r3, #2]
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	4aa4      	ldr	r2, [pc, #656]	; (8001dd8 <pres_temp+0x318>)
 8001b48:	78d2      	ldrb	r2, [r2, #3]
 8001b4a:	0952      	lsrs	r2, r2, #5
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	461a      	mov	r2, r3
 8001b52:	4ba8      	ldr	r3, [pc, #672]	; (8001df4 <pres_temp+0x334>)
 8001b54:	601a      	str	r2, [r3, #0]

		  pres3=(data3[0]<<8) | data3[1];
 8001b56:	4ba1      	ldr	r3, [pc, #644]	; (8001ddc <pres_temp+0x31c>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	021b      	lsls	r3, r3, #8
 8001b5c:	4a9f      	ldr	r2, [pc, #636]	; (8001ddc <pres_temp+0x31c>)
 8001b5e:	7852      	ldrb	r2, [r2, #1]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	461a      	mov	r2, r3
 8001b64:	4ba4      	ldr	r3, [pc, #656]	; (8001df8 <pres_temp+0x338>)
 8001b66:	601a      	str	r2, [r3, #0]
		  temp3 = (data3[2]<<3) | (data3[3]>>5);
 8001b68:	4b9c      	ldr	r3, [pc, #624]	; (8001ddc <pres_temp+0x31c>)
 8001b6a:	789b      	ldrb	r3, [r3, #2]
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	4a9b      	ldr	r2, [pc, #620]	; (8001ddc <pres_temp+0x31c>)
 8001b70:	78d2      	ldrb	r2, [r2, #3]
 8001b72:	0952      	lsrs	r2, r2, #5
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	4313      	orrs	r3, r2
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4ba0      	ldr	r3, [pc, #640]	; (8001dfc <pres_temp+0x33c>)
 8001b7c:	601a      	str	r2, [r3, #0]

		  pres4=(data4[0]<<8) | data4[1];
 8001b7e:	4b99      	ldr	r3, [pc, #612]	; (8001de4 <pres_temp+0x324>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	021b      	lsls	r3, r3, #8
 8001b84:	4a97      	ldr	r2, [pc, #604]	; (8001de4 <pres_temp+0x324>)
 8001b86:	7852      	ldrb	r2, [r2, #1]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	4b9c      	ldr	r3, [pc, #624]	; (8001e00 <pres_temp+0x340>)
 8001b8e:	601a      	str	r2, [r3, #0]
		  temp4 = (data4[2]<<3) | (data4[3]>>5);
 8001b90:	4b94      	ldr	r3, [pc, #592]	; (8001de4 <pres_temp+0x324>)
 8001b92:	789b      	ldrb	r3, [r3, #2]
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	4a93      	ldr	r2, [pc, #588]	; (8001de4 <pres_temp+0x324>)
 8001b98:	78d2      	ldrb	r2, [r2, #3]
 8001b9a:	0952      	lsrs	r2, r2, #5
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b98      	ldr	r3, [pc, #608]	; (8001e04 <pres_temp+0x344>)
 8001ba4:	601a      	str	r2, [r3, #0]

		  stat = data1[0]>>6;  // first two bits denote status of i2c data,refer datasheet
 8001ba6:	4b8a      	ldr	r3, [pc, #552]	; (8001dd0 <pres_temp+0x310>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	099b      	lsrs	r3, r3, #6
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4b95      	ldr	r3, [pc, #596]	; (8001e08 <pres_temp+0x348>)
 8001bb2:	601a      	str	r2, [r3, #0]
          // Right Rear
		  Tdisplay=((float)temp*200.0/2048.0)-50.0; //Mapping done according to data sheet
 8001bb4:	4b8d      	ldr	r3, [pc, #564]	; (8001dec <pres_temp+0x32c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	ee07 3a90 	vmov	s15, r3
 8001bbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bc0:	ee17 0a90 	vmov	r0, s15
 8001bc4:	f7fe fc78 	bl	80004b8 <__aeabi_f2d>
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	4b8f      	ldr	r3, [pc, #572]	; (8001e0c <pres_temp+0x34c>)
 8001bce:	f7fe fccb 	bl	8000568 <__aeabi_dmul>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	4b8c      	ldr	r3, [pc, #560]	; (8001e10 <pres_temp+0x350>)
 8001be0:	f7fe fdec 	bl	80007bc <__aeabi_ddiv>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4610      	mov	r0, r2
 8001bea:	4619      	mov	r1, r3
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	4b88      	ldr	r3, [pc, #544]	; (8001e14 <pres_temp+0x354>)
 8001bf2:	f7fe fb01 	bl	80001f8 <__aeabi_dsub>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f7fe fec5 	bl	800098c <__aeabi_d2f>
 8001c02:	4603      	mov	r3, r0
 8001c04:	4a84      	ldr	r2, [pc, #528]	; (8001e18 <pres_temp+0x358>)
 8001c06:	6013      	str	r3, [r2, #0]
		  pres = (((1 << 14) - 1) & (pres >> (1 - 1))); // masked out the first two bits denoting status
 8001c08:	4b77      	ldr	r3, [pc, #476]	; (8001de8 <pres_temp+0x328>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001c10:	4a75      	ldr	r2, [pc, #468]	; (8001de8 <pres_temp+0x328>)
 8001c12:	6013      	str	r3, [r2, #0]
		  Pdisplay=(((float)pres-1000.0)*7.0/14000.0); //Mapping done according to data sheet
 8001c14:	4b74      	ldr	r3, [pc, #464]	; (8001de8 <pres_temp+0x328>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	ee07 3a90 	vmov	s15, r3
 8001c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c20:	ee17 0a90 	vmov	r0, s15
 8001c24:	f7fe fc48 	bl	80004b8 <__aeabi_f2d>
 8001c28:	f04f 0200 	mov.w	r2, #0
 8001c2c:	4b7b      	ldr	r3, [pc, #492]	; (8001e1c <pres_temp+0x35c>)
 8001c2e:	f7fe fae3 	bl	80001f8 <__aeabi_dsub>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4610      	mov	r0, r2
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	4b78      	ldr	r3, [pc, #480]	; (8001e20 <pres_temp+0x360>)
 8001c40:	f7fe fc92 	bl	8000568 <__aeabi_dmul>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	a35c      	add	r3, pc, #368	; (adr r3, 8001dc0 <pres_temp+0x300>)
 8001c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c52:	f7fe fdb3 	bl	80007bc <__aeabi_ddiv>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f7fe fe95 	bl	800098c <__aeabi_d2f>
 8001c62:	4603      	mov	r3, r0
 8001c64:	4a6f      	ldr	r2, [pc, #444]	; (8001e24 <pres_temp+0x364>)
 8001c66:	6013      	str	r3, [r2, #0]

		  // Right Front
		 Tdisplay2=((float)temp2*200.0/2048.0)-50.0; //Mapping done according to data sheet
 8001c68:	4b62      	ldr	r3, [pc, #392]	; (8001df4 <pres_temp+0x334>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	ee07 3a90 	vmov	s15, r3
 8001c70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c74:	ee17 0a90 	vmov	r0, s15
 8001c78:	f7fe fc1e 	bl	80004b8 <__aeabi_f2d>
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	4b62      	ldr	r3, [pc, #392]	; (8001e0c <pres_temp+0x34c>)
 8001c82:	f7fe fc71 	bl	8000568 <__aeabi_dmul>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f04f 0200 	mov.w	r2, #0
 8001c92:	4b5f      	ldr	r3, [pc, #380]	; (8001e10 <pres_temp+0x350>)
 8001c94:	f7fe fd92 	bl	80007bc <__aeabi_ddiv>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	4b5b      	ldr	r3, [pc, #364]	; (8001e14 <pres_temp+0x354>)
 8001ca6:	f7fe faa7 	bl	80001f8 <__aeabi_dsub>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4610      	mov	r0, r2
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f7fe fe6b 	bl	800098c <__aeabi_d2f>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	4a5b      	ldr	r2, [pc, #364]	; (8001e28 <pres_temp+0x368>)
 8001cba:	6013      	str	r3, [r2, #0]
		 pres2 = (((1 << 14) - 1) & (pres2 >> (1 - 1))); // masked out the first two bits denoting status
 8001cbc:	4b4c      	ldr	r3, [pc, #304]	; (8001df0 <pres_temp+0x330>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001cc4:	4a4a      	ldr	r2, [pc, #296]	; (8001df0 <pres_temp+0x330>)
 8001cc6:	6013      	str	r3, [r2, #0]
		 Pdisplay2=(((float)pres2-1000.0)*7.0/14000.0)-0.01; //Mapping done according to data sheet
 8001cc8:	4b49      	ldr	r3, [pc, #292]	; (8001df0 <pres_temp+0x330>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	ee07 3a90 	vmov	s15, r3
 8001cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cd4:	ee17 0a90 	vmov	r0, s15
 8001cd8:	f7fe fbee 	bl	80004b8 <__aeabi_f2d>
 8001cdc:	f04f 0200 	mov.w	r2, #0
 8001ce0:	4b4e      	ldr	r3, [pc, #312]	; (8001e1c <pres_temp+0x35c>)
 8001ce2:	f7fe fa89 	bl	80001f8 <__aeabi_dsub>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	4610      	mov	r0, r2
 8001cec:	4619      	mov	r1, r3
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	4b4b      	ldr	r3, [pc, #300]	; (8001e20 <pres_temp+0x360>)
 8001cf4:	f7fe fc38 	bl	8000568 <__aeabi_dmul>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	4619      	mov	r1, r3
 8001d00:	a32f      	add	r3, pc, #188	; (adr r3, 8001dc0 <pres_temp+0x300>)
 8001d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d06:	f7fe fd59 	bl	80007bc <__aeabi_ddiv>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4610      	mov	r0, r2
 8001d10:	4619      	mov	r1, r3
 8001d12:	a32d      	add	r3, pc, #180	; (adr r3, 8001dc8 <pres_temp+0x308>)
 8001d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d18:	f7fe fa6e 	bl	80001f8 <__aeabi_dsub>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4610      	mov	r0, r2
 8001d22:	4619      	mov	r1, r3
 8001d24:	f7fe fe32 	bl	800098c <__aeabi_d2f>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	4a40      	ldr	r2, [pc, #256]	; (8001e2c <pres_temp+0x36c>)
 8001d2c:	6013      	str	r3, [r2, #0]
        //Left Rear
		 Tdisplay3=((float)temp3*200.0/2048.0)-50.0; //Mapping done according to data sheet
 8001d2e:	4b33      	ldr	r3, [pc, #204]	; (8001dfc <pres_temp+0x33c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	ee07 3a90 	vmov	s15, r3
 8001d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d3a:	ee17 0a90 	vmov	r0, s15
 8001d3e:	f7fe fbbb 	bl	80004b8 <__aeabi_f2d>
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	4b31      	ldr	r3, [pc, #196]	; (8001e0c <pres_temp+0x34c>)
 8001d48:	f7fe fc0e 	bl	8000568 <__aeabi_dmul>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4610      	mov	r0, r2
 8001d52:	4619      	mov	r1, r3
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	4b2d      	ldr	r3, [pc, #180]	; (8001e10 <pres_temp+0x350>)
 8001d5a:	f7fe fd2f 	bl	80007bc <__aeabi_ddiv>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4610      	mov	r0, r2
 8001d64:	4619      	mov	r1, r3
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	4b2a      	ldr	r3, [pc, #168]	; (8001e14 <pres_temp+0x354>)
 8001d6c:	f7fe fa44 	bl	80001f8 <__aeabi_dsub>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4610      	mov	r0, r2
 8001d76:	4619      	mov	r1, r3
 8001d78:	f7fe fe08 	bl	800098c <__aeabi_d2f>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	4a2c      	ldr	r2, [pc, #176]	; (8001e30 <pres_temp+0x370>)
 8001d80:	6013      	str	r3, [r2, #0]
     	  pres3 = (((1 << 14) - 1) & (pres3 >> (1 - 1))); // masked out the first two bits denoting status
 8001d82:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <pres_temp+0x338>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001d8a:	4a1b      	ldr	r2, [pc, #108]	; (8001df8 <pres_temp+0x338>)
 8001d8c:	6013      	str	r3, [r2, #0]
		  Pdisplay3=(((float)pres3-1000.0)*7.0/14000.0); //Mapping done according to data sheet
 8001d8e:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <pres_temp+0x338>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	ee07 3a90 	vmov	s15, r3
 8001d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d9a:	ee17 0a90 	vmov	r0, s15
 8001d9e:	f7fe fb8b 	bl	80004b8 <__aeabi_f2d>
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	4b1d      	ldr	r3, [pc, #116]	; (8001e1c <pres_temp+0x35c>)
 8001da8:	f7fe fa26 	bl	80001f8 <__aeabi_dsub>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	e03c      	b.n	8001e34 <pres_temp+0x374>
 8001dba:	bf00      	nop
 8001dbc:	f3af 8000 	nop.w
 8001dc0:	00000000 	.word	0x00000000
 8001dc4:	40cb5800 	.word	0x40cb5800
 8001dc8:	47ae147b 	.word	0x47ae147b
 8001dcc:	3f847ae1 	.word	0x3f847ae1
 8001dd0:	200004e8 	.word	0x200004e8
 8001dd4:	20000220 	.word	0x20000220
 8001dd8:	200004ec 	.word	0x200004ec
 8001ddc:	200004f0 	.word	0x200004f0
 8001de0:	20000274 	.word	0x20000274
 8001de4:	200004f4 	.word	0x200004f4
 8001de8:	20000450 	.word	0x20000450
 8001dec:	20000460 	.word	0x20000460
 8001df0:	20000454 	.word	0x20000454
 8001df4:	20000464 	.word	0x20000464
 8001df8:	20000458 	.word	0x20000458
 8001dfc:	20000468 	.word	0x20000468
 8001e00:	2000045c 	.word	0x2000045c
 8001e04:	2000046c 	.word	0x2000046c
 8001e08:	20000470 	.word	0x20000470
 8001e0c:	40690000 	.word	0x40690000
 8001e10:	40a00000 	.word	0x40a00000
 8001e14:	40490000 	.word	0x40490000
 8001e18:	200004c8 	.word	0x200004c8
 8001e1c:	408f4000 	.word	0x408f4000
 8001e20:	401c0000 	.word	0x401c0000
 8001e24:	200004cc 	.word	0x200004cc
 8001e28:	200004d0 	.word	0x200004d0
 8001e2c:	200004d4 	.word	0x200004d4
 8001e30:	200004d8 	.word	0x200004d8
 8001e34:	4b72      	ldr	r3, [pc, #456]	; (8002000 <pres_temp+0x540>)
 8001e36:	f7fe fb97 	bl	8000568 <__aeabi_dmul>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	4610      	mov	r0, r2
 8001e40:	4619      	mov	r1, r3
 8001e42:	a36d      	add	r3, pc, #436	; (adr r3, 8001ff8 <pres_temp+0x538>)
 8001e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e48:	f7fe fcb8 	bl	80007bc <__aeabi_ddiv>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4610      	mov	r0, r2
 8001e52:	4619      	mov	r1, r3
 8001e54:	f7fe fd9a 	bl	800098c <__aeabi_d2f>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	4a6a      	ldr	r2, [pc, #424]	; (8002004 <pres_temp+0x544>)
 8001e5c:	6013      	str	r3, [r2, #0]

		  // Left Front
		  Tdisplay4=((float)temp4*200.0/2048.0)-50.0; //Mapping done according to data sheet
 8001e5e:	4b6a      	ldr	r3, [pc, #424]	; (8002008 <pres_temp+0x548>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	ee07 3a90 	vmov	s15, r3
 8001e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e6a:	ee17 0a90 	vmov	r0, s15
 8001e6e:	f7fe fb23 	bl	80004b8 <__aeabi_f2d>
 8001e72:	f04f 0200 	mov.w	r2, #0
 8001e76:	4b65      	ldr	r3, [pc, #404]	; (800200c <pres_temp+0x54c>)
 8001e78:	f7fe fb76 	bl	8000568 <__aeabi_dmul>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4610      	mov	r0, r2
 8001e82:	4619      	mov	r1, r3
 8001e84:	f04f 0200 	mov.w	r2, #0
 8001e88:	4b61      	ldr	r3, [pc, #388]	; (8002010 <pres_temp+0x550>)
 8001e8a:	f7fe fc97 	bl	80007bc <__aeabi_ddiv>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4610      	mov	r0, r2
 8001e94:	4619      	mov	r1, r3
 8001e96:	f04f 0200 	mov.w	r2, #0
 8001e9a:	4b5e      	ldr	r3, [pc, #376]	; (8002014 <pres_temp+0x554>)
 8001e9c:	f7fe f9ac 	bl	80001f8 <__aeabi_dsub>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	4610      	mov	r0, r2
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	f7fe fd70 	bl	800098c <__aeabi_d2f>
 8001eac:	4603      	mov	r3, r0
 8001eae:	4a5a      	ldr	r2, [pc, #360]	; (8002018 <pres_temp+0x558>)
 8001eb0:	6013      	str	r3, [r2, #0]
 		  pres4 = (((1 << 14) - 1) & (pres4 >> (1 - 1))); // masked out the first two bits denoting status
 8001eb2:	4b5a      	ldr	r3, [pc, #360]	; (800201c <pres_temp+0x55c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001eba:	4a58      	ldr	r2, [pc, #352]	; (800201c <pres_temp+0x55c>)
 8001ebc:	6013      	str	r3, [r2, #0]
 		  Pdisplay4=(((float)pres4-1000.0)*7.0/14000.0); //Mapping done according to data sheet
 8001ebe:	4b57      	ldr	r3, [pc, #348]	; (800201c <pres_temp+0x55c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	ee07 3a90 	vmov	s15, r3
 8001ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eca:	ee17 0a90 	vmov	r0, s15
 8001ece:	f7fe faf3 	bl	80004b8 <__aeabi_f2d>
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	4b52      	ldr	r3, [pc, #328]	; (8002020 <pres_temp+0x560>)
 8001ed8:	f7fe f98e 	bl	80001f8 <__aeabi_dsub>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4610      	mov	r0, r2
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	4b45      	ldr	r3, [pc, #276]	; (8002000 <pres_temp+0x540>)
 8001eea:	f7fe fb3d 	bl	8000568 <__aeabi_dmul>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	a340      	add	r3, pc, #256	; (adr r3, 8001ff8 <pres_temp+0x538>)
 8001ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efc:	f7fe fc5e 	bl	80007bc <__aeabi_ddiv>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4610      	mov	r0, r2
 8001f06:	4619      	mov	r1, r3
 8001f08:	f7fe fd40 	bl	800098c <__aeabi_d2f>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	4a45      	ldr	r2, [pc, #276]	; (8002024 <pres_temp+0x564>)
 8001f10:	6013      	str	r3, [r2, #0]

 		  ptl[0]=(uint16_t)(Tdisplay3*10);//Left Front
 8001f12:	4b45      	ldr	r3, [pc, #276]	; (8002028 <pres_temp+0x568>)
 8001f14:	edd3 7a00 	vldr	s15, [r3]
 8001f18:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f24:	ee17 3a90 	vmov	r3, s15
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	4b40      	ldr	r3, [pc, #256]	; (800202c <pres_temp+0x56c>)
 8001f2c:	801a      	strh	r2, [r3, #0]
 		  ptl[1]=(uint16_t)(Pdisplay3*10);
 8001f2e:	4b35      	ldr	r3, [pc, #212]	; (8002004 <pres_temp+0x544>)
 8001f30:	edd3 7a00 	vldr	s15, [r3]
 8001f34:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f40:	ee17 3a90 	vmov	r3, s15
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	4b39      	ldr	r3, [pc, #228]	; (800202c <pres_temp+0x56c>)
 8001f48:	805a      	strh	r2, [r3, #2]
 		  ptl[2]=(uint16_t)(Tdisplay4*10);//Left Rear
 8001f4a:	4b33      	ldr	r3, [pc, #204]	; (8002018 <pres_temp+0x558>)
 8001f4c:	edd3 7a00 	vldr	s15, [r3]
 8001f50:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f5c:	ee17 3a90 	vmov	r3, s15
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	4b32      	ldr	r3, [pc, #200]	; (800202c <pres_temp+0x56c>)
 8001f64:	809a      	strh	r2, [r3, #4]
 		  ptl[3]=(uint16_t)(Pdisplay4*10);
 8001f66:	4b2f      	ldr	r3, [pc, #188]	; (8002024 <pres_temp+0x564>)
 8001f68:	edd3 7a00 	vldr	s15, [r3]
 8001f6c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f78:	ee17 3a90 	vmov	r3, s15
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	4b2b      	ldr	r3, [pc, #172]	; (800202c <pres_temp+0x56c>)
 8001f80:	80da      	strh	r2, [r3, #6]

 		  ptr[0]=(uint16_t)(Tdisplay2*10);// Right Front
 8001f82:	4b2b      	ldr	r3, [pc, #172]	; (8002030 <pres_temp+0x570>)
 8001f84:	edd3 7a00 	vldr	s15, [r3]
 8001f88:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f94:	ee17 3a90 	vmov	r3, s15
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	4b26      	ldr	r3, [pc, #152]	; (8002034 <pres_temp+0x574>)
 8001f9c:	801a      	strh	r2, [r3, #0]
 		  ptr[1]=(uint16_t)(Pdisplay2*10);
 8001f9e:	4b26      	ldr	r3, [pc, #152]	; (8002038 <pres_temp+0x578>)
 8001fa0:	edd3 7a00 	vldr	s15, [r3]
 8001fa4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001fa8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fb0:	ee17 3a90 	vmov	r3, s15
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	4b1f      	ldr	r3, [pc, #124]	; (8002034 <pres_temp+0x574>)
 8001fb8:	805a      	strh	r2, [r3, #2]
 		  ptr[2]=(uint16_t)(Tdisplay*10);//Right  Rear
 8001fba:	4b20      	ldr	r3, [pc, #128]	; (800203c <pres_temp+0x57c>)
 8001fbc:	edd3 7a00 	vldr	s15, [r3]
 8001fc0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001fc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fcc:	ee17 3a90 	vmov	r3, s15
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	4b18      	ldr	r3, [pc, #96]	; (8002034 <pres_temp+0x574>)
 8001fd4:	809a      	strh	r2, [r3, #4]
 		  ptr[3]=(uint16_t)(Pdisplay*10);
 8001fd6:	4b1a      	ldr	r3, [pc, #104]	; (8002040 <pres_temp+0x580>)
 8001fd8:	edd3 7a00 	vldr	s15, [r3]
 8001fdc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001fe0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fe4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fe8:	ee17 3a90 	vmov	r3, s15
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	4b11      	ldr	r3, [pc, #68]	; (8002034 <pres_temp+0x574>)
 8001ff0:	80da      	strh	r2, [r3, #6]


}
 8001ff2:	bf00      	nop
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	00000000 	.word	0x00000000
 8001ffc:	40cb5800 	.word	0x40cb5800
 8002000:	401c0000 	.word	0x401c0000
 8002004:	200004dc 	.word	0x200004dc
 8002008:	2000046c 	.word	0x2000046c
 800200c:	40690000 	.word	0x40690000
 8002010:	40a00000 	.word	0x40a00000
 8002014:	40490000 	.word	0x40490000
 8002018:	200004e0 	.word	0x200004e0
 800201c:	2000045c 	.word	0x2000045c
 8002020:	408f4000 	.word	0x408f4000
 8002024:	200004e4 	.word	0x200004e4
 8002028:	200004d8 	.word	0x200004d8
 800202c:	20000498 	.word	0x20000498
 8002030:	200004d0 	.word	0x200004d0
 8002034:	200004a8 	.word	0x200004a8
 8002038:	200004d4 	.word	0x200004d4
 800203c:	200004c8 	.word	0x200004c8
 8002040:	200004cc 	.word	0x200004cc
 8002044:	00000000 	.word	0x00000000

08002048 <dampers>:

void dampers(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
	damp_sens[0] = ADC_Read(&hadc1,ADC_CHANNEL_12);
 800204c:	210c      	movs	r1, #12
 800204e:	482a      	ldr	r0, [pc, #168]	; (80020f8 <dampers+0xb0>)
 8002050:	f7ff fbe8 	bl	8001824 <ADC_Read>
 8002054:	4603      	mov	r3, r0
 8002056:	461a      	mov	r2, r3
 8002058:	4b28      	ldr	r3, [pc, #160]	; (80020fc <dampers+0xb4>)
 800205a:	801a      	strh	r2, [r3, #0]
	damp_sens[1] = ADC_Read(&hadc1,ADC_CHANNEL_13);
 800205c:	210d      	movs	r1, #13
 800205e:	4826      	ldr	r0, [pc, #152]	; (80020f8 <dampers+0xb0>)
 8002060:	f7ff fbe0 	bl	8001824 <ADC_Read>
 8002064:	4603      	mov	r3, r0
 8002066:	461a      	mov	r2, r3
 8002068:	4b24      	ldr	r3, [pc, #144]	; (80020fc <dampers+0xb4>)
 800206a:	805a      	strh	r2, [r3, #2]
	damp_right=damp_sens[0]*3.30/4096.0;
 800206c:	4b23      	ldr	r3, [pc, #140]	; (80020fc <dampers+0xb4>)
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe fa0f 	bl	8000494 <__aeabi_i2d>
 8002076:	a31e      	add	r3, pc, #120	; (adr r3, 80020f0 <dampers+0xa8>)
 8002078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207c:	f7fe fa74 	bl	8000568 <__aeabi_dmul>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	4610      	mov	r0, r2
 8002086:	4619      	mov	r1, r3
 8002088:	f04f 0200 	mov.w	r2, #0
 800208c:	4b1c      	ldr	r3, [pc, #112]	; (8002100 <dampers+0xb8>)
 800208e:	f7fe fb95 	bl	80007bc <__aeabi_ddiv>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	4610      	mov	r0, r2
 8002098:	4619      	mov	r1, r3
 800209a:	f7fe fc77 	bl	800098c <__aeabi_d2f>
 800209e:	4603      	mov	r3, r0
 80020a0:	4a18      	ldr	r2, [pc, #96]	; (8002104 <dampers+0xbc>)
 80020a2:	6013      	str	r3, [r2, #0]
	damp_left=damp_sens[1]*3.30/4096.0;
 80020a4:	4b15      	ldr	r3, [pc, #84]	; (80020fc <dampers+0xb4>)
 80020a6:	885b      	ldrh	r3, [r3, #2]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe f9f3 	bl	8000494 <__aeabi_i2d>
 80020ae:	a310      	add	r3, pc, #64	; (adr r3, 80020f0 <dampers+0xa8>)
 80020b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b4:	f7fe fa58 	bl	8000568 <__aeabi_dmul>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	4610      	mov	r0, r2
 80020be:	4619      	mov	r1, r3
 80020c0:	f04f 0200 	mov.w	r2, #0
 80020c4:	4b0e      	ldr	r3, [pc, #56]	; (8002100 <dampers+0xb8>)
 80020c6:	f7fe fb79 	bl	80007bc <__aeabi_ddiv>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	4610      	mov	r0, r2
 80020d0:	4619      	mov	r1, r3
 80020d2:	f7fe fc5b 	bl	800098c <__aeabi_d2f>
 80020d6:	4603      	mov	r3, r0
 80020d8:	4a0b      	ldr	r2, [pc, #44]	; (8002108 <dampers+0xc0>)
 80020da:	6013      	str	r3, [r2, #0]
    sens[0]=damp_sens[0];
 80020dc:	4b07      	ldr	r3, [pc, #28]	; (80020fc <dampers+0xb4>)
 80020de:	881a      	ldrh	r2, [r3, #0]
 80020e0:	4b0a      	ldr	r3, [pc, #40]	; (800210c <dampers+0xc4>)
 80020e2:	801a      	strh	r2, [r3, #0]
    sens[1]=damp_sens[1];
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <dampers+0xb4>)
 80020e6:	885a      	ldrh	r2, [r3, #2]
 80020e8:	4b08      	ldr	r3, [pc, #32]	; (800210c <dampers+0xc4>)
 80020ea:	805a      	strh	r2, [r3, #2]

}
 80020ec:	bf00      	nop
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	66666666 	.word	0x66666666
 80020f4:	400a6666 	.word	0x400a6666
 80020f8:	200000f8 	.word	0x200000f8
 80020fc:	20000494 	.word	0x20000494
 8002100:	40b00000 	.word	0x40b00000
 8002104:	20000440 	.word	0x20000440
 8002108:	20000444 	.word	0x20000444
 800210c:	200004b8 	.word	0x200004b8

08002110 <flowrate1>:


}

void flowrate1(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
    flowr=count/5.50;
 8002114:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <flowrate1+0x40>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe f9bb 	bl	8000494 <__aeabi_i2d>
 800211e:	f04f 0200 	mov.w	r2, #0
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <flowrate1+0x44>)
 8002124:	f7fe fb4a 	bl	80007bc <__aeabi_ddiv>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	4610      	mov	r0, r2
 800212e:	4619      	mov	r1, r3
 8002130:	f7fe fc2c 	bl	800098c <__aeabi_d2f>
 8002134:	4603      	mov	r3, r0
 8002136:	4a08      	ldr	r2, [pc, #32]	; (8002158 <flowrate1+0x48>)
 8002138:	6013      	str	r3, [r2, #0]
	count=0;
 800213a:	4b05      	ldr	r3, [pc, #20]	; (8002150 <flowrate1+0x40>)
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]

	sens[2]=(uint8_t) count;
 8002140:	4b03      	ldr	r3, [pc, #12]	; (8002150 <flowrate1+0x40>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	b29a      	uxth	r2, r3
 8002148:	4b04      	ldr	r3, [pc, #16]	; (800215c <flowrate1+0x4c>)
 800214a:	809a      	strh	r2, [r3, #4]


}
 800214c:	bf00      	nop
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20000484 	.word	0x20000484
 8002154:	40160000 	.word	0x40160000
 8002158:	20000448 	.word	0x20000448
 800215c:	200004b8 	.word	0x200004b8

08002160 <flowrate2>:
void flowrate2(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
    flowr1=count1/5.50;
 8002164:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <flowrate2+0x40>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe f993 	bl	8000494 <__aeabi_i2d>
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <flowrate2+0x44>)
 8002174:	f7fe fb22 	bl	80007bc <__aeabi_ddiv>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	4610      	mov	r0, r2
 800217e:	4619      	mov	r1, r3
 8002180:	f7fe fc04 	bl	800098c <__aeabi_d2f>
 8002184:	4603      	mov	r3, r0
 8002186:	4a08      	ldr	r2, [pc, #32]	; (80021a8 <flowrate2+0x48>)
 8002188:	6013      	str	r3, [r2, #0]
	count1=0;
 800218a:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <flowrate2+0x40>)
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]

	sens[3]=(uint8_t) count1;
 8002190:	4b03      	ldr	r3, [pc, #12]	; (80021a0 <flowrate2+0x40>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	b29a      	uxth	r2, r3
 8002198:	4b04      	ldr	r3, [pc, #16]	; (80021ac <flowrate2+0x4c>)
 800219a:	80da      	strh	r2, [r3, #6]



}
 800219c:	bf00      	nop
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20000488 	.word	0x20000488
 80021a4:	40160000 	.word	0x40160000
 80021a8:	2000044c 	.word	0x2000044c
 80021ac:	200004b8 	.word	0x200004b8

080021b0 <lv_batt>:

void lv_batt(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
	batt=ADC_Read(&hadc2,ADC_CHANNEL_2);
 80021b4:	2102      	movs	r1, #2
 80021b6:	4806      	ldr	r0, [pc, #24]	; (80021d0 <lv_batt+0x20>)
 80021b8:	f7ff fb34 	bl	8001824 <ADC_Read>
 80021bc:	4603      	mov	r3, r0
 80021be:	461a      	mov	r2, r3
 80021c0:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <lv_batt+0x24>)
 80021c2:	801a      	strh	r2, [r3, #0]
	sens[2]=batt;
 80021c4:	4b03      	ldr	r3, [pc, #12]	; (80021d4 <lv_batt+0x24>)
 80021c6:	881a      	ldrh	r2, [r3, #0]
 80021c8:	4b03      	ldr	r3, [pc, #12]	; (80021d8 <lv_batt+0x28>)
 80021ca:	809a      	strh	r2, [r3, #4]

}
 80021cc:	bf00      	nop
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20000140 	.word	0x20000140
 80021d4:	200004c4 	.word	0x200004c4
 80021d8:	200004b8 	.word	0x200004b8

080021dc <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)

{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
	if(htim == &htim1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a0e      	ldr	r2, [pc, #56]	; (8002220 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d114      	bne.n	8002216 <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
	{   rcr_value=TIM1->CNT;
 80021ec:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	4a0d      	ldr	r2, [pc, #52]	; (8002228 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 80021f2:	6013      	str	r3, [r2, #0]
      if(c==10)
 80021f4:	4b0d      	ldr	r3, [pc, #52]	; (800222c <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b0a      	cmp	r3, #10
 80021fa:	d102      	bne.n	8002202 <HAL_TIM_PWM_PulseFinishedCallback+0x26>
    	  c=1;
 80021fc:	4b0b      	ldr	r3, [pc, #44]	; (800222c <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 80021fe:	2201      	movs	r2, #1
 8002200:	601a      	str	r2, [r3, #0]
      func_time(c);
 8002202:	4b0a      	ldr	r3, [pc, #40]	; (800222c <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff fc36 	bl	8001a78 <func_time>
	  c++;}
 800220c:	4b07      	ldr	r3, [pc, #28]	; (800222c <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	3301      	adds	r3, #1
 8002212:	4a06      	ldr	r2, [pc, #24]	; (800222c <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 8002214:	6013      	str	r3, [r2, #0]
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000320 	.word	0x20000320
 8002224:	40010000 	.word	0x40010000
 8002228:	20000490 	.word	0x20000490
 800222c:	20000000 	.word	0x20000000

08002230 <CAN_Start>:
//	if(htim == &htim13 && tim_on==1 )
//		{
//			 CAN_transmit();
//		}
//}
void CAN_Start(){
 8002230:	b580      	push	{r7, lr}
 8002232:	b094      	sub	sp, #80	; 0x50
 8002234:	af00      	add	r7, sp, #0

	CAN_FilterTypeDef filter1, filter2;

	filter1.FilterBank = 0;
 8002236:	2300      	movs	r3, #0
 8002238:	63fb      	str	r3, [r7, #60]	; 0x3c
	filter1.FilterActivation = ENABLE;
 800223a:	2301      	movs	r3, #1
 800223c:	64bb      	str	r3, [r7, #72]	; 0x48
	filter1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800223e:	2300      	movs	r3, #0
 8002240:	63bb      	str	r3, [r7, #56]	; 0x38
	filter1.FilterScale = CAN_FILTERSCALE_32BIT;
 8002242:	2301      	movs	r3, #1
 8002244:	647b      	str	r3, [r7, #68]	; 0x44
	filter1.FilterMode = CAN_FILTERMODE_IDMASK;
 8002246:	2300      	movs	r3, #0
 8002248:	643b      	str	r3, [r7, #64]	; 0x40

	filter1.FilterMaskIdHigh = 0x0000;
 800224a:	2300      	movs	r3, #0
 800224c:	633b      	str	r3, [r7, #48]	; 0x30
	filter1.FilterMaskIdLow  = 0x0000;
 800224e:	2300      	movs	r3, #0
 8002250:	637b      	str	r3, [r7, #52]	; 0x34

	filter1.FilterIdLow  = 0x0000;
 8002252:	2300      	movs	r3, #0
 8002254:	62fb      	str	r3, [r7, #44]	; 0x2c
	filter1.FilterIdHigh = 0x0000;
 8002256:	2300      	movs	r3, #0
 8002258:	62bb      	str	r3, [r7, #40]	; 0x28

	filter1.SlaveStartFilterBank = 14;
 800225a:	230e      	movs	r3, #14
 800225c:	64fb      	str	r3, [r7, #76]	; 0x4c
	filter2.FilterBank = 15;
 800225e:	230f      	movs	r3, #15
 8002260:	617b      	str	r3, [r7, #20]

	filter2.FilterActivation = ENABLE;
 8002262:	2301      	movs	r3, #1
 8002264:	623b      	str	r3, [r7, #32]
	filter2.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8002266:	2301      	movs	r3, #1
 8002268:	613b      	str	r3, [r7, #16]

	filter2.FilterScale = CAN_FILTERSCALE_32BIT;
 800226a:	2301      	movs	r3, #1
 800226c:	61fb      	str	r3, [r7, #28]
	filter2.FilterMode = CAN_FILTERMODE_IDMASK;
 800226e:	2300      	movs	r3, #0
 8002270:	61bb      	str	r3, [r7, #24]

	filter2.FilterMaskIdHigh = 0x0000;
 8002272:	2300      	movs	r3, #0
 8002274:	60bb      	str	r3, [r7, #8]
	filter2.FilterMaskIdLow  = 0x0000;
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]

	filter2.FilterIdLow  = 0x0000;
 800227a:	2300      	movs	r3, #0
 800227c:	607b      	str	r3, [r7, #4]
	filter2.FilterIdHigh = 0x0000;
 800227e:	2300      	movs	r3, #0
 8002280:	603b      	str	r3, [r7, #0]

	filter2.SlaveStartFilterBank = 14;
 8002282:	230e      	movs	r3, #14
 8002284:	627b      	str	r3, [r7, #36]	; 0x24


	if (HAL_CAN_ConfigFilter(&hcan1, &filter1) != HAL_OK) { // Configuring CAN line according to Filter values
 8002286:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800228a:	4619      	mov	r1, r3
 800228c:	481b      	ldr	r0, [pc, #108]	; (80022fc <CAN_Start+0xcc>)
 800228e:	f001 fb05 	bl	800389c <HAL_CAN_ConfigFilter>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <CAN_Start+0x6c>
		Error_Handler();
 8002298:	f000 f980 	bl	800259c <Error_Handler>
	}
	if (HAL_CAN_ConfigFilter(&hcan2, &filter2)!= HAL_OK){
 800229c:	463b      	mov	r3, r7
 800229e:	4619      	mov	r1, r3
 80022a0:	4817      	ldr	r0, [pc, #92]	; (8002300 <CAN_Start+0xd0>)
 80022a2:	f001 fafb 	bl	800389c <HAL_CAN_ConfigFilter>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <CAN_Start+0x80>
		Error_Handler();
 80022ac:	f000 f976 	bl	800259c <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK) { // CAN start
 80022b0:	4812      	ldr	r0, [pc, #72]	; (80022fc <CAN_Start+0xcc>)
 80022b2:	f001 fbd3 	bl	8003a5c <HAL_CAN_Start>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <CAN_Start+0x90>
		Error_Handler();
 80022bc:	f000 f96e 	bl	800259c <Error_Handler>
	}

	if(HAL_CAN_Start(&hcan2) != HAL_OK){
 80022c0:	480f      	ldr	r0, [pc, #60]	; (8002300 <CAN_Start+0xd0>)
 80022c2:	f001 fbcb 	bl	8003a5c <HAL_CAN_Start>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <CAN_Start+0xa0>
		Error_Handler();
 80022cc:	f000 f966 	bl	800259c <Error_Handler>
	}

	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL | CAN_IT_RX_FIFO0_OVERRUN) != HAL_OK){ // Interrupt activation
 80022d0:	210e      	movs	r1, #14
 80022d2:	480a      	ldr	r0, [pc, #40]	; (80022fc <CAN_Start+0xcc>)
 80022d4:	f001 fe2d 	bl	8003f32 <HAL_CAN_ActivateNotification>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <CAN_Start+0xb2>
		Error_Handler();
 80022de:	f000 f95d 	bl	800259c <Error_Handler>
	}

	if(HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING | CAN_IT_RX_FIFO1_FULL | CAN_IT_RX_FIFO1_OVERRUN ) != HAL_OK){ // Interrupt activation
 80022e2:	2170      	movs	r1, #112	; 0x70
 80022e4:	4806      	ldr	r0, [pc, #24]	; (8002300 <CAN_Start+0xd0>)
 80022e6:	f001 fe24 	bl	8003f32 <HAL_CAN_ActivateNotification>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <CAN_Start+0xc4>
			Error_Handler();
 80022f0:	f000 f954 	bl	800259c <Error_Handler>
		}
}
 80022f4:	bf00      	nop
 80022f6:	3750      	adds	r7, #80	; 0x50
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	200001d0 	.word	0x200001d0
 8002300:	200001f8 	.word	0x200001f8

08002304 <CAN_Tx>:

void CAN_Tx(CAN_HandleTypeDef* hcan, uint32_t id, uint8_t* data_tx){
 8002304:	b580      	push	{r7, lr}
 8002306:	b08c      	sub	sp, #48	; 0x30
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
	    CAN_TxHeaderTypeDef TxHeader;
		uint32_t Txmailbox = 0x00U;
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]
		TxHeader.DLC=8;
 8002314:	2308      	movs	r3, #8
 8002316:	62bb      	str	r3, [r7, #40]	; 0x28
	    TxHeader.StdId=id; // 11 bits
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	61bb      	str	r3, [r7, #24]
	    TxHeader.IDE=CAN_ID_STD;
 800231c:	2300      	movs	r3, #0
 800231e:	623b      	str	r3, [r7, #32]
	    TxHeader.RTR=CAN_RTR_DATA;
 8002320:	2300      	movs	r3, #0
 8002322:	627b      	str	r3, [r7, #36]	; 0x24

		if(HAL_CAN_GetTxMailboxesFreeLevel(hcan)>0){
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f001 fcad 	bl	8003c84 <HAL_CAN_GetTxMailboxesFreeLevel>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00f      	beq.n	8002350 <CAN_Tx+0x4c>

			ide= TxHeader.StdId;
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	4a09      	ldr	r2, [pc, #36]	; (8002358 <CAN_Tx+0x54>)
 8002334:	6013      	str	r3, [r2, #0]
			if (HAL_CAN_AddTxMessage(hcan, &TxHeader, data_tx, &Txmailbox)!= HAL_OK){
 8002336:	f107 0314 	add.w	r3, r7, #20
 800233a:	f107 0118 	add.w	r1, r7, #24
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f001 fbcf 	bl	8003ae4 <HAL_CAN_AddTxMessage>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <CAN_Tx+0x4c>
				Error_Handler();
 800234c:	f000 f926 	bl	800259c <Error_Handler>
			}
		}


}
 8002350:	bf00      	nop
 8002352:	3730      	adds	r7, #48	; 0x30
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	200004c0 	.word	0x200004c0

0800235c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
//	CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader,RxData);
 8002364:	4b09      	ldr	r3, [pc, #36]	; (800238c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8002366:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8002368:	2100      	movs	r1, #0
 800236a:	480a      	ldr	r0, [pc, #40]	; (8002394 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800236c:	f001 fcbf 	bl	8003cee <HAL_CAN_GetRxMessage>
	if(RxHeader.StdId==0x04 ){
 8002370:	4b07      	ldr	r3, [pc, #28]	; (8002390 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b04      	cmp	r3, #4
 8002376:	d104      	bne.n	8002382 <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
		CAN_transmit();
 8002378:	f000 f810 	bl	800239c <CAN_transmit>
		tim_on=1;
 800237c:	4b06      	ldr	r3, [pc, #24]	; (8002398 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800237e:	2201      	movs	r2, #1
 8002380:	601a      	str	r2, [r3, #0]
	}
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	2000047c 	.word	0x2000047c
 8002390:	200004f8 	.word	0x200004f8
 8002394:	200001d0 	.word	0x200001d0
 8002398:	2000048c 	.word	0x2000048c

0800239c <CAN_transmit>:
void CAN_transmit(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0

	eq_CAN_Tx(&hcan1,0x025, ptl,4);
 80023a0:	2304      	movs	r3, #4
 80023a2:	4a1c      	ldr	r2, [pc, #112]	; (8002414 <CAN_transmit+0x78>)
 80023a4:	2125      	movs	r1, #37	; 0x25
 80023a6:	481c      	ldr	r0, [pc, #112]	; (8002418 <CAN_transmit+0x7c>)
 80023a8:	f000 f844 	bl	8002434 <eq_CAN_Tx>
	eq_CAN_Tx(&hcan1,0x026, ptr,4);
 80023ac:	2304      	movs	r3, #4
 80023ae:	4a1b      	ldr	r2, [pc, #108]	; (800241c <CAN_transmit+0x80>)
 80023b0:	2126      	movs	r1, #38	; 0x26
 80023b2:	4819      	ldr	r0, [pc, #100]	; (8002418 <CAN_transmit+0x7c>)
 80023b4:	f000 f83e 	bl	8002434 <eq_CAN_Tx>
	eq_CAN_Tx(&hcan1,0x027, sens,4);
 80023b8:	2304      	movs	r3, #4
 80023ba:	4a19      	ldr	r2, [pc, #100]	; (8002420 <CAN_transmit+0x84>)
 80023bc:	2127      	movs	r1, #39	; 0x27
 80023be:	4816      	ldr	r0, [pc, #88]	; (8002418 <CAN_transmit+0x7c>)
 80023c0:	f000 f838 	bl	8002434 <eq_CAN_Tx>
	while(1)
	    {
	       if ((hcan1.Instance->TSR & CAN_TSR_TME0) || (hcan1.Instance->TSR & CAN_TSR_TME1) || (hcan1.Instance->TSR & CAN_TSR_TME2))  // checking empty CAN Tx mailboxes for can2 replace hcan1 with hcan2
 80023c4:	4b14      	ldr	r3, [pc, #80]	; (8002418 <CAN_transmit+0x7c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10d      	bne.n	80023ee <CAN_transmit+0x52>
 80023d2:	4b11      	ldr	r3, [pc, #68]	; (8002418 <CAN_transmit+0x7c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d106      	bne.n	80023ee <CAN_transmit+0x52>
 80023e0:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <CAN_transmit+0x7c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0ea      	beq.n	80023c4 <CAN_transmit+0x28>
	       {
	        dq_CAN_Tx();
 80023ee:	f000 f88d 	bl	800250c <dq_CAN_Tx>
	        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 80023f2:	2110      	movs	r1, #16
 80023f4:	480b      	ldr	r0, [pc, #44]	; (8002424 <CAN_transmit+0x88>)
 80023f6:	f002 fac8 	bl	800498a <HAL_GPIO_TogglePin>
	        if (queueHead == queueTail) {
 80023fa:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <CAN_transmit+0x8c>)
 80023fc:	781a      	ldrb	r2, [r3, #0]
 80023fe:	4b0b      	ldr	r3, [pc, #44]	; (800242c <CAN_transmit+0x90>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d000      	beq.n	8002408 <CAN_transmit+0x6c>
	       if ((hcan1.Instance->TSR & CAN_TSR_TME0) || (hcan1.Instance->TSR & CAN_TSR_TME1) || (hcan1.Instance->TSR & CAN_TSR_TME2))  // checking empty CAN Tx mailboxes for can2 replace hcan1 with hcan2
 8002406:	e7dd      	b.n	80023c4 <CAN_transmit+0x28>
	                // Queue is empty, nothing to dequeue
	                break; // once queue empty no need for infinite queue
 8002408:	bf00      	nop
	       }
	    }
	}
	tim_on=0;
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <CAN_transmit+0x94>)
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
//	HAL_TIM_Base_Stop_IT(&htim13);
}
 8002410:	bf00      	nop
 8002412:	bd80      	pop	{r7, pc}
 8002414:	20000498 	.word	0x20000498
 8002418:	200001d0 	.word	0x200001d0
 800241c:	200004a8 	.word	0x200004a8
 8002420:	200004b8 	.word	0x200004b8
 8002424:	40020800 	.word	0x40020800
 8002428:	200000f4 	.word	0x200000f4
 800242c:	200000f5 	.word	0x200000f5
 8002430:	2000048c 	.word	0x2000048c

08002434 <eq_CAN_Tx>:


void eq_CAN_Tx(CAN_HandleTypeDef* hcan, uint32_t id, uint16_t* data,uint8_t len) {
 8002434:	b480      	push	{r7}
 8002436:	b087      	sub	sp, #28
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
 8002440:	70fb      	strb	r3, [r7, #3]
    // Check if queue is full
    if ((queueHead + 1) % 10 == queueTail) {
 8002442:	4b2e      	ldr	r3, [pc, #184]	; (80024fc <eq_CAN_Tx+0xc8>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	1c59      	adds	r1, r3, #1
 8002448:	4b2d      	ldr	r3, [pc, #180]	; (8002500 <eq_CAN_Tx+0xcc>)
 800244a:	fb83 2301 	smull	r2, r3, r3, r1
 800244e:	109a      	asrs	r2, r3, #2
 8002450:	17cb      	asrs	r3, r1, #31
 8002452:	1ad2      	subs	r2, r2, r3
 8002454:	4613      	mov	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	1aca      	subs	r2, r1, r3
 800245e:	4b29      	ldr	r3, [pc, #164]	; (8002504 <eq_CAN_Tx+0xd0>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d044      	beq.n	80024f0 <eq_CAN_Tx+0xbc>
        // Queue is full, discard new message
        return;
    }

    // Enqueue message
    canMessageQueue[queueHead].id = id;
 8002466:	4b25      	ldr	r3, [pc, #148]	; (80024fc <eq_CAN_Tx+0xc8>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	4619      	mov	r1, r3
 800246c:	4a26      	ldr	r2, [pc, #152]	; (8002508 <eq_CAN_Tx+0xd4>)
 800246e:	460b      	mov	r3, r1
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	440b      	add	r3, r1
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	3304      	adds	r3, #4
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < len; i++) {
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	e014      	b.n	80024ae <eq_CAN_Tx+0x7a>
        canMessageQueue[queueHead].data[i] = data[i];
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	4413      	add	r3, r2
 800248c:	4a1b      	ldr	r2, [pc, #108]	; (80024fc <eq_CAN_Tx+0xc8>)
 800248e:	7812      	ldrb	r2, [r2, #0]
 8002490:	8818      	ldrh	r0, [r3, #0]
 8002492:	491d      	ldr	r1, [pc, #116]	; (8002508 <eq_CAN_Tx+0xd4>)
 8002494:	4613      	mov	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	4413      	add	r3, r2
 80024a0:	3304      	adds	r3, #4
 80024a2:	4602      	mov	r2, r0
 80024a4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (int i = 0; i < len; i++) {
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	3301      	adds	r3, #1
 80024ac:	617b      	str	r3, [r7, #20]
 80024ae:	78fb      	ldrb	r3, [r7, #3]
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	dbe6      	blt.n	8002484 <eq_CAN_Tx+0x50>
    }
    canMessageQueue[queueHead].hcan = hcan;
 80024b6:	4b11      	ldr	r3, [pc, #68]	; (80024fc <eq_CAN_Tx+0xc8>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	4619      	mov	r1, r3
 80024bc:	4a12      	ldr	r2, [pc, #72]	; (8002508 <eq_CAN_Tx+0xd4>)
 80024be:	460b      	mov	r3, r1
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	601a      	str	r2, [r3, #0]
    queueHead = (queueHead + 1) % 10;
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <eq_CAN_Tx+0xc8>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	1c5a      	adds	r2, r3, #1
 80024d2:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <eq_CAN_Tx+0xcc>)
 80024d4:	fb83 1302 	smull	r1, r3, r3, r2
 80024d8:	1099      	asrs	r1, r3, #2
 80024da:	17d3      	asrs	r3, r2, #31
 80024dc:	1ac9      	subs	r1, r1, r3
 80024de:	460b      	mov	r3, r1
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	440b      	add	r3, r1
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	1ad1      	subs	r1, r2, r3
 80024e8:	b2ca      	uxtb	r2, r1
 80024ea:	4b04      	ldr	r3, [pc, #16]	; (80024fc <eq_CAN_Tx+0xc8>)
 80024ec:	701a      	strb	r2, [r3, #0]
 80024ee:	e000      	b.n	80024f2 <eq_CAN_Tx+0xbe>
        return;
 80024f0:	bf00      	nop
}
 80024f2:	371c      	adds	r7, #28
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	200000f4 	.word	0x200000f4
 8002500:	66666667 	.word	0x66666667
 8002504:	200000f5 	.word	0x200000f5
 8002508:	2000002c 	.word	0x2000002c

0800250c <dq_CAN_Tx>:

void dq_CAN_Tx(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
    // Check if queue is empty
    if (queueHead == queueTail) {
 8002512:	4b17      	ldr	r3, [pc, #92]	; (8002570 <dq_CAN_Tx+0x64>)
 8002514:	781a      	ldrb	r2, [r3, #0]
 8002516:	4b17      	ldr	r3, [pc, #92]	; (8002574 <dq_CAN_Tx+0x68>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d024      	beq.n	8002568 <dq_CAN_Tx+0x5c>
        // Queue is empty, nothing to dequeue
        return;
    }

    // Transmit message at the head of the queue
    CanMessage* message = &canMessageQueue[queueTail];
 800251e:	4b15      	ldr	r3, [pc, #84]	; (8002574 <dq_CAN_Tx+0x68>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	461a      	mov	r2, r3
 8002524:	4613      	mov	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4a12      	ldr	r2, [pc, #72]	; (8002578 <dq_CAN_Tx+0x6c>)
 800252e:	4413      	add	r3, r2
 8002530:	607b      	str	r3, [r7, #4]

    CAN_Tx(message -> hcan,message->id,message->data);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6818      	ldr	r0, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6859      	ldr	r1, [r3, #4]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	3308      	adds	r3, #8
 800253e:	461a      	mov	r2, r3
 8002540:	f7ff fee0 	bl	8002304 <CAN_Tx>
    // Update queue tail
    queueTail = (queueTail + 1) % 10;
 8002544:	4b0b      	ldr	r3, [pc, #44]	; (8002574 <dq_CAN_Tx+0x68>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	1c5a      	adds	r2, r3, #1
 800254a:	4b0c      	ldr	r3, [pc, #48]	; (800257c <dq_CAN_Tx+0x70>)
 800254c:	fb83 1302 	smull	r1, r3, r3, r2
 8002550:	1099      	asrs	r1, r3, #2
 8002552:	17d3      	asrs	r3, r2, #31
 8002554:	1ac9      	subs	r1, r1, r3
 8002556:	460b      	mov	r3, r1
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	1ad1      	subs	r1, r2, r3
 8002560:	b2ca      	uxtb	r2, r1
 8002562:	4b04      	ldr	r3, [pc, #16]	; (8002574 <dq_CAN_Tx+0x68>)
 8002564:	701a      	strb	r2, [r3, #0]
 8002566:	e000      	b.n	800256a <dq_CAN_Tx+0x5e>
        return;
 8002568:	bf00      	nop
}
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	200000f4 	.word	0x200000f4
 8002574:	200000f5 	.word	0x200000f5
 8002578:	2000002c 	.word	0x2000002c
 800257c:	66666667 	.word	0x66666667

08002580 <fanpwm>:

void fanpwm(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_IT(&htim5, TIM_CHANNEL_1);
 8002584:	2100      	movs	r1, #0
 8002586:	4804      	ldr	r0, [pc, #16]	; (8002598 <fanpwm+0x18>)
 8002588:	f003 ff0e 	bl	80063a8 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim5, TIM_CHANNEL_2);
 800258c:	2104      	movs	r1, #4
 800258e:	4802      	ldr	r0, [pc, #8]	; (8002598 <fanpwm+0x18>)
 8002590:	f003 ff0a 	bl	80063a8 <HAL_TIM_PWM_Start_IT>
}
 8002594:	bf00      	nop
 8002596:	bd80      	pop	{r7, pc}
 8002598:	200003b0 	.word	0x200003b0

0800259c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025a0:	b672      	cpsid	i
}
 80025a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025a4:	e7fe      	b.n	80025a4 <Error_Handler+0x8>
	...

080025a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	607b      	str	r3, [r7, #4]
 80025b2:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <HAL_MspInit+0x4c>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	4a0f      	ldr	r2, [pc, #60]	; (80025f4 <HAL_MspInit+0x4c>)
 80025b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025bc:	6453      	str	r3, [r2, #68]	; 0x44
 80025be:	4b0d      	ldr	r3, [pc, #52]	; (80025f4 <HAL_MspInit+0x4c>)
 80025c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025c6:	607b      	str	r3, [r7, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	603b      	str	r3, [r7, #0]
 80025ce:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <HAL_MspInit+0x4c>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	4a08      	ldr	r2, [pc, #32]	; (80025f4 <HAL_MspInit+0x4c>)
 80025d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d8:	6413      	str	r3, [r2, #64]	; 0x40
 80025da:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <HAL_MspInit+0x4c>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e2:	603b      	str	r3, [r7, #0]
 80025e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	40023800 	.word	0x40023800

080025f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08e      	sub	sp, #56	; 0x38
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a52      	ldr	r2, [pc, #328]	; (8002760 <HAL_ADC_MspInit+0x168>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d128      	bne.n	800266c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	623b      	str	r3, [r7, #32]
 800261e:	4b51      	ldr	r3, [pc, #324]	; (8002764 <HAL_ADC_MspInit+0x16c>)
 8002620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002622:	4a50      	ldr	r2, [pc, #320]	; (8002764 <HAL_ADC_MspInit+0x16c>)
 8002624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002628:	6453      	str	r3, [r2, #68]	; 0x44
 800262a:	4b4e      	ldr	r3, [pc, #312]	; (8002764 <HAL_ADC_MspInit+0x16c>)
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002632:	623b      	str	r3, [r7, #32]
 8002634:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	61fb      	str	r3, [r7, #28]
 800263a:	4b4a      	ldr	r3, [pc, #296]	; (8002764 <HAL_ADC_MspInit+0x16c>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	4a49      	ldr	r2, [pc, #292]	; (8002764 <HAL_ADC_MspInit+0x16c>)
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	6313      	str	r3, [r2, #48]	; 0x30
 8002646:	4b47      	ldr	r3, [pc, #284]	; (8002764 <HAL_ADC_MspInit+0x16c>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	61fb      	str	r3, [r7, #28]
 8002650:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002652:	2320      	movs	r3, #32
 8002654:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002656:	2303      	movs	r3, #3
 8002658:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002662:	4619      	mov	r1, r3
 8002664:	4840      	ldr	r0, [pc, #256]	; (8002768 <HAL_ADC_MspInit+0x170>)
 8002666:	f001 ffcb 	bl	8004600 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800266a:	e075      	b.n	8002758 <HAL_ADC_MspInit+0x160>
  else if(hadc->Instance==ADC2)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a3e      	ldr	r2, [pc, #248]	; (800276c <HAL_ADC_MspInit+0x174>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d142      	bne.n	80026fc <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	61bb      	str	r3, [r7, #24]
 800267a:	4b3a      	ldr	r3, [pc, #232]	; (8002764 <HAL_ADC_MspInit+0x16c>)
 800267c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267e:	4a39      	ldr	r2, [pc, #228]	; (8002764 <HAL_ADC_MspInit+0x16c>)
 8002680:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002684:	6453      	str	r3, [r2, #68]	; 0x44
 8002686:	4b37      	ldr	r3, [pc, #220]	; (8002764 <HAL_ADC_MspInit+0x16c>)
 8002688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800268e:	61bb      	str	r3, [r7, #24]
 8002690:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	4b33      	ldr	r3, [pc, #204]	; (8002764 <HAL_ADC_MspInit+0x16c>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	4a32      	ldr	r2, [pc, #200]	; (8002764 <HAL_ADC_MspInit+0x16c>)
 800269c:	f043 0304 	orr.w	r3, r3, #4
 80026a0:	6313      	str	r3, [r2, #48]	; 0x30
 80026a2:	4b30      	ldr	r3, [pc, #192]	; (8002764 <HAL_ADC_MspInit+0x16c>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	4b2c      	ldr	r3, [pc, #176]	; (8002764 <HAL_ADC_MspInit+0x16c>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	4a2b      	ldr	r2, [pc, #172]	; (8002764 <HAL_ADC_MspInit+0x16c>)
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	6313      	str	r3, [r2, #48]	; 0x30
 80026be:	4b29      	ldr	r3, [pc, #164]	; (8002764 <HAL_ADC_MspInit+0x16c>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	613b      	str	r3, [r7, #16]
 80026c8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Damper1_Pin|Damper2_Pin;
 80026ca:	230c      	movs	r3, #12
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026ce:	2303      	movs	r3, #3
 80026d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d2:	2300      	movs	r3, #0
 80026d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026da:	4619      	mov	r1, r3
 80026dc:	4824      	ldr	r0, [pc, #144]	; (8002770 <HAL_ADC_MspInit+0x178>)
 80026de:	f001 ff8f 	bl	8004600 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LV_Batt_Pin;
 80026e2:	2304      	movs	r3, #4
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026e6:	2303      	movs	r3, #3
 80026e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LV_Batt_GPIO_Port, &GPIO_InitStruct);
 80026ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f2:	4619      	mov	r1, r3
 80026f4:	481c      	ldr	r0, [pc, #112]	; (8002768 <HAL_ADC_MspInit+0x170>)
 80026f6:	f001 ff83 	bl	8004600 <HAL_GPIO_Init>
}
 80026fa:	e02d      	b.n	8002758 <HAL_ADC_MspInit+0x160>
  else if(hadc->Instance==ADC3)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a1c      	ldr	r2, [pc, #112]	; (8002774 <HAL_ADC_MspInit+0x17c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d128      	bne.n	8002758 <HAL_ADC_MspInit+0x160>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	4b16      	ldr	r3, [pc, #88]	; (8002764 <HAL_ADC_MspInit+0x16c>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	4a15      	ldr	r2, [pc, #84]	; (8002764 <HAL_ADC_MspInit+0x16c>)
 8002710:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002714:	6453      	str	r3, [r2, #68]	; 0x44
 8002716:	4b13      	ldr	r3, [pc, #76]	; (8002764 <HAL_ADC_MspInit+0x16c>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	4b0f      	ldr	r3, [pc, #60]	; (8002764 <HAL_ADC_MspInit+0x16c>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	4a0e      	ldr	r2, [pc, #56]	; (8002764 <HAL_ADC_MspInit+0x16c>)
 800272c:	f043 0320 	orr.w	r3, r3, #32
 8002730:	6313      	str	r3, [r2, #48]	; 0x30
 8002732:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <HAL_ADC_MspInit+0x16c>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	f003 0320 	and.w	r3, r3, #32
 800273a:	60bb      	str	r3, [r7, #8]
 800273c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Motor1_Pin|Motor2_Pin|IR_OUT_Pin;
 800273e:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002744:	2303      	movs	r3, #3
 8002746:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800274c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002750:	4619      	mov	r1, r3
 8002752:	4809      	ldr	r0, [pc, #36]	; (8002778 <HAL_ADC_MspInit+0x180>)
 8002754:	f001 ff54 	bl	8004600 <HAL_GPIO_Init>
}
 8002758:	bf00      	nop
 800275a:	3738      	adds	r7, #56	; 0x38
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40012000 	.word	0x40012000
 8002764:	40023800 	.word	0x40023800
 8002768:	40020000 	.word	0x40020000
 800276c:	40012100 	.word	0x40012100
 8002770:	40020800 	.word	0x40020800
 8002774:	40012200 	.word	0x40012200
 8002778:	40021400 	.word	0x40021400

0800277c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08c      	sub	sp, #48	; 0x30
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002784:	f107 031c 	add.w	r3, r7, #28
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	60da      	str	r2, [r3, #12]
 8002792:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a52      	ldr	r2, [pc, #328]	; (80028e4 <HAL_CAN_MspInit+0x168>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d145      	bne.n	800282a <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800279e:	4b52      	ldr	r3, [pc, #328]	; (80028e8 <HAL_CAN_MspInit+0x16c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	3301      	adds	r3, #1
 80027a4:	4a50      	ldr	r2, [pc, #320]	; (80028e8 <HAL_CAN_MspInit+0x16c>)
 80027a6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80027a8:	4b4f      	ldr	r3, [pc, #316]	; (80028e8 <HAL_CAN_MspInit+0x16c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d10d      	bne.n	80027cc <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80027b0:	2300      	movs	r3, #0
 80027b2:	61bb      	str	r3, [r7, #24]
 80027b4:	4b4d      	ldr	r3, [pc, #308]	; (80028ec <HAL_CAN_MspInit+0x170>)
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	4a4c      	ldr	r2, [pc, #304]	; (80028ec <HAL_CAN_MspInit+0x170>)
 80027ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027be:	6413      	str	r3, [r2, #64]	; 0x40
 80027c0:	4b4a      	ldr	r3, [pc, #296]	; (80028ec <HAL_CAN_MspInit+0x170>)
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c8:	61bb      	str	r3, [r7, #24]
 80027ca:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027cc:	2300      	movs	r3, #0
 80027ce:	617b      	str	r3, [r7, #20]
 80027d0:	4b46      	ldr	r3, [pc, #280]	; (80028ec <HAL_CAN_MspInit+0x170>)
 80027d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d4:	4a45      	ldr	r2, [pc, #276]	; (80028ec <HAL_CAN_MspInit+0x170>)
 80027d6:	f043 0308 	orr.w	r3, r3, #8
 80027da:	6313      	str	r3, [r2, #48]	; 0x30
 80027dc:	4b43      	ldr	r3, [pc, #268]	; (80028ec <HAL_CAN_MspInit+0x170>)
 80027de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e0:	f003 0308 	and.w	r3, r3, #8
 80027e4:	617b      	str	r3, [r7, #20]
 80027e6:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80027e8:	2303      	movs	r3, #3
 80027ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ec:	2302      	movs	r3, #2
 80027ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f4:	2303      	movs	r3, #3
 80027f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80027f8:	2309      	movs	r3, #9
 80027fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027fc:	f107 031c 	add.w	r3, r7, #28
 8002800:	4619      	mov	r1, r3
 8002802:	483b      	ldr	r0, [pc, #236]	; (80028f0 <HAL_CAN_MspInit+0x174>)
 8002804:	f001 fefc 	bl	8004600 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002808:	2200      	movs	r2, #0
 800280a:	2100      	movs	r1, #0
 800280c:	2014      	movs	r0, #20
 800280e:	f001 fec0 	bl	8004592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002812:	2014      	movs	r0, #20
 8002814:	f001 fed9 	bl	80045ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8002818:	2200      	movs	r2, #0
 800281a:	2100      	movs	r1, #0
 800281c:	2015      	movs	r0, #21
 800281e:	f001 feb8 	bl	8004592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002822:	2015      	movs	r0, #21
 8002824:	f001 fed1 	bl	80045ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8002828:	e058      	b.n	80028dc <HAL_CAN_MspInit+0x160>
  else if(hcan->Instance==CAN2)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a31      	ldr	r2, [pc, #196]	; (80028f4 <HAL_CAN_MspInit+0x178>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d153      	bne.n	80028dc <HAL_CAN_MspInit+0x160>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002834:	2300      	movs	r3, #0
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	4b2c      	ldr	r3, [pc, #176]	; (80028ec <HAL_CAN_MspInit+0x170>)
 800283a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283c:	4a2b      	ldr	r2, [pc, #172]	; (80028ec <HAL_CAN_MspInit+0x170>)
 800283e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002842:	6413      	str	r3, [r2, #64]	; 0x40
 8002844:	4b29      	ldr	r3, [pc, #164]	; (80028ec <HAL_CAN_MspInit+0x170>)
 8002846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002848:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002850:	4b25      	ldr	r3, [pc, #148]	; (80028e8 <HAL_CAN_MspInit+0x16c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	3301      	adds	r3, #1
 8002856:	4a24      	ldr	r2, [pc, #144]	; (80028e8 <HAL_CAN_MspInit+0x16c>)
 8002858:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800285a:	4b23      	ldr	r3, [pc, #140]	; (80028e8 <HAL_CAN_MspInit+0x16c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d10d      	bne.n	800287e <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	4b21      	ldr	r3, [pc, #132]	; (80028ec <HAL_CAN_MspInit+0x170>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	4a20      	ldr	r2, [pc, #128]	; (80028ec <HAL_CAN_MspInit+0x170>)
 800286c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002870:	6413      	str	r3, [r2, #64]	; 0x40
 8002872:	4b1e      	ldr	r3, [pc, #120]	; (80028ec <HAL_CAN_MspInit+0x170>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	4b1a      	ldr	r3, [pc, #104]	; (80028ec <HAL_CAN_MspInit+0x170>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	4a19      	ldr	r2, [pc, #100]	; (80028ec <HAL_CAN_MspInit+0x170>)
 8002888:	f043 0302 	orr.w	r3, r3, #2
 800288c:	6313      	str	r3, [r2, #48]	; 0x30
 800288e:	4b17      	ldr	r3, [pc, #92]	; (80028ec <HAL_CAN_MspInit+0x170>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	60bb      	str	r3, [r7, #8]
 8002898:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800289a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800289e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a0:	2302      	movs	r3, #2
 80028a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a8:	2303      	movs	r3, #3
 80028aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80028ac:	2309      	movs	r3, #9
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b0:	f107 031c 	add.w	r3, r7, #28
 80028b4:	4619      	mov	r1, r3
 80028b6:	4810      	ldr	r0, [pc, #64]	; (80028f8 <HAL_CAN_MspInit+0x17c>)
 80028b8:	f001 fea2 	bl	8004600 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80028bc:	2200      	movs	r2, #0
 80028be:	2100      	movs	r1, #0
 80028c0:	2040      	movs	r0, #64	; 0x40
 80028c2:	f001 fe66 	bl	8004592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80028c6:	2040      	movs	r0, #64	; 0x40
 80028c8:	f001 fe7f 	bl	80045ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 80028cc:	2200      	movs	r2, #0
 80028ce:	2100      	movs	r1, #0
 80028d0:	2041      	movs	r0, #65	; 0x41
 80028d2:	f001 fe5e 	bl	8004592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80028d6:	2041      	movs	r0, #65	; 0x41
 80028d8:	f001 fe77 	bl	80045ca <HAL_NVIC_EnableIRQ>
}
 80028dc:	bf00      	nop
 80028de:	3730      	adds	r7, #48	; 0x30
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40006400 	.word	0x40006400
 80028e8:	20000514 	.word	0x20000514
 80028ec:	40023800 	.word	0x40023800
 80028f0:	40020c00 	.word	0x40020c00
 80028f4:	40006800 	.word	0x40006800
 80028f8:	40020400 	.word	0x40020400

080028fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08c      	sub	sp, #48	; 0x30
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002904:	f107 031c 	add.w	r3, r7, #28
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	60da      	str	r2, [r3, #12]
 8002912:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a32      	ldr	r2, [pc, #200]	; (80029e4 <HAL_I2C_MspInit+0xe8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d12c      	bne.n	8002978 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	61bb      	str	r3, [r7, #24]
 8002922:	4b31      	ldr	r3, [pc, #196]	; (80029e8 <HAL_I2C_MspInit+0xec>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	4a30      	ldr	r2, [pc, #192]	; (80029e8 <HAL_I2C_MspInit+0xec>)
 8002928:	f043 0302 	orr.w	r3, r3, #2
 800292c:	6313      	str	r3, [r2, #48]	; 0x30
 800292e:	4b2e      	ldr	r3, [pc, #184]	; (80029e8 <HAL_I2C_MspInit+0xec>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	61bb      	str	r3, [r7, #24]
 8002938:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TP2_SCL_Pin|TP2_SDA_Pin;
 800293a:	23c0      	movs	r3, #192	; 0xc0
 800293c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800293e:	2312      	movs	r3, #18
 8002940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002942:	2300      	movs	r3, #0
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002946:	2303      	movs	r3, #3
 8002948:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800294a:	2304      	movs	r3, #4
 800294c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800294e:	f107 031c 	add.w	r3, r7, #28
 8002952:	4619      	mov	r1, r3
 8002954:	4825      	ldr	r0, [pc, #148]	; (80029ec <HAL_I2C_MspInit+0xf0>)
 8002956:	f001 fe53 	bl	8004600 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	4b22      	ldr	r3, [pc, #136]	; (80029e8 <HAL_I2C_MspInit+0xec>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	4a21      	ldr	r2, [pc, #132]	; (80029e8 <HAL_I2C_MspInit+0xec>)
 8002964:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002968:	6413      	str	r3, [r2, #64]	; 0x40
 800296a:	4b1f      	ldr	r3, [pc, #124]	; (80029e8 <HAL_I2C_MspInit+0xec>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002972:	617b      	str	r3, [r7, #20]
 8002974:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002976:	e030      	b.n	80029da <HAL_I2C_MspInit+0xde>
  else if(hi2c->Instance==I2C2)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a1c      	ldr	r2, [pc, #112]	; (80029f0 <HAL_I2C_MspInit+0xf4>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d12b      	bne.n	80029da <HAL_I2C_MspInit+0xde>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	613b      	str	r3, [r7, #16]
 8002986:	4b18      	ldr	r3, [pc, #96]	; (80029e8 <HAL_I2C_MspInit+0xec>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	4a17      	ldr	r2, [pc, #92]	; (80029e8 <HAL_I2C_MspInit+0xec>)
 800298c:	f043 0320 	orr.w	r3, r3, #32
 8002990:	6313      	str	r3, [r2, #48]	; 0x30
 8002992:	4b15      	ldr	r3, [pc, #84]	; (80029e8 <HAL_I2C_MspInit+0xec>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	f003 0320 	and.w	r3, r3, #32
 800299a:	613b      	str	r3, [r7, #16]
 800299c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800299e:	2303      	movs	r3, #3
 80029a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029a2:	2312      	movs	r3, #18
 80029a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029aa:	2303      	movs	r3, #3
 80029ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80029ae:	2304      	movs	r3, #4
 80029b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029b2:	f107 031c 	add.w	r3, r7, #28
 80029b6:	4619      	mov	r1, r3
 80029b8:	480e      	ldr	r0, [pc, #56]	; (80029f4 <HAL_I2C_MspInit+0xf8>)
 80029ba:	f001 fe21 	bl	8004600 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <HAL_I2C_MspInit+0xec>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	4a08      	ldr	r2, [pc, #32]	; (80029e8 <HAL_I2C_MspInit+0xec>)
 80029c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029cc:	6413      	str	r3, [r2, #64]	; 0x40
 80029ce:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <HAL_I2C_MspInit+0xec>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]
}
 80029da:	bf00      	nop
 80029dc:	3730      	adds	r7, #48	; 0x30
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40005400 	.word	0x40005400
 80029e8:	40023800 	.word	0x40023800
 80029ec:	40020400 	.word	0x40020400
 80029f0:	40005800 	.word	0x40005800
 80029f4:	40021400 	.word	0x40021400

080029f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08a      	sub	sp, #40	; 0x28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a00:	f107 0314 	add.w	r3, r7, #20
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	605a      	str	r2, [r3, #4]
 8002a0a:	609a      	str	r2, [r3, #8]
 8002a0c:	60da      	str	r2, [r3, #12]
 8002a0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a19      	ldr	r2, [pc, #100]	; (8002a7c <HAL_SPI_MspInit+0x84>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d12c      	bne.n	8002a74 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	613b      	str	r3, [r7, #16]
 8002a1e:	4b18      	ldr	r3, [pc, #96]	; (8002a80 <HAL_SPI_MspInit+0x88>)
 8002a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a22:	4a17      	ldr	r2, [pc, #92]	; (8002a80 <HAL_SPI_MspInit+0x88>)
 8002a24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a28:	6453      	str	r3, [r2, #68]	; 0x44
 8002a2a:	4b15      	ldr	r3, [pc, #84]	; (8002a80 <HAL_SPI_MspInit+0x88>)
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a32:	613b      	str	r3, [r7, #16]
 8002a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	4b11      	ldr	r3, [pc, #68]	; (8002a80 <HAL_SPI_MspInit+0x88>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	4a10      	ldr	r2, [pc, #64]	; (8002a80 <HAL_SPI_MspInit+0x88>)
 8002a40:	f043 0310 	orr.w	r3, r3, #16
 8002a44:	6313      	str	r3, [r2, #48]	; 0x30
 8002a46:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <HAL_SPI_MspInit+0x88>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	f003 0310 	and.w	r3, r3, #16
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002a52:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a60:	2303      	movs	r3, #3
 8002a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002a64:	2305      	movs	r3, #5
 8002a66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a68:	f107 0314 	add.w	r3, r7, #20
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4805      	ldr	r0, [pc, #20]	; (8002a84 <HAL_SPI_MspInit+0x8c>)
 8002a70:	f001 fdc6 	bl	8004600 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002a74:	bf00      	nop
 8002a76:	3728      	adds	r7, #40	; 0x28
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40013400 	.word	0x40013400
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40021000 	.word	0x40021000

08002a88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a3c      	ldr	r2, [pc, #240]	; (8002b88 <HAL_TIM_Base_MspInit+0x100>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d12e      	bne.n	8002af8 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
 8002a9e:	4b3b      	ldr	r3, [pc, #236]	; (8002b8c <HAL_TIM_Base_MspInit+0x104>)
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa2:	4a3a      	ldr	r2, [pc, #232]	; (8002b8c <HAL_TIM_Base_MspInit+0x104>)
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aaa:	4b38      	ldr	r3, [pc, #224]	; (8002b8c <HAL_TIM_Base_MspInit+0x104>)
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 2, 0);
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2102      	movs	r1, #2
 8002aba:	2018      	movs	r0, #24
 8002abc:	f001 fd69 	bl	8004592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002ac0:	2018      	movs	r0, #24
 8002ac2:	f001 fd82 	bl	80045ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2102      	movs	r1, #2
 8002aca:	2019      	movs	r0, #25
 8002acc:	f001 fd61 	bl	8004592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002ad0:	2019      	movs	r0, #25
 8002ad2:	f001 fd7a 	bl	80045ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 2, 0);
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2102      	movs	r1, #2
 8002ada:	201a      	movs	r0, #26
 8002adc:	f001 fd59 	bl	8004592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002ae0:	201a      	movs	r0, #26
 8002ae2:	f001 fd72 	bl	80045ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 2, 0);
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	2102      	movs	r1, #2
 8002aea:	201b      	movs	r0, #27
 8002aec:	f001 fd51 	bl	8004592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002af0:	201b      	movs	r0, #27
 8002af2:	f001 fd6a 	bl	80045ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8002af6:	e042      	b.n	8002b7e <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM2)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b00:	d10e      	bne.n	8002b20 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	4b21      	ldr	r3, [pc, #132]	; (8002b8c <HAL_TIM_Base_MspInit+0x104>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	4a20      	ldr	r2, [pc, #128]	; (8002b8c <HAL_TIM_Base_MspInit+0x104>)
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	6413      	str	r3, [r2, #64]	; 0x40
 8002b12:	4b1e      	ldr	r3, [pc, #120]	; (8002b8c <HAL_TIM_Base_MspInit+0x104>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	693b      	ldr	r3, [r7, #16]
}
 8002b1e:	e02e      	b.n	8002b7e <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM5)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a1a      	ldr	r2, [pc, #104]	; (8002b90 <HAL_TIM_Base_MspInit+0x108>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d10e      	bne.n	8002b48 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	4b17      	ldr	r3, [pc, #92]	; (8002b8c <HAL_TIM_Base_MspInit+0x104>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	4a16      	ldr	r2, [pc, #88]	; (8002b8c <HAL_TIM_Base_MspInit+0x104>)
 8002b34:	f043 0308 	orr.w	r3, r3, #8
 8002b38:	6413      	str	r3, [r2, #64]	; 0x40
 8002b3a:	4b14      	ldr	r3, [pc, #80]	; (8002b8c <HAL_TIM_Base_MspInit+0x104>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]
}
 8002b46:	e01a      	b.n	8002b7e <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM13)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a11      	ldr	r2, [pc, #68]	; (8002b94 <HAL_TIM_Base_MspInit+0x10c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d115      	bne.n	8002b7e <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	60bb      	str	r3, [r7, #8]
 8002b56:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <HAL_TIM_Base_MspInit+0x104>)
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	4a0c      	ldr	r2, [pc, #48]	; (8002b8c <HAL_TIM_Base_MspInit+0x104>)
 8002b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b60:	6413      	str	r3, [r2, #64]	; 0x40
 8002b62:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <HAL_TIM_Base_MspInit+0x104>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6a:	60bb      	str	r3, [r7, #8]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2101      	movs	r1, #1
 8002b72:	202c      	movs	r0, #44	; 0x2c
 8002b74:	f001 fd0d 	bl	8004592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002b78:	202c      	movs	r0, #44	; 0x2c
 8002b7a:	f001 fd26 	bl	80045ca <HAL_NVIC_EnableIRQ>
}
 8002b7e:	bf00      	nop
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40010000 	.word	0x40010000
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	40000c00 	.word	0x40000c00
 8002b94:	40001c00 	.word	0x40001c00

08002b98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba0:	f107 030c 	add.w	r3, r7, #12
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	605a      	str	r2, [r3, #4]
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	60da      	str	r2, [r3, #12]
 8002bae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a12      	ldr	r2, [pc, #72]	; (8002c00 <HAL_TIM_MspPostInit+0x68>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d11d      	bne.n	8002bf6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <HAL_TIM_MspPostInit+0x6c>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	4a10      	ldr	r2, [pc, #64]	; (8002c04 <HAL_TIM_MspPostInit+0x6c>)
 8002bc4:	f043 0301 	orr.w	r3, r3, #1
 8002bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bca:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <HAL_TIM_MspPostInit+0x6c>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	60bb      	str	r3, [r7, #8]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0/WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be2:	2300      	movs	r3, #0
 8002be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002be6:	2302      	movs	r3, #2
 8002be8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bea:	f107 030c 	add.w	r3, r7, #12
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4805      	ldr	r0, [pc, #20]	; (8002c08 <HAL_TIM_MspPostInit+0x70>)
 8002bf2:	f001 fd05 	bl	8004600 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002bf6:	bf00      	nop
 8002bf8:	3720      	adds	r7, #32
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40000c00 	.word	0x40000c00
 8002c04:	40023800 	.word	0x40023800
 8002c08:	40020000 	.word	0x40020000

08002c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c10:	e7fe      	b.n	8002c10 <NMI_Handler+0x4>

08002c12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c12:	b480      	push	{r7}
 8002c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c16:	e7fe      	b.n	8002c16 <HardFault_Handler+0x4>

08002c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c1c:	e7fe      	b.n	8002c1c <MemManage_Handler+0x4>

08002c1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c22:	e7fe      	b.n	8002c22 <BusFault_Handler+0x4>

08002c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c28:	e7fe      	b.n	8002c28 <UsageFault_Handler+0x4>

08002c2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c3c:	bf00      	nop
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c46:	b480      	push	{r7}
 8002c48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c4a:	bf00      	nop
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c58:	f000 f8f4 	bl	8002e44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c5c:	bf00      	nop
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002c64:	4802      	ldr	r0, [pc, #8]	; (8002c70 <CAN1_RX0_IRQHandler+0x10>)
 8002c66:	f001 f98a 	bl	8003f7e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	200001d0 	.word	0x200001d0

08002c74 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002c78:	4802      	ldr	r0, [pc, #8]	; (8002c84 <CAN1_RX1_IRQHandler+0x10>)
 8002c7a:	f001 f980 	bl	8003f7e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	200001d0 	.word	0x200001d0

08002c88 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FR1_Pin);
 8002c8c:	2040      	movs	r0, #64	; 0x40
 8002c8e:	f001 fe97 	bl	80049c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(FR2_Pin);
 8002c92:	2080      	movs	r0, #128	; 0x80
 8002c94:	f001 fe94 	bl	80049c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002c98:	bf00      	nop
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ca0:	4802      	ldr	r0, [pc, #8]	; (8002cac <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002ca2:	f003 fcf1 	bl	8006688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000320 	.word	0x20000320

08002cb0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002cb4:	4802      	ldr	r0, [pc, #8]	; (8002cc0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002cb6:	f003 fce7 	bl	8006688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20000320 	.word	0x20000320

08002cc4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002cc8:	4802      	ldr	r0, [pc, #8]	; (8002cd4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002cca:	f003 fcdd 	bl	8006688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20000320 	.word	0x20000320

08002cd8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002cdc:	4802      	ldr	r0, [pc, #8]	; (8002ce8 <TIM1_CC_IRQHandler+0x10>)
 8002cde:	f003 fcd3 	bl	8006688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20000320 	.word	0x20000320

08002cec <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002cf0:	4802      	ldr	r0, [pc, #8]	; (8002cfc <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002cf2:	f003 fcc9 	bl	8006688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	200003f8 	.word	0x200003f8

08002d00 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002d04:	4802      	ldr	r0, [pc, #8]	; (8002d10 <CAN2_RX0_IRQHandler+0x10>)
 8002d06:	f001 f93a 	bl	8003f7e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002d0a:	bf00      	nop
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	200001f8 	.word	0x200001f8

08002d14 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002d18:	4802      	ldr	r0, [pc, #8]	; (8002d24 <CAN2_RX1_IRQHandler+0x10>)
 8002d1a:	f001 f930 	bl	8003f7e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8002d1e:	bf00      	nop
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	200001f8 	.word	0x200001f8

08002d28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d2c:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <SystemInit+0x20>)
 8002d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d32:	4a05      	ldr	r2, [pc, #20]	; (8002d48 <SystemInit+0x20>)
 8002d34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d3c:	bf00      	nop
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	e000ed00 	.word	0xe000ed00

08002d4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002d4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d50:	f7ff ffea 	bl	8002d28 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d54:	480c      	ldr	r0, [pc, #48]	; (8002d88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d56:	490d      	ldr	r1, [pc, #52]	; (8002d8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d58:	4a0d      	ldr	r2, [pc, #52]	; (8002d90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d5c:	e002      	b.n	8002d64 <LoopCopyDataInit>

08002d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d62:	3304      	adds	r3, #4

08002d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d68:	d3f9      	bcc.n	8002d5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d6a:	4a0a      	ldr	r2, [pc, #40]	; (8002d94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d6c:	4c0a      	ldr	r4, [pc, #40]	; (8002d98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d70:	e001      	b.n	8002d76 <LoopFillZerobss>

08002d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d74:	3204      	adds	r2, #4

08002d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d78:	d3fb      	bcc.n	8002d72 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002d7a:	f004 fc5b 	bl	8007634 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d7e:	f7fd ffd3 	bl	8000d28 <main>
  bx  lr    
 8002d82:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002d84:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d8c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002d90:	080076bc 	.word	0x080076bc
  ldr r2, =_sbss
 8002d94:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002d98:	2000051c 	.word	0x2000051c

08002d9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d9c:	e7fe      	b.n	8002d9c <ADC_IRQHandler>
	...

08002da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002da4:	4b0e      	ldr	r3, [pc, #56]	; (8002de0 <HAL_Init+0x40>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a0d      	ldr	r2, [pc, #52]	; (8002de0 <HAL_Init+0x40>)
 8002daa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002db0:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <HAL_Init+0x40>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a0a      	ldr	r2, [pc, #40]	; (8002de0 <HAL_Init+0x40>)
 8002db6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dbc:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <HAL_Init+0x40>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a07      	ldr	r2, [pc, #28]	; (8002de0 <HAL_Init+0x40>)
 8002dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dc8:	2003      	movs	r0, #3
 8002dca:	f001 fbd7 	bl	800457c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dce:	2000      	movs	r0, #0
 8002dd0:	f000 f808 	bl	8002de4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dd4:	f7ff fbe8 	bl	80025a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40023c00 	.word	0x40023c00

08002de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dec:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <HAL_InitTick+0x54>)
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	4b12      	ldr	r3, [pc, #72]	; (8002e3c <HAL_InitTick+0x58>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	4619      	mov	r1, r3
 8002df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e02:	4618      	mov	r0, r3
 8002e04:	f001 fbef 	bl	80045e6 <HAL_SYSTICK_Config>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e00e      	b.n	8002e30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b0f      	cmp	r3, #15
 8002e16:	d80a      	bhi.n	8002e2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e18:	2200      	movs	r2, #0
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e20:	f001 fbb7 	bl	8004592 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e24:	4a06      	ldr	r2, [pc, #24]	; (8002e40 <HAL_InitTick+0x5c>)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	e000      	b.n	8002e30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	20000004 	.word	0x20000004
 8002e3c:	2000000c 	.word	0x2000000c
 8002e40:	20000008 	.word	0x20000008

08002e44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e48:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <HAL_IncTick+0x20>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <HAL_IncTick+0x24>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4413      	add	r3, r2
 8002e54:	4a04      	ldr	r2, [pc, #16]	; (8002e68 <HAL_IncTick+0x24>)
 8002e56:	6013      	str	r3, [r2, #0]
}
 8002e58:	bf00      	nop
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	2000000c 	.word	0x2000000c
 8002e68:	20000518 	.word	0x20000518

08002e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e70:	4b03      	ldr	r3, [pc, #12]	; (8002e80 <HAL_GetTick+0x14>)
 8002e72:	681b      	ldr	r3, [r3, #0]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	20000518 	.word	0x20000518

08002e84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e033      	b.n	8002f02 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d109      	bne.n	8002eb6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7ff fba8 	bl	80025f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	f003 0310 	and.w	r3, r3, #16
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d118      	bne.n	8002ef4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002eca:	f023 0302 	bic.w	r3, r3, #2
 8002ece:	f043 0202 	orr.w	r2, r3, #2
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 fae8 	bl	80034ac <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	f023 0303 	bic.w	r3, r3, #3
 8002eea:	f043 0201 	orr.w	r2, r3, #1
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	641a      	str	r2, [r3, #64]	; 0x40
 8002ef2:	e001      	b.n	8002ef8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
	...

08002f0c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d101      	bne.n	8002f26 <HAL_ADC_Start+0x1a>
 8002f22:	2302      	movs	r3, #2
 8002f24:	e0b2      	b.n	800308c <HAL_ADC_Start+0x180>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d018      	beq.n	8002f6e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f4c:	4b52      	ldr	r3, [pc, #328]	; (8003098 <HAL_ADC_Start+0x18c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a52      	ldr	r2, [pc, #328]	; (800309c <HAL_ADC_Start+0x190>)
 8002f52:	fba2 2303 	umull	r2, r3, r2, r3
 8002f56:	0c9a      	lsrs	r2, r3, #18
 8002f58:	4613      	mov	r3, r2
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4413      	add	r3, r2
 8002f5e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002f60:	e002      	b.n	8002f68 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	3b01      	subs	r3, #1
 8002f66:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f9      	bne.n	8002f62 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d17a      	bne.n	8003072 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f84:	f023 0301 	bic.w	r3, r3, #1
 8002f88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d007      	beq.n	8002fae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fa6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fba:	d106      	bne.n	8002fca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc0:	f023 0206 	bic.w	r2, r3, #6
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	645a      	str	r2, [r3, #68]	; 0x44
 8002fc8:	e002      	b.n	8002fd0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fd8:	4b31      	ldr	r3, [pc, #196]	; (80030a0 <HAL_ADC_Start+0x194>)
 8002fda:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002fe4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f003 031f 	and.w	r3, r3, #31
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d12a      	bne.n	8003048 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a2b      	ldr	r2, [pc, #172]	; (80030a4 <HAL_ADC_Start+0x198>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d015      	beq.n	8003028 <HAL_ADC_Start+0x11c>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a29      	ldr	r2, [pc, #164]	; (80030a8 <HAL_ADC_Start+0x19c>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d105      	bne.n	8003012 <HAL_ADC_Start+0x106>
 8003006:	4b26      	ldr	r3, [pc, #152]	; (80030a0 <HAL_ADC_Start+0x194>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f003 031f 	and.w	r3, r3, #31
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00a      	beq.n	8003028 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a25      	ldr	r2, [pc, #148]	; (80030ac <HAL_ADC_Start+0x1a0>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d136      	bne.n	800308a <HAL_ADC_Start+0x17e>
 800301c:	4b20      	ldr	r3, [pc, #128]	; (80030a0 <HAL_ADC_Start+0x194>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 0310 	and.w	r3, r3, #16
 8003024:	2b00      	cmp	r3, #0
 8003026:	d130      	bne.n	800308a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d129      	bne.n	800308a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003044:	609a      	str	r2, [r3, #8]
 8003046:	e020      	b.n	800308a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a15      	ldr	r2, [pc, #84]	; (80030a4 <HAL_ADC_Start+0x198>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d11b      	bne.n	800308a <HAL_ADC_Start+0x17e>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d114      	bne.n	800308a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	e00b      	b.n	800308a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f043 0210 	orr.w	r2, r3, #16
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003082:	f043 0201 	orr.w	r2, r3, #1
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	20000004 	.word	0x20000004
 800309c:	431bde83 	.word	0x431bde83
 80030a0:	40012300 	.word	0x40012300
 80030a4:	40012000 	.word	0x40012000
 80030a8:	40012100 	.word	0x40012100
 80030ac:	40012200 	.word	0x40012200

080030b0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d101      	bne.n	80030c6 <HAL_ADC_Stop+0x16>
 80030c2:	2302      	movs	r3, #2
 80030c4:	e021      	b.n	800310a <HAL_ADC_Stop+0x5a>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0201 	bic.w	r2, r2, #1
 80030dc:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d109      	bne.n	8003100 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030f4:	f023 0301 	bic.w	r3, r3, #1
 80030f8:	f043 0201 	orr.w	r2, r3, #1
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b084      	sub	sp, #16
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800312e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003132:	d113      	bne.n	800315c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800313e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003142:	d10b      	bne.n	800315c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	f043 0220 	orr.w	r2, r3, #32
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e063      	b.n	8003224 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800315c:	f7ff fe86 	bl	8002e6c <HAL_GetTick>
 8003160:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003162:	e021      	b.n	80031a8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316a:	d01d      	beq.n	80031a8 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d007      	beq.n	8003182 <HAL_ADC_PollForConversion+0x6c>
 8003172:	f7ff fe7b 	bl	8002e6c <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d212      	bcs.n	80031a8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b02      	cmp	r3, #2
 800318e:	d00b      	beq.n	80031a8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	f043 0204 	orr.w	r2, r3, #4
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e03d      	b.n	8003224 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d1d6      	bne.n	8003164 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f06f 0212 	mvn.w	r2, #18
 80031be:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d123      	bne.n	8003222 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d11f      	bne.n	8003222 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d006      	beq.n	80031fe <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d111      	bne.n	8003222 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d105      	bne.n	8003222 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	f043 0201 	orr.w	r2, r3, #1
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800323a:	4618      	mov	r0, r3
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
	...

08003248 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003252:	2300      	movs	r3, #0
 8003254:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800325c:	2b01      	cmp	r3, #1
 800325e:	d101      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x1c>
 8003260:	2302      	movs	r3, #2
 8003262:	e113      	b.n	800348c <HAL_ADC_ConfigChannel+0x244>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b09      	cmp	r3, #9
 8003272:	d925      	bls.n	80032c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68d9      	ldr	r1, [r3, #12]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	b29b      	uxth	r3, r3
 8003280:	461a      	mov	r2, r3
 8003282:	4613      	mov	r3, r2
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	4413      	add	r3, r2
 8003288:	3b1e      	subs	r3, #30
 800328a:	2207      	movs	r2, #7
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	43da      	mvns	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	400a      	ands	r2, r1
 8003298:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68d9      	ldr	r1, [r3, #12]
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	4618      	mov	r0, r3
 80032ac:	4603      	mov	r3, r0
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	4403      	add	r3, r0
 80032b2:	3b1e      	subs	r3, #30
 80032b4:	409a      	lsls	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	60da      	str	r2, [r3, #12]
 80032be:	e022      	b.n	8003306 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6919      	ldr	r1, [r3, #16]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	461a      	mov	r2, r3
 80032ce:	4613      	mov	r3, r2
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	4413      	add	r3, r2
 80032d4:	2207      	movs	r2, #7
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43da      	mvns	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	400a      	ands	r2, r1
 80032e2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6919      	ldr	r1, [r3, #16]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	4618      	mov	r0, r3
 80032f6:	4603      	mov	r3, r0
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	4403      	add	r3, r0
 80032fc:	409a      	lsls	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	430a      	orrs	r2, r1
 8003304:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2b06      	cmp	r3, #6
 800330c:	d824      	bhi.n	8003358 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	3b05      	subs	r3, #5
 8003320:	221f      	movs	r2, #31
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43da      	mvns	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	400a      	ands	r2, r1
 800332e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	b29b      	uxth	r3, r3
 800333c:	4618      	mov	r0, r3
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	3b05      	subs	r3, #5
 800334a:	fa00 f203 	lsl.w	r2, r0, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	635a      	str	r2, [r3, #52]	; 0x34
 8003356:	e04c      	b.n	80033f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b0c      	cmp	r3, #12
 800335e:	d824      	bhi.n	80033aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	4613      	mov	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	3b23      	subs	r3, #35	; 0x23
 8003372:	221f      	movs	r2, #31
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	43da      	mvns	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	400a      	ands	r2, r1
 8003380:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	b29b      	uxth	r3, r3
 800338e:	4618      	mov	r0, r3
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	3b23      	subs	r3, #35	; 0x23
 800339c:	fa00 f203 	lsl.w	r2, r0, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	631a      	str	r2, [r3, #48]	; 0x30
 80033a8:	e023      	b.n	80033f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	4613      	mov	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	3b41      	subs	r3, #65	; 0x41
 80033bc:	221f      	movs	r2, #31
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	43da      	mvns	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	400a      	ands	r2, r1
 80033ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	4618      	mov	r0, r3
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	3b41      	subs	r3, #65	; 0x41
 80033e6:	fa00 f203 	lsl.w	r2, r0, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033f2:	4b29      	ldr	r3, [pc, #164]	; (8003498 <HAL_ADC_ConfigChannel+0x250>)
 80033f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a28      	ldr	r2, [pc, #160]	; (800349c <HAL_ADC_ConfigChannel+0x254>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d10f      	bne.n	8003420 <HAL_ADC_ConfigChannel+0x1d8>
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b12      	cmp	r3, #18
 8003406:	d10b      	bne.n	8003420 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a1d      	ldr	r2, [pc, #116]	; (800349c <HAL_ADC_ConfigChannel+0x254>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d12b      	bne.n	8003482 <HAL_ADC_ConfigChannel+0x23a>
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a1c      	ldr	r2, [pc, #112]	; (80034a0 <HAL_ADC_ConfigChannel+0x258>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d003      	beq.n	800343c <HAL_ADC_ConfigChannel+0x1f4>
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2b11      	cmp	r3, #17
 800343a:	d122      	bne.n	8003482 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a11      	ldr	r2, [pc, #68]	; (80034a0 <HAL_ADC_ConfigChannel+0x258>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d111      	bne.n	8003482 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800345e:	4b11      	ldr	r3, [pc, #68]	; (80034a4 <HAL_ADC_ConfigChannel+0x25c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a11      	ldr	r2, [pc, #68]	; (80034a8 <HAL_ADC_ConfigChannel+0x260>)
 8003464:	fba2 2303 	umull	r2, r3, r2, r3
 8003468:	0c9a      	lsrs	r2, r3, #18
 800346a:	4613      	mov	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003474:	e002      	b.n	800347c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	3b01      	subs	r3, #1
 800347a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f9      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	40012300 	.word	0x40012300
 800349c:	40012000 	.word	0x40012000
 80034a0:	10000012 	.word	0x10000012
 80034a4:	20000004 	.word	0x20000004
 80034a8:	431bde83 	.word	0x431bde83

080034ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034b4:	4b79      	ldr	r3, [pc, #484]	; (800369c <ADC_Init+0x1f0>)
 80034b6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	431a      	orrs	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6859      	ldr	r1, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	021a      	lsls	r2, r3, #8
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003504:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6859      	ldr	r1, [r3, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003526:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6899      	ldr	r1, [r3, #8]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68da      	ldr	r2, [r3, #12]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353e:	4a58      	ldr	r2, [pc, #352]	; (80036a0 <ADC_Init+0x1f4>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d022      	beq.n	800358a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003552:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6899      	ldr	r1, [r3, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003574:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6899      	ldr	r1, [r3, #8]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	609a      	str	r2, [r3, #8]
 8003588:	e00f      	b.n	80035aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003598:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035a8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 0202 	bic.w	r2, r2, #2
 80035b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6899      	ldr	r1, [r3, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	7e1b      	ldrb	r3, [r3, #24]
 80035c4:	005a      	lsls	r2, r3, #1
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d01b      	beq.n	8003610 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035e6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80035f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6859      	ldr	r1, [r3, #4]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	3b01      	subs	r3, #1
 8003604:	035a      	lsls	r2, r3, #13
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	605a      	str	r2, [r3, #4]
 800360e:	e007      	b.n	8003620 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800361e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800362e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	3b01      	subs	r3, #1
 800363c:	051a      	lsls	r2, r3, #20
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003654:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6899      	ldr	r1, [r3, #8]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003662:	025a      	lsls	r2, r3, #9
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800367a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6899      	ldr	r1, [r3, #8]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	029a      	lsls	r2, r3, #10
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	430a      	orrs	r2, r1
 800368e:	609a      	str	r2, [r3, #8]
}
 8003690:	bf00      	nop
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	40012300 	.word	0x40012300
 80036a0:	0f000001 	.word	0x0f000001

080036a4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e0ed      	b.n	8003892 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d102      	bne.n	80036c8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff f85a 	bl	800277c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0201 	orr.w	r2, r2, #1
 80036d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036d8:	f7ff fbc8 	bl	8002e6c <HAL_GetTick>
 80036dc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80036de:	e012      	b.n	8003706 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80036e0:	f7ff fbc4 	bl	8002e6c <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b0a      	cmp	r3, #10
 80036ec:	d90b      	bls.n	8003706 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2205      	movs	r2, #5
 80036fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e0c5      	b.n	8003892 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0e5      	beq.n	80036e0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0202 	bic.w	r2, r2, #2
 8003722:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003724:	f7ff fba2 	bl	8002e6c <HAL_GetTick>
 8003728:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800372a:	e012      	b.n	8003752 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800372c:	f7ff fb9e 	bl	8002e6c <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b0a      	cmp	r3, #10
 8003738:	d90b      	bls.n	8003752 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2205      	movs	r2, #5
 800374a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e09f      	b.n	8003892 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1e5      	bne.n	800372c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	7e1b      	ldrb	r3, [r3, #24]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d108      	bne.n	800377a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	e007      	b.n	800378a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003788:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	7e5b      	ldrb	r3, [r3, #25]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d108      	bne.n	80037a4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	e007      	b.n	80037b4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	7e9b      	ldrb	r3, [r3, #26]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d108      	bne.n	80037ce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0220 	orr.w	r2, r2, #32
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	e007      	b.n	80037de <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0220 	bic.w	r2, r2, #32
 80037dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	7edb      	ldrb	r3, [r3, #27]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d108      	bne.n	80037f8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0210 	bic.w	r2, r2, #16
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	e007      	b.n	8003808 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 0210 	orr.w	r2, r2, #16
 8003806:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	7f1b      	ldrb	r3, [r3, #28]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d108      	bne.n	8003822 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0208 	orr.w	r2, r2, #8
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	e007      	b.n	8003832 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0208 	bic.w	r2, r2, #8
 8003830:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	7f5b      	ldrb	r3, [r3, #29]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d108      	bne.n	800384c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 0204 	orr.w	r2, r2, #4
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	e007      	b.n	800385c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0204 	bic.w	r2, r2, #4
 800385a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	431a      	orrs	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	431a      	orrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	ea42 0103 	orr.w	r1, r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	1e5a      	subs	r2, r3, #1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
	...

0800389c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038b2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80038b4:	7cfb      	ldrb	r3, [r7, #19]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d003      	beq.n	80038c2 <HAL_CAN_ConfigFilter+0x26>
 80038ba:	7cfb      	ldrb	r3, [r7, #19]
 80038bc:	2b02      	cmp	r3, #2
 80038be:	f040 80be 	bne.w	8003a3e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80038c2:	4b65      	ldr	r3, [pc, #404]	; (8003a58 <HAL_CAN_ConfigFilter+0x1bc>)
 80038c4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80038cc:	f043 0201 	orr.w	r2, r3, #1
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80038dc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	021b      	lsls	r3, r3, #8
 80038f2:	431a      	orrs	r2, r3
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	f003 031f 	and.w	r3, r3, #31
 8003902:	2201      	movs	r2, #1
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	43db      	mvns	r3, r3
 8003914:	401a      	ands	r2, r3
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d123      	bne.n	800396c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	43db      	mvns	r3, r3
 800392e:	401a      	ands	r2, r3
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003946:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	3248      	adds	r2, #72	; 0x48
 800394c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003960:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003962:	6979      	ldr	r1, [r7, #20]
 8003964:	3348      	adds	r3, #72	; 0x48
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	440b      	add	r3, r1
 800396a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d122      	bne.n	80039ba <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	431a      	orrs	r2, r3
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003994:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	3248      	adds	r2, #72	; 0x48
 800399a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80039ae:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80039b0:	6979      	ldr	r1, [r7, #20]
 80039b2:	3348      	adds	r3, #72	; 0x48
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	440b      	add	r3, r1
 80039b8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d109      	bne.n	80039d6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	43db      	mvns	r3, r3
 80039cc:	401a      	ands	r2, r3
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80039d4:	e007      	b.n	80039e6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	431a      	orrs	r2, r3
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d109      	bne.n	8003a02 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	43db      	mvns	r3, r3
 80039f8:	401a      	ands	r2, r3
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003a00:	e007      	b.n	8003a12 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d107      	bne.n	8003a2a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	431a      	orrs	r2, r3
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003a30:	f023 0201 	bic.w	r2, r3, #1
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	e006      	b.n	8003a4c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
  }
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	371c      	adds	r7, #28
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	40006400 	.word	0x40006400

08003a5c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d12e      	bne.n	8003ace <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0201 	bic.w	r2, r2, #1
 8003a86:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a88:	f7ff f9f0 	bl	8002e6c <HAL_GetTick>
 8003a8c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003a8e:	e012      	b.n	8003ab6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a90:	f7ff f9ec 	bl	8002e6c <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b0a      	cmp	r3, #10
 8003a9c:	d90b      	bls.n	8003ab6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2205      	movs	r2, #5
 8003aae:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e012      	b.n	8003adc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1e5      	bne.n	8003a90 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003aca:	2300      	movs	r3, #0
 8003acc:	e006      	b.n	8003adc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
  }
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b089      	sub	sp, #36	; 0x24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
 8003af0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003af8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b02:	7ffb      	ldrb	r3, [r7, #31]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d003      	beq.n	8003b10 <HAL_CAN_AddTxMessage+0x2c>
 8003b08:	7ffb      	ldrb	r3, [r7, #31]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	f040 80ad 	bne.w	8003c6a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10a      	bne.n	8003b30 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d105      	bne.n	8003b30 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 8095 	beq.w	8003c5a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	0e1b      	lsrs	r3, r3, #24
 8003b34:	f003 0303 	and.w	r3, r3, #3
 8003b38:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	409a      	lsls	r2, r3
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10d      	bne.n	8003b68 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003b56:	68f9      	ldr	r1, [r7, #12]
 8003b58:	6809      	ldr	r1, [r1, #0]
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	3318      	adds	r3, #24
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	440b      	add	r3, r1
 8003b64:	601a      	str	r2, [r3, #0]
 8003b66:	e00f      	b.n	8003b88 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b72:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b78:	68f9      	ldr	r1, [r7, #12]
 8003b7a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003b7c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	3318      	adds	r3, #24
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	440b      	add	r3, r1
 8003b86:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6819      	ldr	r1, [r3, #0]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	691a      	ldr	r2, [r3, #16]
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	3318      	adds	r3, #24
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	440b      	add	r3, r1
 8003b98:	3304      	adds	r3, #4
 8003b9a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	7d1b      	ldrb	r3, [r3, #20]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d111      	bne.n	8003bc8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	3318      	adds	r3, #24
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	4413      	add	r3, r2
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	6811      	ldr	r1, [r2, #0]
 8003bb8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	3318      	adds	r3, #24
 8003bc0:	011b      	lsls	r3, r3, #4
 8003bc2:	440b      	add	r3, r1
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3307      	adds	r3, #7
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	061a      	lsls	r2, r3, #24
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	3306      	adds	r3, #6
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	041b      	lsls	r3, r3, #16
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	3305      	adds	r3, #5
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	021b      	lsls	r3, r3, #8
 8003be2:	4313      	orrs	r3, r2
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	3204      	adds	r2, #4
 8003be8:	7812      	ldrb	r2, [r2, #0]
 8003bea:	4610      	mov	r0, r2
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	6811      	ldr	r1, [r2, #0]
 8003bf0:	ea43 0200 	orr.w	r2, r3, r0
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	440b      	add	r3, r1
 8003bfa:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003bfe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3303      	adds	r3, #3
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	061a      	lsls	r2, r3, #24
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3302      	adds	r3, #2
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	041b      	lsls	r3, r3, #16
 8003c10:	431a      	orrs	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3301      	adds	r3, #1
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	021b      	lsls	r3, r3, #8
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	7812      	ldrb	r2, [r2, #0]
 8003c20:	4610      	mov	r0, r2
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	6811      	ldr	r1, [r2, #0]
 8003c26:	ea43 0200 	orr.w	r2, r3, r0
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	440b      	add	r3, r1
 8003c30:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003c34:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	3318      	adds	r3, #24
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	4413      	add	r3, r2
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	6811      	ldr	r1, [r2, #0]
 8003c48:	f043 0201 	orr.w	r2, r3, #1
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	3318      	adds	r3, #24
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	440b      	add	r3, r1
 8003c54:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	e00e      	b.n	8003c78 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e006      	b.n	8003c78 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
  }
}

 8003c78:	4618      	mov	r0, r3
 8003c7a:	3724      	adds	r7, #36	; 0x24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_CAN_GetTxMailboxesFreeLevel>:
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
  uint32_t freelevel = 0U;
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60fb      	str	r3, [r7, #12]

 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c96:	72fb      	strb	r3, [r7, #11]
  if ((state == HAL_CAN_STATE_READY) ||
      (state == HAL_CAN_STATE_LISTENING))
 8003c98:	7afb      	ldrb	r3, [r7, #11]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d002      	beq.n	8003ca4 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003c9e:	7afb      	ldrb	r3, [r7, #11]
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d11d      	bne.n	8003ce0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
    {
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d002      	beq.n	8003cb8 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
      freelevel++;
    }
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	60fb      	str	r3, [r7, #12]

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
    {
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d002      	beq.n	8003ccc <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
      freelevel++;
    }
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	60fb      	str	r3, [r7, #12]

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
    {
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d002      	beq.n	8003ce0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      freelevel++;
    }
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	60fb      	str	r3, [r7, #12]
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
}
 8003ce0:	68fb      	ldr	r3, [r7, #12]

 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <HAL_CAN_GetRxMessage>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8003cee:	b480      	push	{r7}
 8003cf0:	b087      	sub	sp, #28
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	607a      	str	r2, [r7, #4]
 8003cfa:	603b      	str	r3, [r7, #0]

 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
      (state == HAL_CAN_STATE_LISTENING))
 8003d04:	7dfb      	ldrb	r3, [r7, #23]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d003      	beq.n	8003d12 <HAL_CAN_GetRxMessage+0x24>
 8003d0a:	7dfb      	ldrb	r3, [r7, #23]
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	f040 8103 	bne.w	8003f18 <HAL_CAN_GetRxMessage+0x22a>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10e      	bne.n	8003d36 <HAL_CAN_GetRxMessage+0x48>
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
      {
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f003 0303 	and.w	r3, r3, #3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d116      	bne.n	8003d54 <HAL_CAN_GetRxMessage+0x66>
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;

 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	625a      	str	r2, [r3, #36]	; 0x24
        return HAL_ERROR;
      }
 8003d32:	2301      	movs	r3, #1
 8003d34:	e0f7      	b.n	8003f26 <HAL_CAN_GetRxMessage+0x238>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
      {
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	f003 0303 	and.w	r3, r3, #3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d107      	bne.n	8003d54 <HAL_CAN_GetRxMessage+0x66>
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;

 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	625a      	str	r2, [r3, #36]	; 0x24
        return HAL_ERROR;
      }
 8003d50:	2301      	movs	r3, #1
 8003d52:	e0e8      	b.n	8003f26 <HAL_CAN_GetRxMessage+0x238>
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
    if (pHeader->IDE == CAN_ID_STD)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	331b      	adds	r3, #27
 8003d5c:	011b      	lsls	r3, r3, #4
 8003d5e:	4413      	add	r3, r2
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0204 	and.w	r2, r3, #4
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	609a      	str	r2, [r3, #8]
    {
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10c      	bne.n	8003d8c <HAL_CAN_GetRxMessage+0x9e>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
    }
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	331b      	adds	r3, #27
 8003d7a:	011b      	lsls	r3, r3, #4
 8003d7c:	4413      	add	r3, r2
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	0d5b      	lsrs	r3, r3, #21
 8003d82:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	e00b      	b.n	8003da4 <HAL_CAN_GetRxMessage+0xb6>
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
    }
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	331b      	adds	r3, #27
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	4413      	add	r3, r2
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	08db      	lsrs	r3, r3, #3
 8003d9c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	605a      	str	r2, [r3, #4]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	331b      	adds	r3, #27
 8003dac:	011b      	lsls	r3, r3, #4
 8003dae:	4413      	add	r3, r2
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0202 	and.w	r2, r3, #2
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	60da      	str	r2, [r3, #12]
    {
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	331b      	adds	r3, #27
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	4413      	add	r3, r2
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_CAN_GetRxMessage+0xec>
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
    }
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2208      	movs	r2, #8
 8003dd6:	611a      	str	r2, [r3, #16]
 8003dd8:	e00b      	b.n	8003df2 <HAL_CAN_GetRxMessage+0x104>
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
    }
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	331b      	adds	r3, #27
 8003de2:	011b      	lsls	r3, r3, #4
 8003de4:	4413      	add	r3, r2
 8003de6:	3304      	adds	r3, #4
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 020f 	and.w	r2, r3, #15
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	331b      	adds	r3, #27
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	4413      	add	r3, r2
 8003dfe:	3304      	adds	r3, #4
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	0a1b      	lsrs	r3, r3, #8
 8003e04:	b2da      	uxtb	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	619a      	str	r2, [r3, #24]

 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	331b      	adds	r3, #27
 8003e12:	011b      	lsls	r3, r3, #4
 8003e14:	4413      	add	r3, r2
 8003e16:	3304      	adds	r3, #4
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	0c1b      	lsrs	r3, r3, #16
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	615a      	str	r2, [r3, #20]
    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	4413      	add	r3, r2
 8003e42:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	0a1a      	lsrs	r2, r3, #8
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	b2d2      	uxtb	r2, r2
 8003e50:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	011b      	lsls	r3, r3, #4
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	0c1a      	lsrs	r2, r3, #16
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	3302      	adds	r3, #2
 8003e68:	b2d2      	uxtb	r2, r2
 8003e6a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	4413      	add	r3, r2
 8003e76:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	0e1a      	lsrs	r2, r3, #24
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	3303      	adds	r3, #3
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	3304      	adds	r3, #4
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	011b      	lsls	r3, r3, #4
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	0a1a      	lsrs	r2, r3, #8
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	3305      	adds	r3, #5
 8003eb4:	b2d2      	uxtb	r2, r2
 8003eb6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	0c1a      	lsrs	r2, r3, #16
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	3306      	adds	r3, #6
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	701a      	strb	r2, [r3, #0]

 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	011b      	lsls	r3, r3, #4
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	0e1a      	lsrs	r2, r3, #24
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	3307      	adds	r3, #7
 8003ee8:	b2d2      	uxtb	r2, r2
 8003eea:	701a      	strb	r2, [r3, #0]
    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d108      	bne.n	8003f04 <HAL_CAN_GetRxMessage+0x216>
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
    }
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68da      	ldr	r2, [r3, #12]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f042 0220 	orr.w	r2, r2, #32
 8003f00:	60da      	str	r2, [r3, #12]
 8003f02:	e007      	b.n	8003f14 <HAL_CAN_GetRxMessage+0x226>
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
    }
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	691a      	ldr	r2, [r3, #16]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f042 0220 	orr.w	r2, r2, #32
 8003f12:	611a      	str	r2, [r3, #16]

    /* Return function status */
    return HAL_OK;
  }
 8003f14:	2300      	movs	r3, #0
 8003f16:	e006      	b.n	8003f26 <HAL_CAN_GetRxMessage+0x238>
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	625a      	str	r2, [r3, #36]	; 0x24
    return HAL_ERROR;
  }
 8003f24:	2301      	movs	r3, #1
}

 8003f26:	4618      	mov	r0, r3
 8003f28:	371c      	adds	r7, #28
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f32:	b480      	push	{r7}
 8003f34:	b085      	sub	sp, #20
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
 8003f3a:	6039      	str	r1, [r7, #0]

 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f42:	73fb      	strb	r3, [r7, #15]
  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
      (state == HAL_CAN_STATE_LISTENING))
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d002      	beq.n	8003f50 <HAL_CAN_ActivateNotification+0x1e>
 8003f4a:	7bfb      	ldrb	r3, [r7, #15]
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d109      	bne.n	8003f64 <HAL_CAN_ActivateNotification+0x32>
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);

 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6959      	ldr	r1, [r3, #20]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	615a      	str	r2, [r3, #20]
    /* Return function status */
    return HAL_OK;
  }
 8003f60:	2300      	movs	r3, #0
 8003f62:	e006      	b.n	8003f72 <HAL_CAN_ActivateNotification+0x40>
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	625a      	str	r2, [r3, #36]	; 0x24
    return HAL_ERROR;
  }
 8003f70:	2301      	movs	r3, #1
}

 8003f72:	4618      	mov	r0, r3
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <HAL_CAN_IRQHandler>:
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b08a      	sub	sp, #40	; 0x28
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003f86:	2300      	movs	r3, #0
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	623b      	str	r3, [r7, #32]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	61fb      	str	r3, [r7, #28]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	61bb      	str	r3, [r7, #24]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	617b      	str	r3, [r7, #20]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	613b      	str	r3, [r7, #16]

 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	60fb      	str	r3, [r7, #12]
  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
  {
 8003fba:	6a3b      	ldr	r3, [r7, #32]
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d07c      	beq.n	80040be <HAL_CAN_IRQHandler+0x140>
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
    {
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d023      	beq.n	8004016 <HAL_CAN_IRQHandler+0x98>
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);

 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
      {
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <HAL_CAN_IRQHandler+0x6a>
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f983 	bl	80042ec <HAL_CAN_TxMailbox0CompleteCallback>
 8003fe6:	e016      	b.n	8004016 <HAL_CAN_IRQHandler+0x98>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
        {
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	f003 0304 	and.w	r3, r3, #4
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d004      	beq.n	8003ffc <HAL_CAN_IRQHandler+0x7e>
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
        }
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8003ffa:	e00c      	b.n	8004016 <HAL_CAN_IRQHandler+0x98>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
        {
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b00      	cmp	r3, #0
 8004004:	d004      	beq.n	8004010 <HAL_CAN_IRQHandler+0x92>
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
        }
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800400c:	627b      	str	r3, [r7, #36]	; 0x24
 800400e:	e002      	b.n	8004016 <HAL_CAN_IRQHandler+0x98>
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f989 	bl	8004328 <HAL_CAN_TxMailbox0AbortCallback>
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
    {
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401c:	2b00      	cmp	r3, #0
 800401e:	d024      	beq.n	800406a <HAL_CAN_IRQHandler+0xec>
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);

 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004028:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
      {
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004030:	2b00      	cmp	r3, #0
 8004032:	d003      	beq.n	800403c <HAL_CAN_IRQHandler+0xbe>
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f963 	bl	8004300 <HAL_CAN_TxMailbox1CompleteCallback>
 800403a:	e016      	b.n	800406a <HAL_CAN_IRQHandler+0xec>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
        {
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004042:	2b00      	cmp	r3, #0
 8004044:	d004      	beq.n	8004050 <HAL_CAN_IRQHandler+0xd2>
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
        }
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800404c:	627b      	str	r3, [r7, #36]	; 0x24
 800404e:	e00c      	b.n	800406a <HAL_CAN_IRQHandler+0xec>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
        {
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004056:	2b00      	cmp	r3, #0
 8004058:	d004      	beq.n	8004064 <HAL_CAN_IRQHandler+0xe6>
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
        }
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004060:	627b      	str	r3, [r7, #36]	; 0x24
 8004062:	e002      	b.n	800406a <HAL_CAN_IRQHandler+0xec>
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f969 	bl	800433c <HAL_CAN_TxMailbox1AbortCallback>
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
    {
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d024      	beq.n	80040be <HAL_CAN_IRQHandler+0x140>
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);

 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800407c:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
      {
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <HAL_CAN_IRQHandler+0x112>
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f943 	bl	8004314 <HAL_CAN_TxMailbox2CompleteCallback>
 800408e:	e016      	b.n	80040be <HAL_CAN_IRQHandler+0x140>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
        {
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d004      	beq.n	80040a4 <HAL_CAN_IRQHandler+0x126>
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
        }
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040a0:	627b      	str	r3, [r7, #36]	; 0x24
 80040a2:	e00c      	b.n	80040be <HAL_CAN_IRQHandler+0x140>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
        {
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d004      	beq.n	80040b8 <HAL_CAN_IRQHandler+0x13a>
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
        }
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b4:	627b      	str	r3, [r7, #36]	; 0x24
 80040b6:	e002      	b.n	80040be <HAL_CAN_IRQHandler+0x140>
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f949 	bl	8004350 <HAL_CAN_TxMailbox2AbortCallback>
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
  {
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	f003 0308 	and.w	r3, r3, #8
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00c      	beq.n	80040e2 <HAL_CAN_IRQHandler+0x164>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
    {
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f003 0310 	and.w	r3, r3, #16
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d007      	beq.n	80040e2 <HAL_CAN_IRQHandler+0x164>
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;

 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040d8:	627b      	str	r3, [r7, #36]	; 0x24
      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
    }
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2210      	movs	r2, #16
 80040e0:	60da      	str	r2, [r3, #12]
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
  {
 80040e2:	6a3b      	ldr	r3, [r7, #32]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00b      	beq.n	8004104 <HAL_CAN_IRQHandler+0x186>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
    {
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f003 0308 	and.w	r3, r3, #8
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d006      	beq.n	8004104 <HAL_CAN_IRQHandler+0x186>
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);

 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2208      	movs	r2, #8
 80040fc:	60da      	str	r2, [r3, #12]
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f930 	bl	8004364 <HAL_CAN_RxFifo0FullCallback>
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
  {
 8004104:	6a3b      	ldr	r3, [r7, #32]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d009      	beq.n	8004122 <HAL_CAN_IRQHandler+0x1a4>
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
    {
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f003 0303 	and.w	r3, r3, #3
 8004118:	2b00      	cmp	r3, #0
 800411a:	d002      	beq.n	8004122 <HAL_CAN_IRQHandler+0x1a4>
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f7fe f91d 	bl	800235c <HAL_CAN_RxFifo0MsgPendingCallback>
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
  {
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00c      	beq.n	8004146 <HAL_CAN_IRQHandler+0x1c8>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
    {
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	f003 0310 	and.w	r3, r3, #16
 8004132:	2b00      	cmp	r3, #0
 8004134:	d007      	beq.n	8004146 <HAL_CAN_IRQHandler+0x1c8>
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;

 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800413c:	627b      	str	r3, [r7, #36]	; 0x24
      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
    }
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2210      	movs	r2, #16
 8004144:	611a      	str	r2, [r3, #16]
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
  {
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	f003 0320 	and.w	r3, r3, #32
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00b      	beq.n	8004168 <HAL_CAN_IRQHandler+0x1ea>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
    {
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	f003 0308 	and.w	r3, r3, #8
 8004156:	2b00      	cmp	r3, #0
 8004158:	d006      	beq.n	8004168 <HAL_CAN_IRQHandler+0x1ea>
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);

 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2208      	movs	r2, #8
 8004160:	611a      	str	r2, [r3, #16]
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f912 	bl	800438c <HAL_CAN_RxFifo1FullCallback>
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
  {
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	f003 0310 	and.w	r3, r3, #16
 800416e:	2b00      	cmp	r3, #0
 8004170:	d009      	beq.n	8004186 <HAL_CAN_IRQHandler+0x208>
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
    {
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	f003 0303 	and.w	r3, r3, #3
 800417c:	2b00      	cmp	r3, #0
 800417e:	d002      	beq.n	8004186 <HAL_CAN_IRQHandler+0x208>
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f8f9 	bl	8004378 <HAL_CAN_RxFifo1MsgPendingCallback>
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
  {
 8004186:	6a3b      	ldr	r3, [r7, #32]
 8004188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00b      	beq.n	80041a8 <HAL_CAN_IRQHandler+0x22a>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
    {
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	f003 0310 	and.w	r3, r3, #16
 8004196:	2b00      	cmp	r3, #0
 8004198:	d006      	beq.n	80041a8 <HAL_CAN_IRQHandler+0x22a>
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);

 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2210      	movs	r2, #16
 80041a0:	605a      	str	r2, [r3, #4]
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f8fc 	bl	80043a0 <HAL_CAN_SleepCallback>
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
  {
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00b      	beq.n	80041ca <HAL_CAN_IRQHandler+0x24c>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
    {
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d006      	beq.n	80041ca <HAL_CAN_IRQHandler+0x24c>
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);

 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2208      	movs	r2, #8
 80041c2:	605a      	str	r2, [r3, #4]
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 f8f5 	bl	80043b4 <HAL_CAN_WakeUpFromRxMsgCallback>
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
  {
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d07b      	beq.n	80042cc <HAL_CAN_IRQHandler+0x34e>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
    {
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	f003 0304 	and.w	r3, r3, #4
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d072      	beq.n	80042c4 <HAL_CAN_IRQHandler+0x346>
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d008      	beq.n	80041fa <HAL_CAN_IRQHandler+0x27c>
      {
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f003 0301 	and.w	r3, r3, #1
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_CAN_IRQHandler+0x27c>
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;

 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	f043 0301 	orr.w	r3, r3, #1
 80041f8:	627b      	str	r3, [r7, #36]	; 0x24
        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004200:	2b00      	cmp	r3, #0
 8004202:	d008      	beq.n	8004216 <HAL_CAN_IRQHandler+0x298>
      {
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f003 0302 	and.w	r3, r3, #2
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <HAL_CAN_IRQHandler+0x298>
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;

 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	f043 0302 	orr.w	r3, r3, #2
 8004214:	627b      	str	r3, [r7, #36]	; 0x24
        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004216:	6a3b      	ldr	r3, [r7, #32]
 8004218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800421c:	2b00      	cmp	r3, #0
 800421e:	d008      	beq.n	8004232 <HAL_CAN_IRQHandler+0x2b4>
      {
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f003 0304 	and.w	r3, r3, #4
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <HAL_CAN_IRQHandler+0x2b4>
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;

 800422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422c:	f043 0304 	orr.w	r3, r3, #4
 8004230:	627b      	str	r3, [r7, #36]	; 0x24
        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004232:	6a3b      	ldr	r3, [r7, #32]
 8004234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004238:	2b00      	cmp	r3, #0
 800423a:	d043      	beq.n	80042c4 <HAL_CAN_IRQHandler+0x346>
      {
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f003 0370 	and.w	r3, r3, #112	; 0x70
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004242:	2b00      	cmp	r3, #0
 8004244:	d03e      	beq.n	80042c4 <HAL_CAN_IRQHandler+0x346>
        switch (esrflags & CAN_ESR_LEC)
        {
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800424c:	2b60      	cmp	r3, #96	; 0x60
 800424e:	d02b      	beq.n	80042a8 <HAL_CAN_IRQHandler+0x32a>
 8004250:	2b60      	cmp	r3, #96	; 0x60
 8004252:	d82e      	bhi.n	80042b2 <HAL_CAN_IRQHandler+0x334>
 8004254:	2b50      	cmp	r3, #80	; 0x50
 8004256:	d022      	beq.n	800429e <HAL_CAN_IRQHandler+0x320>
 8004258:	2b50      	cmp	r3, #80	; 0x50
 800425a:	d82a      	bhi.n	80042b2 <HAL_CAN_IRQHandler+0x334>
 800425c:	2b40      	cmp	r3, #64	; 0x40
 800425e:	d019      	beq.n	8004294 <HAL_CAN_IRQHandler+0x316>
 8004260:	2b40      	cmp	r3, #64	; 0x40
 8004262:	d826      	bhi.n	80042b2 <HAL_CAN_IRQHandler+0x334>
 8004264:	2b30      	cmp	r3, #48	; 0x30
 8004266:	d010      	beq.n	800428a <HAL_CAN_IRQHandler+0x30c>
 8004268:	2b30      	cmp	r3, #48	; 0x30
 800426a:	d822      	bhi.n	80042b2 <HAL_CAN_IRQHandler+0x334>
 800426c:	2b10      	cmp	r3, #16
 800426e:	d002      	beq.n	8004276 <HAL_CAN_IRQHandler+0x2f8>
 8004270:	2b20      	cmp	r3, #32
 8004272:	d005      	beq.n	8004280 <HAL_CAN_IRQHandler+0x302>
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
        }
 8004274:	e01d      	b.n	80042b2 <HAL_CAN_IRQHandler+0x334>
            break;
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	f043 0308 	orr.w	r3, r3, #8
 800427c:	627b      	str	r3, [r7, #36]	; 0x24
          case (CAN_ESR_LEC_1):
 800427e:	e019      	b.n	80042b4 <HAL_CAN_IRQHandler+0x336>
            break;
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	f043 0310 	orr.w	r3, r3, #16
 8004286:	627b      	str	r3, [r7, #36]	; 0x24
          case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
 8004288:	e014      	b.n	80042b4 <HAL_CAN_IRQHandler+0x336>
            break;
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	f043 0320 	orr.w	r3, r3, #32
 8004290:	627b      	str	r3, [r7, #36]	; 0x24
          case (CAN_ESR_LEC_2):
 8004292:	e00f      	b.n	80042b4 <HAL_CAN_IRQHandler+0x336>
            break;
 8004294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800429a:	627b      	str	r3, [r7, #36]	; 0x24
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
 800429c:	e00a      	b.n	80042b4 <HAL_CAN_IRQHandler+0x336>
            break;
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042a4:	627b      	str	r3, [r7, #36]	; 0x24
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
 80042a6:	e005      	b.n	80042b4 <HAL_CAN_IRQHandler+0x336>
            break;
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ae:	627b      	str	r3, [r7, #36]	; 0x24
          default:
 80042b0:	e000      	b.n	80042b4 <HAL_CAN_IRQHandler+0x336>
        }
 80042b2:	bf00      	nop

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
      }
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	699a      	ldr	r2, [r3, #24]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80042c2:	619a      	str	r2, [r3, #24]
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
  }
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2204      	movs	r2, #4
 80042ca:	605a      	str	r2, [r3, #4]

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
  {
 80042cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d008      	beq.n	80042e4 <HAL_CAN_IRQHandler+0x366>
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;

 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	431a      	orrs	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	625a      	str	r2, [r3, #36]	; 0x24
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f872 	bl	80043c8 <HAL_CAN_ErrorCallback>
  }
}

 80042e4:	bf00      	nop
 80042e6:	3728      	adds	r7, #40	; 0x28
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_CAN_TxMailbox0CompleteCallback>:
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
  /* Prevent unused argument(s) compilation warning */
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}

 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <HAL_CAN_TxMailbox1CompleteCallback>:
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
  /* Prevent unused argument(s) compilation warning */
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}

 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_CAN_TxMailbox2CompleteCallback>:
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
  /* Prevent unused argument(s) compilation warning */
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}

 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <HAL_CAN_TxMailbox0AbortCallback>:
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
  /* Prevent unused argument(s) compilation warning */
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}

 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <HAL_CAN_TxMailbox1AbortCallback>:
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
  /* Prevent unused argument(s) compilation warning */
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}

 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <HAL_CAN_TxMailbox2AbortCallback>:
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
  /* Prevent unused argument(s) compilation warning */
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}

 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_CAN_RxFifo0FullCallback>:
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
  /* Prevent unused argument(s) compilation warning */
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}

 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <HAL_CAN_RxFifo1MsgPendingCallback>:
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
  /* Prevent unused argument(s) compilation warning */
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}

 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <HAL_CAN_RxFifo1FullCallback>:
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
  /* Prevent unused argument(s) compilation warning */
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}

 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <HAL_CAN_SleepCallback>:
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
  /* Prevent unused argument(s) compilation warning */
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}

 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
  /* Prevent unused argument(s) compilation warning */
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}

 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_CAN_ErrorCallback>:
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
  /* Prevent unused argument(s) compilation warning */
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}

 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043ec:	4b0c      	ldr	r3, [pc, #48]	; (8004420 <__NVIC_SetPriorityGrouping+0x44>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043f8:	4013      	ands	r3, r2
 80043fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004404:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800440c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800440e:	4a04      	ldr	r2, [pc, #16]	; (8004420 <__NVIC_SetPriorityGrouping+0x44>)
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	60d3      	str	r3, [r2, #12]
}
 8004414:	bf00      	nop
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	e000ed00 	.word	0xe000ed00

08004424 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004424:	b480      	push	{r7}
 8004426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004428:	4b04      	ldr	r3, [pc, #16]	; (800443c <__NVIC_GetPriorityGrouping+0x18>)
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	0a1b      	lsrs	r3, r3, #8
 800442e:	f003 0307 	and.w	r3, r3, #7
}
 8004432:	4618      	mov	r0, r3
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	e000ed00 	.word	0xe000ed00

08004440 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	4603      	mov	r3, r0
 8004448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800444a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800444e:	2b00      	cmp	r3, #0
 8004450:	db0b      	blt.n	800446a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004452:	79fb      	ldrb	r3, [r7, #7]
 8004454:	f003 021f 	and.w	r2, r3, #31
 8004458:	4907      	ldr	r1, [pc, #28]	; (8004478 <__NVIC_EnableIRQ+0x38>)
 800445a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800445e:	095b      	lsrs	r3, r3, #5
 8004460:	2001      	movs	r0, #1
 8004462:	fa00 f202 	lsl.w	r2, r0, r2
 8004466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	e000e100 	.word	0xe000e100

0800447c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	4603      	mov	r3, r0
 8004484:	6039      	str	r1, [r7, #0]
 8004486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800448c:	2b00      	cmp	r3, #0
 800448e:	db0a      	blt.n	80044a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	b2da      	uxtb	r2, r3
 8004494:	490c      	ldr	r1, [pc, #48]	; (80044c8 <__NVIC_SetPriority+0x4c>)
 8004496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800449a:	0112      	lsls	r2, r2, #4
 800449c:	b2d2      	uxtb	r2, r2
 800449e:	440b      	add	r3, r1
 80044a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044a4:	e00a      	b.n	80044bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	4908      	ldr	r1, [pc, #32]	; (80044cc <__NVIC_SetPriority+0x50>)
 80044ac:	79fb      	ldrb	r3, [r7, #7]
 80044ae:	f003 030f 	and.w	r3, r3, #15
 80044b2:	3b04      	subs	r3, #4
 80044b4:	0112      	lsls	r2, r2, #4
 80044b6:	b2d2      	uxtb	r2, r2
 80044b8:	440b      	add	r3, r1
 80044ba:	761a      	strb	r2, [r3, #24]
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	e000e100 	.word	0xe000e100
 80044cc:	e000ed00 	.word	0xe000ed00

080044d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b089      	sub	sp, #36	; 0x24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f003 0307 	and.w	r3, r3, #7
 80044e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f1c3 0307 	rsb	r3, r3, #7
 80044ea:	2b04      	cmp	r3, #4
 80044ec:	bf28      	it	cs
 80044ee:	2304      	movcs	r3, #4
 80044f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	3304      	adds	r3, #4
 80044f6:	2b06      	cmp	r3, #6
 80044f8:	d902      	bls.n	8004500 <NVIC_EncodePriority+0x30>
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	3b03      	subs	r3, #3
 80044fe:	e000      	b.n	8004502 <NVIC_EncodePriority+0x32>
 8004500:	2300      	movs	r3, #0
 8004502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004504:	f04f 32ff 	mov.w	r2, #4294967295
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	fa02 f303 	lsl.w	r3, r2, r3
 800450e:	43da      	mvns	r2, r3
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	401a      	ands	r2, r3
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004518:	f04f 31ff 	mov.w	r1, #4294967295
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	fa01 f303 	lsl.w	r3, r1, r3
 8004522:	43d9      	mvns	r1, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004528:	4313      	orrs	r3, r2
         );
}
 800452a:	4618      	mov	r0, r3
 800452c:	3724      	adds	r7, #36	; 0x24
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
	...

08004538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3b01      	subs	r3, #1
 8004544:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004548:	d301      	bcc.n	800454e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800454a:	2301      	movs	r3, #1
 800454c:	e00f      	b.n	800456e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800454e:	4a0a      	ldr	r2, [pc, #40]	; (8004578 <SysTick_Config+0x40>)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3b01      	subs	r3, #1
 8004554:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004556:	210f      	movs	r1, #15
 8004558:	f04f 30ff 	mov.w	r0, #4294967295
 800455c:	f7ff ff8e 	bl	800447c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004560:	4b05      	ldr	r3, [pc, #20]	; (8004578 <SysTick_Config+0x40>)
 8004562:	2200      	movs	r2, #0
 8004564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004566:	4b04      	ldr	r3, [pc, #16]	; (8004578 <SysTick_Config+0x40>)
 8004568:	2207      	movs	r2, #7
 800456a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	e000e010 	.word	0xe000e010

0800457c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7ff ff29 	bl	80043dc <__NVIC_SetPriorityGrouping>
}
 800458a:	bf00      	nop
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004592:	b580      	push	{r7, lr}
 8004594:	b086      	sub	sp, #24
 8004596:	af00      	add	r7, sp, #0
 8004598:	4603      	mov	r3, r0
 800459a:	60b9      	str	r1, [r7, #8]
 800459c:	607a      	str	r2, [r7, #4]
 800459e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045a4:	f7ff ff3e 	bl	8004424 <__NVIC_GetPriorityGrouping>
 80045a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	68b9      	ldr	r1, [r7, #8]
 80045ae:	6978      	ldr	r0, [r7, #20]
 80045b0:	f7ff ff8e 	bl	80044d0 <NVIC_EncodePriority>
 80045b4:	4602      	mov	r2, r0
 80045b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045ba:	4611      	mov	r1, r2
 80045bc:	4618      	mov	r0, r3
 80045be:	f7ff ff5d 	bl	800447c <__NVIC_SetPriority>
}
 80045c2:	bf00      	nop
 80045c4:	3718      	adds	r7, #24
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b082      	sub	sp, #8
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	4603      	mov	r3, r0
 80045d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045d8:	4618      	mov	r0, r3
 80045da:	f7ff ff31 	bl	8004440 <__NVIC_EnableIRQ>
}
 80045de:	bf00      	nop
 80045e0:	3708      	adds	r7, #8
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b082      	sub	sp, #8
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7ff ffa2 	bl	8004538 <SysTick_Config>
 80045f4:	4603      	mov	r3, r0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
	...

08004600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004600:	b480      	push	{r7}
 8004602:	b089      	sub	sp, #36	; 0x24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800460a:	2300      	movs	r3, #0
 800460c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800460e:	2300      	movs	r3, #0
 8004610:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004612:	2300      	movs	r3, #0
 8004614:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004616:	2300      	movs	r3, #0
 8004618:	61fb      	str	r3, [r7, #28]
 800461a:	e177      	b.n	800490c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800461c:	2201      	movs	r2, #1
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	fa02 f303 	lsl.w	r3, r2, r3
 8004624:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	4013      	ands	r3, r2
 800462e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	429a      	cmp	r2, r3
 8004636:	f040 8166 	bne.w	8004906 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f003 0303 	and.w	r3, r3, #3
 8004642:	2b01      	cmp	r3, #1
 8004644:	d005      	beq.n	8004652 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800464e:	2b02      	cmp	r3, #2
 8004650:	d130      	bne.n	80046b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	2203      	movs	r2, #3
 800465e:	fa02 f303 	lsl.w	r3, r2, r3
 8004662:	43db      	mvns	r3, r3
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	4013      	ands	r3, r2
 8004668:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	68da      	ldr	r2, [r3, #12]
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	005b      	lsls	r3, r3, #1
 8004672:	fa02 f303 	lsl.w	r3, r2, r3
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	4313      	orrs	r3, r2
 800467a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004688:	2201      	movs	r2, #1
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	fa02 f303 	lsl.w	r3, r2, r3
 8004690:	43db      	mvns	r3, r3
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	4013      	ands	r3, r2
 8004696:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	091b      	lsrs	r3, r3, #4
 800469e:	f003 0201 	and.w	r2, r3, #1
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	fa02 f303 	lsl.w	r3, r2, r3
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f003 0303 	and.w	r3, r3, #3
 80046bc:	2b03      	cmp	r3, #3
 80046be:	d017      	beq.n	80046f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	2203      	movs	r2, #3
 80046cc:	fa02 f303 	lsl.w	r3, r2, r3
 80046d0:	43db      	mvns	r3, r3
 80046d2:	69ba      	ldr	r2, [r7, #24]
 80046d4:	4013      	ands	r3, r2
 80046d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	fa02 f303 	lsl.w	r3, r2, r3
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f003 0303 	and.w	r3, r3, #3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d123      	bne.n	8004744 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	08da      	lsrs	r2, r3, #3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3208      	adds	r2, #8
 8004704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004708:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	f003 0307 	and.w	r3, r3, #7
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	220f      	movs	r2, #15
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	43db      	mvns	r3, r3
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	4013      	ands	r3, r2
 800471e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	691a      	ldr	r2, [r3, #16]
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	f003 0307 	and.w	r3, r3, #7
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	fa02 f303 	lsl.w	r3, r2, r3
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	4313      	orrs	r3, r2
 8004734:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	08da      	lsrs	r2, r3, #3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	3208      	adds	r2, #8
 800473e:	69b9      	ldr	r1, [r7, #24]
 8004740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	2203      	movs	r2, #3
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	43db      	mvns	r3, r3
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	4013      	ands	r3, r2
 800475a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f003 0203 	and.w	r2, r3, #3
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	4313      	orrs	r3, r2
 8004770:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 80c0 	beq.w	8004906 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004786:	2300      	movs	r3, #0
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	4b66      	ldr	r3, [pc, #408]	; (8004924 <HAL_GPIO_Init+0x324>)
 800478c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800478e:	4a65      	ldr	r2, [pc, #404]	; (8004924 <HAL_GPIO_Init+0x324>)
 8004790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004794:	6453      	str	r3, [r2, #68]	; 0x44
 8004796:	4b63      	ldr	r3, [pc, #396]	; (8004924 <HAL_GPIO_Init+0x324>)
 8004798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800479e:	60fb      	str	r3, [r7, #12]
 80047a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047a2:	4a61      	ldr	r2, [pc, #388]	; (8004928 <HAL_GPIO_Init+0x328>)
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	089b      	lsrs	r3, r3, #2
 80047a8:	3302      	adds	r3, #2
 80047aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	f003 0303 	and.w	r3, r3, #3
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	220f      	movs	r2, #15
 80047ba:	fa02 f303 	lsl.w	r3, r2, r3
 80047be:	43db      	mvns	r3, r3
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	4013      	ands	r3, r2
 80047c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a58      	ldr	r2, [pc, #352]	; (800492c <HAL_GPIO_Init+0x32c>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d037      	beq.n	800483e <HAL_GPIO_Init+0x23e>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a57      	ldr	r2, [pc, #348]	; (8004930 <HAL_GPIO_Init+0x330>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d031      	beq.n	800483a <HAL_GPIO_Init+0x23a>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a56      	ldr	r2, [pc, #344]	; (8004934 <HAL_GPIO_Init+0x334>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d02b      	beq.n	8004836 <HAL_GPIO_Init+0x236>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a55      	ldr	r2, [pc, #340]	; (8004938 <HAL_GPIO_Init+0x338>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d025      	beq.n	8004832 <HAL_GPIO_Init+0x232>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a54      	ldr	r2, [pc, #336]	; (800493c <HAL_GPIO_Init+0x33c>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d01f      	beq.n	800482e <HAL_GPIO_Init+0x22e>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a53      	ldr	r2, [pc, #332]	; (8004940 <HAL_GPIO_Init+0x340>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d019      	beq.n	800482a <HAL_GPIO_Init+0x22a>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a52      	ldr	r2, [pc, #328]	; (8004944 <HAL_GPIO_Init+0x344>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d013      	beq.n	8004826 <HAL_GPIO_Init+0x226>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a51      	ldr	r2, [pc, #324]	; (8004948 <HAL_GPIO_Init+0x348>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d00d      	beq.n	8004822 <HAL_GPIO_Init+0x222>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a50      	ldr	r2, [pc, #320]	; (800494c <HAL_GPIO_Init+0x34c>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d007      	beq.n	800481e <HAL_GPIO_Init+0x21e>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a4f      	ldr	r2, [pc, #316]	; (8004950 <HAL_GPIO_Init+0x350>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d101      	bne.n	800481a <HAL_GPIO_Init+0x21a>
 8004816:	2309      	movs	r3, #9
 8004818:	e012      	b.n	8004840 <HAL_GPIO_Init+0x240>
 800481a:	230a      	movs	r3, #10
 800481c:	e010      	b.n	8004840 <HAL_GPIO_Init+0x240>
 800481e:	2308      	movs	r3, #8
 8004820:	e00e      	b.n	8004840 <HAL_GPIO_Init+0x240>
 8004822:	2307      	movs	r3, #7
 8004824:	e00c      	b.n	8004840 <HAL_GPIO_Init+0x240>
 8004826:	2306      	movs	r3, #6
 8004828:	e00a      	b.n	8004840 <HAL_GPIO_Init+0x240>
 800482a:	2305      	movs	r3, #5
 800482c:	e008      	b.n	8004840 <HAL_GPIO_Init+0x240>
 800482e:	2304      	movs	r3, #4
 8004830:	e006      	b.n	8004840 <HAL_GPIO_Init+0x240>
 8004832:	2303      	movs	r3, #3
 8004834:	e004      	b.n	8004840 <HAL_GPIO_Init+0x240>
 8004836:	2302      	movs	r3, #2
 8004838:	e002      	b.n	8004840 <HAL_GPIO_Init+0x240>
 800483a:	2301      	movs	r3, #1
 800483c:	e000      	b.n	8004840 <HAL_GPIO_Init+0x240>
 800483e:	2300      	movs	r3, #0
 8004840:	69fa      	ldr	r2, [r7, #28]
 8004842:	f002 0203 	and.w	r2, r2, #3
 8004846:	0092      	lsls	r2, r2, #2
 8004848:	4093      	lsls	r3, r2
 800484a:	69ba      	ldr	r2, [r7, #24]
 800484c:	4313      	orrs	r3, r2
 800484e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004850:	4935      	ldr	r1, [pc, #212]	; (8004928 <HAL_GPIO_Init+0x328>)
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	089b      	lsrs	r3, r3, #2
 8004856:	3302      	adds	r3, #2
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800485e:	4b3d      	ldr	r3, [pc, #244]	; (8004954 <HAL_GPIO_Init+0x354>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	43db      	mvns	r3, r3
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	4013      	ands	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	4313      	orrs	r3, r2
 8004880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004882:	4a34      	ldr	r2, [pc, #208]	; (8004954 <HAL_GPIO_Init+0x354>)
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004888:	4b32      	ldr	r3, [pc, #200]	; (8004954 <HAL_GPIO_Init+0x354>)
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	43db      	mvns	r3, r3
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	4013      	ands	r3, r2
 8004896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048ac:	4a29      	ldr	r2, [pc, #164]	; (8004954 <HAL_GPIO_Init+0x354>)
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048b2:	4b28      	ldr	r3, [pc, #160]	; (8004954 <HAL_GPIO_Init+0x354>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	43db      	mvns	r3, r3
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	4013      	ands	r3, r2
 80048c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048d6:	4a1f      	ldr	r2, [pc, #124]	; (8004954 <HAL_GPIO_Init+0x354>)
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048dc:	4b1d      	ldr	r3, [pc, #116]	; (8004954 <HAL_GPIO_Init+0x354>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	43db      	mvns	r3, r3
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	4013      	ands	r3, r2
 80048ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004900:	4a14      	ldr	r2, [pc, #80]	; (8004954 <HAL_GPIO_Init+0x354>)
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	3301      	adds	r3, #1
 800490a:	61fb      	str	r3, [r7, #28]
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	2b0f      	cmp	r3, #15
 8004910:	f67f ae84 	bls.w	800461c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004914:	bf00      	nop
 8004916:	bf00      	nop
 8004918:	3724      	adds	r7, #36	; 0x24
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	40023800 	.word	0x40023800
 8004928:	40013800 	.word	0x40013800
 800492c:	40020000 	.word	0x40020000
 8004930:	40020400 	.word	0x40020400
 8004934:	40020800 	.word	0x40020800
 8004938:	40020c00 	.word	0x40020c00
 800493c:	40021000 	.word	0x40021000
 8004940:	40021400 	.word	0x40021400
 8004944:	40021800 	.word	0x40021800
 8004948:	40021c00 	.word	0x40021c00
 800494c:	40022000 	.word	0x40022000
 8004950:	40022400 	.word	0x40022400
 8004954:	40013c00 	.word	0x40013c00

08004958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	460b      	mov	r3, r1
 8004962:	807b      	strh	r3, [r7, #2]
 8004964:	4613      	mov	r3, r2
 8004966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004968:	787b      	ldrb	r3, [r7, #1]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800496e:	887a      	ldrh	r2, [r7, #2]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004974:	e003      	b.n	800497e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004976:	887b      	ldrh	r3, [r7, #2]
 8004978:	041a      	lsls	r2, r3, #16
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	619a      	str	r2, [r3, #24]
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800498a:	b480      	push	{r7}
 800498c:	b085      	sub	sp, #20
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	460b      	mov	r3, r1
 8004994:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800499c:	887a      	ldrh	r2, [r7, #2]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	4013      	ands	r3, r2
 80049a2:	041a      	lsls	r2, r3, #16
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	43d9      	mvns	r1, r3
 80049a8:	887b      	ldrh	r3, [r7, #2]
 80049aa:	400b      	ands	r3, r1
 80049ac:	431a      	orrs	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	619a      	str	r2, [r3, #24]
}
 80049b2:	bf00      	nop
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
	...

080049c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	4603      	mov	r3, r0
 80049c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80049ca:	4b08      	ldr	r3, [pc, #32]	; (80049ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049cc:	695a      	ldr	r2, [r3, #20]
 80049ce:	88fb      	ldrh	r3, [r7, #6]
 80049d0:	4013      	ands	r3, r2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d006      	beq.n	80049e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049d6:	4a05      	ldr	r2, [pc, #20]	; (80049ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049d8:	88fb      	ldrh	r3, [r7, #6]
 80049da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80049dc:	88fb      	ldrh	r3, [r7, #6]
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fc ff00 	bl	80017e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80049e4:	bf00      	nop
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	40013c00 	.word	0x40013c00

080049f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e12b      	b.n	8004c5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d106      	bne.n	8004a1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7fd ff70 	bl	80028fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2224      	movs	r2, #36	; 0x24
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0201 	bic.w	r2, r2, #1
 8004a32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a54:	f001 fa32 	bl	8005ebc <HAL_RCC_GetPCLK1Freq>
 8004a58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	4a81      	ldr	r2, [pc, #516]	; (8004c64 <HAL_I2C_Init+0x274>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d807      	bhi.n	8004a74 <HAL_I2C_Init+0x84>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4a80      	ldr	r2, [pc, #512]	; (8004c68 <HAL_I2C_Init+0x278>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	bf94      	ite	ls
 8004a6c:	2301      	movls	r3, #1
 8004a6e:	2300      	movhi	r3, #0
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	e006      	b.n	8004a82 <HAL_I2C_Init+0x92>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4a7d      	ldr	r2, [pc, #500]	; (8004c6c <HAL_I2C_Init+0x27c>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	bf94      	ite	ls
 8004a7c:	2301      	movls	r3, #1
 8004a7e:	2300      	movhi	r3, #0
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e0e7      	b.n	8004c5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4a78      	ldr	r2, [pc, #480]	; (8004c70 <HAL_I2C_Init+0x280>)
 8004a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a92:	0c9b      	lsrs	r3, r3, #18
 8004a94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	4a6a      	ldr	r2, [pc, #424]	; (8004c64 <HAL_I2C_Init+0x274>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d802      	bhi.n	8004ac4 <HAL_I2C_Init+0xd4>
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	e009      	b.n	8004ad8 <HAL_I2C_Init+0xe8>
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004aca:	fb02 f303 	mul.w	r3, r2, r3
 8004ace:	4a69      	ldr	r2, [pc, #420]	; (8004c74 <HAL_I2C_Init+0x284>)
 8004ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad4:	099b      	lsrs	r3, r3, #6
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6812      	ldr	r2, [r2, #0]
 8004adc:	430b      	orrs	r3, r1
 8004ade:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004aea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	495c      	ldr	r1, [pc, #368]	; (8004c64 <HAL_I2C_Init+0x274>)
 8004af4:	428b      	cmp	r3, r1
 8004af6:	d819      	bhi.n	8004b2c <HAL_I2C_Init+0x13c>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	1e59      	subs	r1, r3, #1
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b06:	1c59      	adds	r1, r3, #1
 8004b08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b0c:	400b      	ands	r3, r1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <HAL_I2C_Init+0x138>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	1e59      	subs	r1, r3, #1
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b20:	3301      	adds	r3, #1
 8004b22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b26:	e051      	b.n	8004bcc <HAL_I2C_Init+0x1dc>
 8004b28:	2304      	movs	r3, #4
 8004b2a:	e04f      	b.n	8004bcc <HAL_I2C_Init+0x1dc>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d111      	bne.n	8004b58 <HAL_I2C_Init+0x168>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	1e58      	subs	r0, r3, #1
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6859      	ldr	r1, [r3, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	005b      	lsls	r3, r3, #1
 8004b40:	440b      	add	r3, r1
 8004b42:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b46:	3301      	adds	r3, #1
 8004b48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	bf0c      	ite	eq
 8004b50:	2301      	moveq	r3, #1
 8004b52:	2300      	movne	r3, #0
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	e012      	b.n	8004b7e <HAL_I2C_Init+0x18e>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	1e58      	subs	r0, r3, #1
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6859      	ldr	r1, [r3, #4]
 8004b60:	460b      	mov	r3, r1
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	440b      	add	r3, r1
 8004b66:	0099      	lsls	r1, r3, #2
 8004b68:	440b      	add	r3, r1
 8004b6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b6e:	3301      	adds	r3, #1
 8004b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	bf0c      	ite	eq
 8004b78:	2301      	moveq	r3, #1
 8004b7a:	2300      	movne	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <HAL_I2C_Init+0x196>
 8004b82:	2301      	movs	r3, #1
 8004b84:	e022      	b.n	8004bcc <HAL_I2C_Init+0x1dc>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10e      	bne.n	8004bac <HAL_I2C_Init+0x1bc>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	1e58      	subs	r0, r3, #1
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6859      	ldr	r1, [r3, #4]
 8004b96:	460b      	mov	r3, r1
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	440b      	add	r3, r1
 8004b9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004baa:	e00f      	b.n	8004bcc <HAL_I2C_Init+0x1dc>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	1e58      	subs	r0, r3, #1
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6859      	ldr	r1, [r3, #4]
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	440b      	add	r3, r1
 8004bba:	0099      	lsls	r1, r3, #2
 8004bbc:	440b      	add	r3, r1
 8004bbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bcc:	6879      	ldr	r1, [r7, #4]
 8004bce:	6809      	ldr	r1, [r1, #0]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	69da      	ldr	r2, [r3, #28]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004bfa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6911      	ldr	r1, [r2, #16]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	68d2      	ldr	r2, [r2, #12]
 8004c06:	4311      	orrs	r1, r2
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6812      	ldr	r2, [r2, #0]
 8004c0c:	430b      	orrs	r3, r1
 8004c0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	695a      	ldr	r2, [r3, #20]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0201 	orr.w	r2, r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2220      	movs	r2, #32
 8004c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	000186a0 	.word	0x000186a0
 8004c68:	001e847f 	.word	0x001e847f
 8004c6c:	003d08ff 	.word	0x003d08ff
 8004c70:	431bde83 	.word	0x431bde83
 8004c74:	10624dd3 	.word	0x10624dd3

08004c78 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b08c      	sub	sp, #48	; 0x30
 8004c7c:	af02      	add	r7, sp, #8
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	607a      	str	r2, [r7, #4]
 8004c82:	461a      	mov	r2, r3
 8004c84:	460b      	mov	r3, r1
 8004c86:	817b      	strh	r3, [r7, #10]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c8c:	f7fe f8ee 	bl	8002e6c <HAL_GetTick>
 8004c90:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b20      	cmp	r3, #32
 8004c9c:	f040 8217 	bne.w	80050ce <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	2319      	movs	r3, #25
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	497c      	ldr	r1, [pc, #496]	; (8004e9c <HAL_I2C_Master_Receive+0x224>)
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 fae4 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	e20a      	b.n	80050d0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d101      	bne.n	8004cc8 <HAL_I2C_Master_Receive+0x50>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e203      	b.n	80050d0 <HAL_I2C_Master_Receive+0x458>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d007      	beq.n	8004cee <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f042 0201 	orr.w	r2, r2, #1
 8004cec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cfc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2222      	movs	r2, #34	; 0x22
 8004d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2210      	movs	r2, #16
 8004d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	893a      	ldrh	r2, [r7, #8]
 8004d1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	4a5c      	ldr	r2, [pc, #368]	; (8004ea0 <HAL_I2C_Master_Receive+0x228>)
 8004d2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004d30:	8979      	ldrh	r1, [r7, #10]
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 f9d0 	bl	80050dc <I2C_MasterRequestRead>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e1c4      	b.n	80050d0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d113      	bne.n	8004d76 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d4e:	2300      	movs	r3, #0
 8004d50:	623b      	str	r3, [r7, #32]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	623b      	str	r3, [r7, #32]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	623b      	str	r3, [r7, #32]
 8004d62:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	e198      	b.n	80050a8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d11b      	bne.n	8004db6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d8e:	2300      	movs	r3, #0
 8004d90:	61fb      	str	r3, [r7, #28]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	61fb      	str	r3, [r7, #28]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	61fb      	str	r3, [r7, #28]
 8004da2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	e178      	b.n	80050a8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d11b      	bne.n	8004df6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dcc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ddc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dde:	2300      	movs	r3, #0
 8004de0:	61bb      	str	r3, [r7, #24]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	61bb      	str	r3, [r7, #24]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	61bb      	str	r3, [r7, #24]
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	e158      	b.n	80050a8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e06:	2300      	movs	r3, #0
 8004e08:	617b      	str	r3, [r7, #20]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	617b      	str	r3, [r7, #20]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	617b      	str	r3, [r7, #20]
 8004e1a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004e1c:	e144      	b.n	80050a8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e22:	2b03      	cmp	r3, #3
 8004e24:	f200 80f1 	bhi.w	800500a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d123      	bne.n	8004e78 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f000 fb39 	bl	80054ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d001      	beq.n	8004e44 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e145      	b.n	80050d0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	691a      	ldr	r2, [r3, #16]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4e:	b2d2      	uxtb	r2, r2
 8004e50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e76:	e117      	b.n	80050a8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d14e      	bne.n	8004f1e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e86:	2200      	movs	r2, #0
 8004e88:	4906      	ldr	r1, [pc, #24]	; (8004ea4 <HAL_I2C_Master_Receive+0x22c>)
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 f9f4 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d008      	beq.n	8004ea8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e11a      	b.n	80050d0 <HAL_I2C_Master_Receive+0x458>
 8004e9a:	bf00      	nop
 8004e9c:	00100002 	.word	0x00100002
 8004ea0:	ffff0000 	.word	0xffff0000
 8004ea4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	691a      	ldr	r2, [r3, #16]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec2:	b2d2      	uxtb	r2, r2
 8004ec4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	b2d2      	uxtb	r2, r2
 8004ef6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f06:	3b01      	subs	r3, #1
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	3b01      	subs	r3, #1
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f1c:	e0c4      	b.n	80050a8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f24:	2200      	movs	r2, #0
 8004f26:	496c      	ldr	r1, [pc, #432]	; (80050d8 <HAL_I2C_Master_Receive+0x460>)
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f000 f9a5 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e0cb      	b.n	80050d0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	691a      	ldr	r2, [r3, #16]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	b2d2      	uxtb	r2, r2
 8004f54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	1c5a      	adds	r2, r3, #1
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	3b01      	subs	r3, #1
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f80:	2200      	movs	r2, #0
 8004f82:	4955      	ldr	r1, [pc, #340]	; (80050d8 <HAL_I2C_Master_Receive+0x460>)
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 f977 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d001      	beq.n	8004f94 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e09d      	b.n	80050d0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fa2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	691a      	ldr	r2, [r3, #16]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fae:	b2d2      	uxtb	r2, r2
 8004fb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	1c5a      	adds	r2, r3, #1
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	691a      	ldr	r2, [r3, #16]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	b2d2      	uxtb	r2, r2
 8004fe2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	1c5a      	adds	r2, r3, #1
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	3b01      	subs	r3, #1
 8005002:	b29a      	uxth	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005008:	e04e      	b.n	80050a8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800500a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800500c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f000 fa4c 	bl	80054ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e058      	b.n	80050d0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	691a      	ldr	r2, [r3, #16]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	b2d2      	uxtb	r2, r2
 800502a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	1c5a      	adds	r2, r3, #1
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800503a:	3b01      	subs	r3, #1
 800503c:	b29a      	uxth	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005046:	b29b      	uxth	r3, r3
 8005048:	3b01      	subs	r3, #1
 800504a:	b29a      	uxth	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	f003 0304 	and.w	r3, r3, #4
 800505a:	2b04      	cmp	r3, #4
 800505c:	d124      	bne.n	80050a8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005062:	2b03      	cmp	r3, #3
 8005064:	d107      	bne.n	8005076 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005074:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	691a      	ldr	r2, [r3, #16]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005080:	b2d2      	uxtb	r2, r2
 8005082:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005092:	3b01      	subs	r3, #1
 8005094:	b29a      	uxth	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509e:	b29b      	uxth	r3, r3
 80050a0:	3b01      	subs	r3, #1
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f47f aeb6 	bne.w	8004e1e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2220      	movs	r2, #32
 80050b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80050ca:	2300      	movs	r3, #0
 80050cc:	e000      	b.n	80050d0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80050ce:	2302      	movs	r3, #2
  }
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3728      	adds	r7, #40	; 0x28
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	00010004 	.word	0x00010004

080050dc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b088      	sub	sp, #32
 80050e0:	af02      	add	r7, sp, #8
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	607a      	str	r2, [r7, #4]
 80050e6:	603b      	str	r3, [r7, #0]
 80050e8:	460b      	mov	r3, r1
 80050ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005100:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	2b08      	cmp	r3, #8
 8005106:	d006      	beq.n	8005116 <I2C_MasterRequestRead+0x3a>
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d003      	beq.n	8005116 <I2C_MasterRequestRead+0x3a>
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005114:	d108      	bne.n	8005128 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	e00b      	b.n	8005140 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512c:	2b11      	cmp	r3, #17
 800512e:	d107      	bne.n	8005140 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800513e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f000 f893 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00d      	beq.n	8005174 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005166:	d103      	bne.n	8005170 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800516e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e079      	b.n	8005268 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800517c:	d108      	bne.n	8005190 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800517e:	897b      	ldrh	r3, [r7, #10]
 8005180:	b2db      	uxtb	r3, r3
 8005182:	f043 0301 	orr.w	r3, r3, #1
 8005186:	b2da      	uxtb	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	611a      	str	r2, [r3, #16]
 800518e:	e05f      	b.n	8005250 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005190:	897b      	ldrh	r3, [r7, #10]
 8005192:	11db      	asrs	r3, r3, #7
 8005194:	b2db      	uxtb	r3, r3
 8005196:	f003 0306 	and.w	r3, r3, #6
 800519a:	b2db      	uxtb	r3, r3
 800519c:	f063 030f 	orn	r3, r3, #15
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	4930      	ldr	r1, [pc, #192]	; (8005270 <I2C_MasterRequestRead+0x194>)
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f000 f8dc 	bl	800536c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e054      	b.n	8005268 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80051be:	897b      	ldrh	r3, [r7, #10]
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	4929      	ldr	r1, [pc, #164]	; (8005274 <I2C_MasterRequestRead+0x198>)
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f000 f8cc 	bl	800536c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e044      	b.n	8005268 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051de:	2300      	movs	r3, #0
 80051e0:	613b      	str	r3, [r7, #16]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	695b      	ldr	r3, [r3, #20]
 80051e8:	613b      	str	r3, [r7, #16]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	613b      	str	r3, [r7, #16]
 80051f2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005202:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	9300      	str	r3, [sp, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 f831 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00d      	beq.n	8005238 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800522a:	d103      	bne.n	8005234 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005232:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e017      	b.n	8005268 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005238:	897b      	ldrh	r3, [r7, #10]
 800523a:	11db      	asrs	r3, r3, #7
 800523c:	b2db      	uxtb	r3, r3
 800523e:	f003 0306 	and.w	r3, r3, #6
 8005242:	b2db      	uxtb	r3, r3
 8005244:	f063 030e 	orn	r3, r3, #14
 8005248:	b2da      	uxtb	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	4907      	ldr	r1, [pc, #28]	; (8005274 <I2C_MasterRequestRead+0x198>)
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 f888 	bl	800536c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e000      	b.n	8005268 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3718      	adds	r7, #24
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	00010008 	.word	0x00010008
 8005274:	00010002 	.word	0x00010002

08005278 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	603b      	str	r3, [r7, #0]
 8005284:	4613      	mov	r3, r2
 8005286:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005288:	e048      	b.n	800531c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005290:	d044      	beq.n	800531c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005292:	f7fd fdeb 	bl	8002e6c <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d302      	bcc.n	80052a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d139      	bne.n	800531c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	0c1b      	lsrs	r3, r3, #16
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d10d      	bne.n	80052ce <I2C_WaitOnFlagUntilTimeout+0x56>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	43da      	mvns	r2, r3
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	4013      	ands	r3, r2
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	bf0c      	ite	eq
 80052c4:	2301      	moveq	r3, #1
 80052c6:	2300      	movne	r3, #0
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	461a      	mov	r2, r3
 80052cc:	e00c      	b.n	80052e8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	43da      	mvns	r2, r3
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	4013      	ands	r3, r2
 80052da:	b29b      	uxth	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	bf0c      	ite	eq
 80052e0:	2301      	moveq	r3, #1
 80052e2:	2300      	movne	r3, #0
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	461a      	mov	r2, r3
 80052e8:	79fb      	ldrb	r3, [r7, #7]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d116      	bne.n	800531c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005308:	f043 0220 	orr.w	r2, r3, #32
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e023      	b.n	8005364 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	0c1b      	lsrs	r3, r3, #16
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b01      	cmp	r3, #1
 8005324:	d10d      	bne.n	8005342 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	43da      	mvns	r2, r3
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	4013      	ands	r3, r2
 8005332:	b29b      	uxth	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	bf0c      	ite	eq
 8005338:	2301      	moveq	r3, #1
 800533a:	2300      	movne	r3, #0
 800533c:	b2db      	uxtb	r3, r3
 800533e:	461a      	mov	r2, r3
 8005340:	e00c      	b.n	800535c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	43da      	mvns	r2, r3
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	4013      	ands	r3, r2
 800534e:	b29b      	uxth	r3, r3
 8005350:	2b00      	cmp	r3, #0
 8005352:	bf0c      	ite	eq
 8005354:	2301      	moveq	r3, #1
 8005356:	2300      	movne	r3, #0
 8005358:	b2db      	uxtb	r3, r3
 800535a:	461a      	mov	r2, r3
 800535c:	79fb      	ldrb	r3, [r7, #7]
 800535e:	429a      	cmp	r2, r3
 8005360:	d093      	beq.n	800528a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800537a:	e071      	b.n	8005460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800538a:	d123      	bne.n	80053d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800539a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2220      	movs	r2, #32
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c0:	f043 0204 	orr.w	r2, r3, #4
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e067      	b.n	80054a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053da:	d041      	beq.n	8005460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053dc:	f7fd fd46 	bl	8002e6c <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d302      	bcc.n	80053f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d136      	bne.n	8005460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	0c1b      	lsrs	r3, r3, #16
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d10c      	bne.n	8005416 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	43da      	mvns	r2, r3
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	4013      	ands	r3, r2
 8005408:	b29b      	uxth	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	bf14      	ite	ne
 800540e:	2301      	movne	r3, #1
 8005410:	2300      	moveq	r3, #0
 8005412:	b2db      	uxtb	r3, r3
 8005414:	e00b      	b.n	800542e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	43da      	mvns	r2, r3
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	4013      	ands	r3, r2
 8005422:	b29b      	uxth	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	bf14      	ite	ne
 8005428:	2301      	movne	r3, #1
 800542a:	2300      	moveq	r3, #0
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d016      	beq.n	8005460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2220      	movs	r2, #32
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544c:	f043 0220 	orr.w	r2, r3, #32
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e021      	b.n	80054a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	0c1b      	lsrs	r3, r3, #16
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b01      	cmp	r3, #1
 8005468:	d10c      	bne.n	8005484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	43da      	mvns	r2, r3
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	4013      	ands	r3, r2
 8005476:	b29b      	uxth	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	bf14      	ite	ne
 800547c:	2301      	movne	r3, #1
 800547e:	2300      	moveq	r3, #0
 8005480:	b2db      	uxtb	r3, r3
 8005482:	e00b      	b.n	800549c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	43da      	mvns	r2, r3
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	4013      	ands	r3, r2
 8005490:	b29b      	uxth	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	bf14      	ite	ne
 8005496:	2301      	movne	r3, #1
 8005498:	2300      	moveq	r3, #0
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	f47f af6d 	bne.w	800537c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054b8:	e049      	b.n	800554e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	f003 0310 	and.w	r3, r3, #16
 80054c4:	2b10      	cmp	r3, #16
 80054c6:	d119      	bne.n	80054fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f06f 0210 	mvn.w	r2, #16
 80054d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2220      	movs	r2, #32
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e030      	b.n	800555e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054fc:	f7fd fcb6 	bl	8002e6c <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	429a      	cmp	r2, r3
 800550a:	d302      	bcc.n	8005512 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d11d      	bne.n	800554e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551c:	2b40      	cmp	r3, #64	; 0x40
 800551e:	d016      	beq.n	800554e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2220      	movs	r2, #32
 800552a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	f043 0220 	orr.w	r2, r3, #32
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e007      	b.n	800555e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005558:	2b40      	cmp	r3, #64	; 0x40
 800555a:	d1ae      	bne.n	80054ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005566:	b480      	push	{r7}
 8005568:	b083      	sub	sp, #12
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b20      	cmp	r3, #32
 800557a:	d129      	bne.n	80055d0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2224      	movs	r2, #36	; 0x24
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f022 0201 	bic.w	r2, r2, #1
 8005592:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f022 0210 	bic.w	r2, r2, #16
 80055a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	683a      	ldr	r2, [r7, #0]
 80055b0:	430a      	orrs	r2, r1
 80055b2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f042 0201 	orr.w	r2, r2, #1
 80055c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	e000      	b.n	80055d2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80055d0:	2302      	movs	r3, #2
  }
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	370c      	adds	r7, #12
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80055de:	b480      	push	{r7}
 80055e0:	b085      	sub	sp, #20
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
 80055e6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80055e8:	2300      	movs	r3, #0
 80055ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b20      	cmp	r3, #32
 80055f6:	d12a      	bne.n	800564e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2224      	movs	r2, #36	; 0x24
 80055fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 0201 	bic.w	r2, r2, #1
 800560e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005616:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005618:	89fb      	ldrh	r3, [r7, #14]
 800561a:	f023 030f 	bic.w	r3, r3, #15
 800561e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	b29a      	uxth	r2, r3
 8005624:	89fb      	ldrh	r3, [r7, #14]
 8005626:	4313      	orrs	r3, r2
 8005628:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	89fa      	ldrh	r2, [r7, #14]
 8005630:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f042 0201 	orr.w	r2, r2, #1
 8005640:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2220      	movs	r2, #32
 8005646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800564a:	2300      	movs	r3, #0
 800564c:	e000      	b.n	8005650 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800564e:	2302      	movs	r3, #2
  }
}
 8005650:	4618      	mov	r0, r3
 8005652:	3714      	adds	r7, #20
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d101      	bne.n	800566e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e267      	b.n	8005b3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b00      	cmp	r3, #0
 8005678:	d075      	beq.n	8005766 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800567a:	4b88      	ldr	r3, [pc, #544]	; (800589c <HAL_RCC_OscConfig+0x240>)
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f003 030c 	and.w	r3, r3, #12
 8005682:	2b04      	cmp	r3, #4
 8005684:	d00c      	beq.n	80056a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005686:	4b85      	ldr	r3, [pc, #532]	; (800589c <HAL_RCC_OscConfig+0x240>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800568e:	2b08      	cmp	r3, #8
 8005690:	d112      	bne.n	80056b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005692:	4b82      	ldr	r3, [pc, #520]	; (800589c <HAL_RCC_OscConfig+0x240>)
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800569a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800569e:	d10b      	bne.n	80056b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056a0:	4b7e      	ldr	r3, [pc, #504]	; (800589c <HAL_RCC_OscConfig+0x240>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d05b      	beq.n	8005764 <HAL_RCC_OscConfig+0x108>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d157      	bne.n	8005764 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e242      	b.n	8005b3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056c0:	d106      	bne.n	80056d0 <HAL_RCC_OscConfig+0x74>
 80056c2:	4b76      	ldr	r3, [pc, #472]	; (800589c <HAL_RCC_OscConfig+0x240>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a75      	ldr	r2, [pc, #468]	; (800589c <HAL_RCC_OscConfig+0x240>)
 80056c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056cc:	6013      	str	r3, [r2, #0]
 80056ce:	e01d      	b.n	800570c <HAL_RCC_OscConfig+0xb0>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056d8:	d10c      	bne.n	80056f4 <HAL_RCC_OscConfig+0x98>
 80056da:	4b70      	ldr	r3, [pc, #448]	; (800589c <HAL_RCC_OscConfig+0x240>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a6f      	ldr	r2, [pc, #444]	; (800589c <HAL_RCC_OscConfig+0x240>)
 80056e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056e4:	6013      	str	r3, [r2, #0]
 80056e6:	4b6d      	ldr	r3, [pc, #436]	; (800589c <HAL_RCC_OscConfig+0x240>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a6c      	ldr	r2, [pc, #432]	; (800589c <HAL_RCC_OscConfig+0x240>)
 80056ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056f0:	6013      	str	r3, [r2, #0]
 80056f2:	e00b      	b.n	800570c <HAL_RCC_OscConfig+0xb0>
 80056f4:	4b69      	ldr	r3, [pc, #420]	; (800589c <HAL_RCC_OscConfig+0x240>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a68      	ldr	r2, [pc, #416]	; (800589c <HAL_RCC_OscConfig+0x240>)
 80056fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056fe:	6013      	str	r3, [r2, #0]
 8005700:	4b66      	ldr	r3, [pc, #408]	; (800589c <HAL_RCC_OscConfig+0x240>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a65      	ldr	r2, [pc, #404]	; (800589c <HAL_RCC_OscConfig+0x240>)
 8005706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800570a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d013      	beq.n	800573c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005714:	f7fd fbaa 	bl	8002e6c <HAL_GetTick>
 8005718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800571a:	e008      	b.n	800572e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800571c:	f7fd fba6 	bl	8002e6c <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	2b64      	cmp	r3, #100	; 0x64
 8005728:	d901      	bls.n	800572e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e207      	b.n	8005b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800572e:	4b5b      	ldr	r3, [pc, #364]	; (800589c <HAL_RCC_OscConfig+0x240>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d0f0      	beq.n	800571c <HAL_RCC_OscConfig+0xc0>
 800573a:	e014      	b.n	8005766 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800573c:	f7fd fb96 	bl	8002e6c <HAL_GetTick>
 8005740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005742:	e008      	b.n	8005756 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005744:	f7fd fb92 	bl	8002e6c <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b64      	cmp	r3, #100	; 0x64
 8005750:	d901      	bls.n	8005756 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e1f3      	b.n	8005b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005756:	4b51      	ldr	r3, [pc, #324]	; (800589c <HAL_RCC_OscConfig+0x240>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1f0      	bne.n	8005744 <HAL_RCC_OscConfig+0xe8>
 8005762:	e000      	b.n	8005766 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d063      	beq.n	800583a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005772:	4b4a      	ldr	r3, [pc, #296]	; (800589c <HAL_RCC_OscConfig+0x240>)
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f003 030c 	and.w	r3, r3, #12
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00b      	beq.n	8005796 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800577e:	4b47      	ldr	r3, [pc, #284]	; (800589c <HAL_RCC_OscConfig+0x240>)
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005786:	2b08      	cmp	r3, #8
 8005788:	d11c      	bne.n	80057c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800578a:	4b44      	ldr	r3, [pc, #272]	; (800589c <HAL_RCC_OscConfig+0x240>)
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d116      	bne.n	80057c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005796:	4b41      	ldr	r3, [pc, #260]	; (800589c <HAL_RCC_OscConfig+0x240>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d005      	beq.n	80057ae <HAL_RCC_OscConfig+0x152>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d001      	beq.n	80057ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e1c7      	b.n	8005b3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057ae:	4b3b      	ldr	r3, [pc, #236]	; (800589c <HAL_RCC_OscConfig+0x240>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	00db      	lsls	r3, r3, #3
 80057bc:	4937      	ldr	r1, [pc, #220]	; (800589c <HAL_RCC_OscConfig+0x240>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057c2:	e03a      	b.n	800583a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d020      	beq.n	800580e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057cc:	4b34      	ldr	r3, [pc, #208]	; (80058a0 <HAL_RCC_OscConfig+0x244>)
 80057ce:	2201      	movs	r2, #1
 80057d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d2:	f7fd fb4b 	bl	8002e6c <HAL_GetTick>
 80057d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057d8:	e008      	b.n	80057ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057da:	f7fd fb47 	bl	8002e6c <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d901      	bls.n	80057ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e1a8      	b.n	8005b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057ec:	4b2b      	ldr	r3, [pc, #172]	; (800589c <HAL_RCC_OscConfig+0x240>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0302 	and.w	r3, r3, #2
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d0f0      	beq.n	80057da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057f8:	4b28      	ldr	r3, [pc, #160]	; (800589c <HAL_RCC_OscConfig+0x240>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	00db      	lsls	r3, r3, #3
 8005806:	4925      	ldr	r1, [pc, #148]	; (800589c <HAL_RCC_OscConfig+0x240>)
 8005808:	4313      	orrs	r3, r2
 800580a:	600b      	str	r3, [r1, #0]
 800580c:	e015      	b.n	800583a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800580e:	4b24      	ldr	r3, [pc, #144]	; (80058a0 <HAL_RCC_OscConfig+0x244>)
 8005810:	2200      	movs	r2, #0
 8005812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005814:	f7fd fb2a 	bl	8002e6c <HAL_GetTick>
 8005818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800581a:	e008      	b.n	800582e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800581c:	f7fd fb26 	bl	8002e6c <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b02      	cmp	r3, #2
 8005828:	d901      	bls.n	800582e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e187      	b.n	8005b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800582e:	4b1b      	ldr	r3, [pc, #108]	; (800589c <HAL_RCC_OscConfig+0x240>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1f0      	bne.n	800581c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0308 	and.w	r3, r3, #8
 8005842:	2b00      	cmp	r3, #0
 8005844:	d036      	beq.n	80058b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d016      	beq.n	800587c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800584e:	4b15      	ldr	r3, [pc, #84]	; (80058a4 <HAL_RCC_OscConfig+0x248>)
 8005850:	2201      	movs	r2, #1
 8005852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005854:	f7fd fb0a 	bl	8002e6c <HAL_GetTick>
 8005858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800585a:	e008      	b.n	800586e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800585c:	f7fd fb06 	bl	8002e6c <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	2b02      	cmp	r3, #2
 8005868:	d901      	bls.n	800586e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e167      	b.n	8005b3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800586e:	4b0b      	ldr	r3, [pc, #44]	; (800589c <HAL_RCC_OscConfig+0x240>)
 8005870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005872:	f003 0302 	and.w	r3, r3, #2
 8005876:	2b00      	cmp	r3, #0
 8005878:	d0f0      	beq.n	800585c <HAL_RCC_OscConfig+0x200>
 800587a:	e01b      	b.n	80058b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800587c:	4b09      	ldr	r3, [pc, #36]	; (80058a4 <HAL_RCC_OscConfig+0x248>)
 800587e:	2200      	movs	r2, #0
 8005880:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005882:	f7fd faf3 	bl	8002e6c <HAL_GetTick>
 8005886:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005888:	e00e      	b.n	80058a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800588a:	f7fd faef 	bl	8002e6c <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d907      	bls.n	80058a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e150      	b.n	8005b3e <HAL_RCC_OscConfig+0x4e2>
 800589c:	40023800 	.word	0x40023800
 80058a0:	42470000 	.word	0x42470000
 80058a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058a8:	4b88      	ldr	r3, [pc, #544]	; (8005acc <HAL_RCC_OscConfig+0x470>)
 80058aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1ea      	bne.n	800588a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0304 	and.w	r3, r3, #4
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 8097 	beq.w	80059f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058c2:	2300      	movs	r3, #0
 80058c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058c6:	4b81      	ldr	r3, [pc, #516]	; (8005acc <HAL_RCC_OscConfig+0x470>)
 80058c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10f      	bne.n	80058f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058d2:	2300      	movs	r3, #0
 80058d4:	60bb      	str	r3, [r7, #8]
 80058d6:	4b7d      	ldr	r3, [pc, #500]	; (8005acc <HAL_RCC_OscConfig+0x470>)
 80058d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058da:	4a7c      	ldr	r2, [pc, #496]	; (8005acc <HAL_RCC_OscConfig+0x470>)
 80058dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058e0:	6413      	str	r3, [r2, #64]	; 0x40
 80058e2:	4b7a      	ldr	r3, [pc, #488]	; (8005acc <HAL_RCC_OscConfig+0x470>)
 80058e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ea:	60bb      	str	r3, [r7, #8]
 80058ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058ee:	2301      	movs	r3, #1
 80058f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058f2:	4b77      	ldr	r3, [pc, #476]	; (8005ad0 <HAL_RCC_OscConfig+0x474>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d118      	bne.n	8005930 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058fe:	4b74      	ldr	r3, [pc, #464]	; (8005ad0 <HAL_RCC_OscConfig+0x474>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a73      	ldr	r2, [pc, #460]	; (8005ad0 <HAL_RCC_OscConfig+0x474>)
 8005904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005908:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800590a:	f7fd faaf 	bl	8002e6c <HAL_GetTick>
 800590e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005910:	e008      	b.n	8005924 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005912:	f7fd faab 	bl	8002e6c <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	2b02      	cmp	r3, #2
 800591e:	d901      	bls.n	8005924 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	e10c      	b.n	8005b3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005924:	4b6a      	ldr	r3, [pc, #424]	; (8005ad0 <HAL_RCC_OscConfig+0x474>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592c:	2b00      	cmp	r3, #0
 800592e:	d0f0      	beq.n	8005912 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d106      	bne.n	8005946 <HAL_RCC_OscConfig+0x2ea>
 8005938:	4b64      	ldr	r3, [pc, #400]	; (8005acc <HAL_RCC_OscConfig+0x470>)
 800593a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800593c:	4a63      	ldr	r2, [pc, #396]	; (8005acc <HAL_RCC_OscConfig+0x470>)
 800593e:	f043 0301 	orr.w	r3, r3, #1
 8005942:	6713      	str	r3, [r2, #112]	; 0x70
 8005944:	e01c      	b.n	8005980 <HAL_RCC_OscConfig+0x324>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	2b05      	cmp	r3, #5
 800594c:	d10c      	bne.n	8005968 <HAL_RCC_OscConfig+0x30c>
 800594e:	4b5f      	ldr	r3, [pc, #380]	; (8005acc <HAL_RCC_OscConfig+0x470>)
 8005950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005952:	4a5e      	ldr	r2, [pc, #376]	; (8005acc <HAL_RCC_OscConfig+0x470>)
 8005954:	f043 0304 	orr.w	r3, r3, #4
 8005958:	6713      	str	r3, [r2, #112]	; 0x70
 800595a:	4b5c      	ldr	r3, [pc, #368]	; (8005acc <HAL_RCC_OscConfig+0x470>)
 800595c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800595e:	4a5b      	ldr	r2, [pc, #364]	; (8005acc <HAL_RCC_OscConfig+0x470>)
 8005960:	f043 0301 	orr.w	r3, r3, #1
 8005964:	6713      	str	r3, [r2, #112]	; 0x70
 8005966:	e00b      	b.n	8005980 <HAL_RCC_OscConfig+0x324>
 8005968:	4b58      	ldr	r3, [pc, #352]	; (8005acc <HAL_RCC_OscConfig+0x470>)
 800596a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596c:	4a57      	ldr	r2, [pc, #348]	; (8005acc <HAL_RCC_OscConfig+0x470>)
 800596e:	f023 0301 	bic.w	r3, r3, #1
 8005972:	6713      	str	r3, [r2, #112]	; 0x70
 8005974:	4b55      	ldr	r3, [pc, #340]	; (8005acc <HAL_RCC_OscConfig+0x470>)
 8005976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005978:	4a54      	ldr	r2, [pc, #336]	; (8005acc <HAL_RCC_OscConfig+0x470>)
 800597a:	f023 0304 	bic.w	r3, r3, #4
 800597e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d015      	beq.n	80059b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005988:	f7fd fa70 	bl	8002e6c <HAL_GetTick>
 800598c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800598e:	e00a      	b.n	80059a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005990:	f7fd fa6c 	bl	8002e6c <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	f241 3288 	movw	r2, #5000	; 0x1388
 800599e:	4293      	cmp	r3, r2
 80059a0:	d901      	bls.n	80059a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e0cb      	b.n	8005b3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059a6:	4b49      	ldr	r3, [pc, #292]	; (8005acc <HAL_RCC_OscConfig+0x470>)
 80059a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d0ee      	beq.n	8005990 <HAL_RCC_OscConfig+0x334>
 80059b2:	e014      	b.n	80059de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059b4:	f7fd fa5a 	bl	8002e6c <HAL_GetTick>
 80059b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059ba:	e00a      	b.n	80059d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059bc:	f7fd fa56 	bl	8002e6c <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d901      	bls.n	80059d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e0b5      	b.n	8005b3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059d2:	4b3e      	ldr	r3, [pc, #248]	; (8005acc <HAL_RCC_OscConfig+0x470>)
 80059d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1ee      	bne.n	80059bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059de:	7dfb      	ldrb	r3, [r7, #23]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d105      	bne.n	80059f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059e4:	4b39      	ldr	r3, [pc, #228]	; (8005acc <HAL_RCC_OscConfig+0x470>)
 80059e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e8:	4a38      	ldr	r2, [pc, #224]	; (8005acc <HAL_RCC_OscConfig+0x470>)
 80059ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f000 80a1 	beq.w	8005b3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059fa:	4b34      	ldr	r3, [pc, #208]	; (8005acc <HAL_RCC_OscConfig+0x470>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f003 030c 	and.w	r3, r3, #12
 8005a02:	2b08      	cmp	r3, #8
 8005a04:	d05c      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d141      	bne.n	8005a92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a0e:	4b31      	ldr	r3, [pc, #196]	; (8005ad4 <HAL_RCC_OscConfig+0x478>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a14:	f7fd fa2a 	bl	8002e6c <HAL_GetTick>
 8005a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a1a:	e008      	b.n	8005a2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a1c:	f7fd fa26 	bl	8002e6c <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e087      	b.n	8005b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a2e:	4b27      	ldr	r3, [pc, #156]	; (8005acc <HAL_RCC_OscConfig+0x470>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1f0      	bne.n	8005a1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	69da      	ldr	r2, [r3, #28]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	431a      	orrs	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a48:	019b      	lsls	r3, r3, #6
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a50:	085b      	lsrs	r3, r3, #1
 8005a52:	3b01      	subs	r3, #1
 8005a54:	041b      	lsls	r3, r3, #16
 8005a56:	431a      	orrs	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5c:	061b      	lsls	r3, r3, #24
 8005a5e:	491b      	ldr	r1, [pc, #108]	; (8005acc <HAL_RCC_OscConfig+0x470>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a64:	4b1b      	ldr	r3, [pc, #108]	; (8005ad4 <HAL_RCC_OscConfig+0x478>)
 8005a66:	2201      	movs	r2, #1
 8005a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a6a:	f7fd f9ff 	bl	8002e6c <HAL_GetTick>
 8005a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a70:	e008      	b.n	8005a84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a72:	f7fd f9fb 	bl	8002e6c <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d901      	bls.n	8005a84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e05c      	b.n	8005b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a84:	4b11      	ldr	r3, [pc, #68]	; (8005acc <HAL_RCC_OscConfig+0x470>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d0f0      	beq.n	8005a72 <HAL_RCC_OscConfig+0x416>
 8005a90:	e054      	b.n	8005b3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a92:	4b10      	ldr	r3, [pc, #64]	; (8005ad4 <HAL_RCC_OscConfig+0x478>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a98:	f7fd f9e8 	bl	8002e6c <HAL_GetTick>
 8005a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a9e:	e008      	b.n	8005ab2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005aa0:	f7fd f9e4 	bl	8002e6c <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e045      	b.n	8005b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ab2:	4b06      	ldr	r3, [pc, #24]	; (8005acc <HAL_RCC_OscConfig+0x470>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1f0      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x444>
 8005abe:	e03d      	b.n	8005b3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d107      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e038      	b.n	8005b3e <HAL_RCC_OscConfig+0x4e2>
 8005acc:	40023800 	.word	0x40023800
 8005ad0:	40007000 	.word	0x40007000
 8005ad4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ad8:	4b1b      	ldr	r3, [pc, #108]	; (8005b48 <HAL_RCC_OscConfig+0x4ec>)
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d028      	beq.n	8005b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d121      	bne.n	8005b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d11a      	bne.n	8005b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b08:	4013      	ands	r3, r2
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d111      	bne.n	8005b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1e:	085b      	lsrs	r3, r3, #1
 8005b20:	3b01      	subs	r3, #1
 8005b22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d107      	bne.n	8005b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d001      	beq.n	8005b3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e000      	b.n	8005b3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3718      	adds	r7, #24
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	40023800 	.word	0x40023800

08005b4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d101      	bne.n	8005b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e0cc      	b.n	8005cfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b60:	4b68      	ldr	r3, [pc, #416]	; (8005d04 <HAL_RCC_ClockConfig+0x1b8>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 030f 	and.w	r3, r3, #15
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d90c      	bls.n	8005b88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b6e:	4b65      	ldr	r3, [pc, #404]	; (8005d04 <HAL_RCC_ClockConfig+0x1b8>)
 8005b70:	683a      	ldr	r2, [r7, #0]
 8005b72:	b2d2      	uxtb	r2, r2
 8005b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b76:	4b63      	ldr	r3, [pc, #396]	; (8005d04 <HAL_RCC_ClockConfig+0x1b8>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 030f 	and.w	r3, r3, #15
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d001      	beq.n	8005b88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e0b8      	b.n	8005cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0302 	and.w	r3, r3, #2
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d020      	beq.n	8005bd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0304 	and.w	r3, r3, #4
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d005      	beq.n	8005bac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ba0:	4b59      	ldr	r3, [pc, #356]	; (8005d08 <HAL_RCC_ClockConfig+0x1bc>)
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	4a58      	ldr	r2, [pc, #352]	; (8005d08 <HAL_RCC_ClockConfig+0x1bc>)
 8005ba6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005baa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0308 	and.w	r3, r3, #8
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d005      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bb8:	4b53      	ldr	r3, [pc, #332]	; (8005d08 <HAL_RCC_ClockConfig+0x1bc>)
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	4a52      	ldr	r2, [pc, #328]	; (8005d08 <HAL_RCC_ClockConfig+0x1bc>)
 8005bbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005bc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bc4:	4b50      	ldr	r3, [pc, #320]	; (8005d08 <HAL_RCC_ClockConfig+0x1bc>)
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	494d      	ldr	r1, [pc, #308]	; (8005d08 <HAL_RCC_ClockConfig+0x1bc>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d044      	beq.n	8005c6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d107      	bne.n	8005bfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bea:	4b47      	ldr	r3, [pc, #284]	; (8005d08 <HAL_RCC_ClockConfig+0x1bc>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d119      	bne.n	8005c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e07f      	b.n	8005cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d003      	beq.n	8005c0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c06:	2b03      	cmp	r3, #3
 8005c08:	d107      	bne.n	8005c1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c0a:	4b3f      	ldr	r3, [pc, #252]	; (8005d08 <HAL_RCC_ClockConfig+0x1bc>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d109      	bne.n	8005c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e06f      	b.n	8005cfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c1a:	4b3b      	ldr	r3, [pc, #236]	; (8005d08 <HAL_RCC_ClockConfig+0x1bc>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d101      	bne.n	8005c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e067      	b.n	8005cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c2a:	4b37      	ldr	r3, [pc, #220]	; (8005d08 <HAL_RCC_ClockConfig+0x1bc>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f023 0203 	bic.w	r2, r3, #3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	4934      	ldr	r1, [pc, #208]	; (8005d08 <HAL_RCC_ClockConfig+0x1bc>)
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c3c:	f7fd f916 	bl	8002e6c <HAL_GetTick>
 8005c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c42:	e00a      	b.n	8005c5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c44:	f7fd f912 	bl	8002e6c <HAL_GetTick>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d901      	bls.n	8005c5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e04f      	b.n	8005cfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c5a:	4b2b      	ldr	r3, [pc, #172]	; (8005d08 <HAL_RCC_ClockConfig+0x1bc>)
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f003 020c 	and.w	r2, r3, #12
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d1eb      	bne.n	8005c44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c6c:	4b25      	ldr	r3, [pc, #148]	; (8005d04 <HAL_RCC_ClockConfig+0x1b8>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 030f 	and.w	r3, r3, #15
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d20c      	bcs.n	8005c94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c7a:	4b22      	ldr	r3, [pc, #136]	; (8005d04 <HAL_RCC_ClockConfig+0x1b8>)
 8005c7c:	683a      	ldr	r2, [r7, #0]
 8005c7e:	b2d2      	uxtb	r2, r2
 8005c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c82:	4b20      	ldr	r3, [pc, #128]	; (8005d04 <HAL_RCC_ClockConfig+0x1b8>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 030f 	and.w	r3, r3, #15
 8005c8a:	683a      	ldr	r2, [r7, #0]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d001      	beq.n	8005c94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e032      	b.n	8005cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0304 	and.w	r3, r3, #4
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d008      	beq.n	8005cb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ca0:	4b19      	ldr	r3, [pc, #100]	; (8005d08 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	4916      	ldr	r1, [pc, #88]	; (8005d08 <HAL_RCC_ClockConfig+0x1bc>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0308 	and.w	r3, r3, #8
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d009      	beq.n	8005cd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cbe:	4b12      	ldr	r3, [pc, #72]	; (8005d08 <HAL_RCC_ClockConfig+0x1bc>)
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	00db      	lsls	r3, r3, #3
 8005ccc:	490e      	ldr	r1, [pc, #56]	; (8005d08 <HAL_RCC_ClockConfig+0x1bc>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005cd2:	f000 f821 	bl	8005d18 <HAL_RCC_GetSysClockFreq>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	4b0b      	ldr	r3, [pc, #44]	; (8005d08 <HAL_RCC_ClockConfig+0x1bc>)
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	091b      	lsrs	r3, r3, #4
 8005cde:	f003 030f 	and.w	r3, r3, #15
 8005ce2:	490a      	ldr	r1, [pc, #40]	; (8005d0c <HAL_RCC_ClockConfig+0x1c0>)
 8005ce4:	5ccb      	ldrb	r3, [r1, r3]
 8005ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8005cea:	4a09      	ldr	r2, [pc, #36]	; (8005d10 <HAL_RCC_ClockConfig+0x1c4>)
 8005cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005cee:	4b09      	ldr	r3, [pc, #36]	; (8005d14 <HAL_RCC_ClockConfig+0x1c8>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7fd f876 	bl	8002de4 <HAL_InitTick>

  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	40023c00 	.word	0x40023c00
 8005d08:	40023800 	.word	0x40023800
 8005d0c:	08007694 	.word	0x08007694
 8005d10:	20000004 	.word	0x20000004
 8005d14:	20000008 	.word	0x20000008

08005d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d1c:	b090      	sub	sp, #64	; 0x40
 8005d1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d20:	2300      	movs	r3, #0
 8005d22:	637b      	str	r3, [r7, #52]	; 0x34
 8005d24:	2300      	movs	r3, #0
 8005d26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d28:	2300      	movs	r3, #0
 8005d2a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d30:	4b59      	ldr	r3, [pc, #356]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x180>)
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f003 030c 	and.w	r3, r3, #12
 8005d38:	2b08      	cmp	r3, #8
 8005d3a:	d00d      	beq.n	8005d58 <HAL_RCC_GetSysClockFreq+0x40>
 8005d3c:	2b08      	cmp	r3, #8
 8005d3e:	f200 80a1 	bhi.w	8005e84 <HAL_RCC_GetSysClockFreq+0x16c>
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d002      	beq.n	8005d4c <HAL_RCC_GetSysClockFreq+0x34>
 8005d46:	2b04      	cmp	r3, #4
 8005d48:	d003      	beq.n	8005d52 <HAL_RCC_GetSysClockFreq+0x3a>
 8005d4a:	e09b      	b.n	8005e84 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d4c:	4b53      	ldr	r3, [pc, #332]	; (8005e9c <HAL_RCC_GetSysClockFreq+0x184>)
 8005d4e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005d50:	e09b      	b.n	8005e8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d52:	4b53      	ldr	r3, [pc, #332]	; (8005ea0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005d54:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005d56:	e098      	b.n	8005e8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d58:	4b4f      	ldr	r3, [pc, #316]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x180>)
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d60:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d62:	4b4d      	ldr	r3, [pc, #308]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x180>)
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d028      	beq.n	8005dc0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d6e:	4b4a      	ldr	r3, [pc, #296]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x180>)
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	099b      	lsrs	r3, r3, #6
 8005d74:	2200      	movs	r2, #0
 8005d76:	623b      	str	r3, [r7, #32]
 8005d78:	627a      	str	r2, [r7, #36]	; 0x24
 8005d7a:	6a3b      	ldr	r3, [r7, #32]
 8005d7c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005d80:	2100      	movs	r1, #0
 8005d82:	4b47      	ldr	r3, [pc, #284]	; (8005ea0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005d84:	fb03 f201 	mul.w	r2, r3, r1
 8005d88:	2300      	movs	r3, #0
 8005d8a:	fb00 f303 	mul.w	r3, r0, r3
 8005d8e:	4413      	add	r3, r2
 8005d90:	4a43      	ldr	r2, [pc, #268]	; (8005ea0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005d92:	fba0 1202 	umull	r1, r2, r0, r2
 8005d96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d98:	460a      	mov	r2, r1
 8005d9a:	62ba      	str	r2, [r7, #40]	; 0x28
 8005d9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d9e:	4413      	add	r3, r2
 8005da0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da4:	2200      	movs	r2, #0
 8005da6:	61bb      	str	r3, [r7, #24]
 8005da8:	61fa      	str	r2, [r7, #28]
 8005daa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005dae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005db2:	f7fa fe3b 	bl	8000a2c <__aeabi_uldivmod>
 8005db6:	4602      	mov	r2, r0
 8005db8:	460b      	mov	r3, r1
 8005dba:	4613      	mov	r3, r2
 8005dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dbe:	e053      	b.n	8005e68 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dc0:	4b35      	ldr	r3, [pc, #212]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x180>)
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	099b      	lsrs	r3, r3, #6
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	613b      	str	r3, [r7, #16]
 8005dca:	617a      	str	r2, [r7, #20]
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005dd2:	f04f 0b00 	mov.w	fp, #0
 8005dd6:	4652      	mov	r2, sl
 8005dd8:	465b      	mov	r3, fp
 8005dda:	f04f 0000 	mov.w	r0, #0
 8005dde:	f04f 0100 	mov.w	r1, #0
 8005de2:	0159      	lsls	r1, r3, #5
 8005de4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005de8:	0150      	lsls	r0, r2, #5
 8005dea:	4602      	mov	r2, r0
 8005dec:	460b      	mov	r3, r1
 8005dee:	ebb2 080a 	subs.w	r8, r2, sl
 8005df2:	eb63 090b 	sbc.w	r9, r3, fp
 8005df6:	f04f 0200 	mov.w	r2, #0
 8005dfa:	f04f 0300 	mov.w	r3, #0
 8005dfe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005e02:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005e06:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005e0a:	ebb2 0408 	subs.w	r4, r2, r8
 8005e0e:	eb63 0509 	sbc.w	r5, r3, r9
 8005e12:	f04f 0200 	mov.w	r2, #0
 8005e16:	f04f 0300 	mov.w	r3, #0
 8005e1a:	00eb      	lsls	r3, r5, #3
 8005e1c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e20:	00e2      	lsls	r2, r4, #3
 8005e22:	4614      	mov	r4, r2
 8005e24:	461d      	mov	r5, r3
 8005e26:	eb14 030a 	adds.w	r3, r4, sl
 8005e2a:	603b      	str	r3, [r7, #0]
 8005e2c:	eb45 030b 	adc.w	r3, r5, fp
 8005e30:	607b      	str	r3, [r7, #4]
 8005e32:	f04f 0200 	mov.w	r2, #0
 8005e36:	f04f 0300 	mov.w	r3, #0
 8005e3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e3e:	4629      	mov	r1, r5
 8005e40:	028b      	lsls	r3, r1, #10
 8005e42:	4621      	mov	r1, r4
 8005e44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e48:	4621      	mov	r1, r4
 8005e4a:	028a      	lsls	r2, r1, #10
 8005e4c:	4610      	mov	r0, r2
 8005e4e:	4619      	mov	r1, r3
 8005e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e52:	2200      	movs	r2, #0
 8005e54:	60bb      	str	r3, [r7, #8]
 8005e56:	60fa      	str	r2, [r7, #12]
 8005e58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e5c:	f7fa fde6 	bl	8000a2c <__aeabi_uldivmod>
 8005e60:	4602      	mov	r2, r0
 8005e62:	460b      	mov	r3, r1
 8005e64:	4613      	mov	r3, r2
 8005e66:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005e68:	4b0b      	ldr	r3, [pc, #44]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	0c1b      	lsrs	r3, r3, #16
 8005e6e:	f003 0303 	and.w	r3, r3, #3
 8005e72:	3301      	adds	r3, #1
 8005e74:	005b      	lsls	r3, r3, #1
 8005e76:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005e78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e80:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005e82:	e002      	b.n	8005e8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e84:	4b05      	ldr	r3, [pc, #20]	; (8005e9c <HAL_RCC_GetSysClockFreq+0x184>)
 8005e86:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005e88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3740      	adds	r7, #64	; 0x40
 8005e90:	46bd      	mov	sp, r7
 8005e92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e96:	bf00      	nop
 8005e98:	40023800 	.word	0x40023800
 8005e9c:	00f42400 	.word	0x00f42400
 8005ea0:	017d7840 	.word	0x017d7840

08005ea4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ea8:	4b03      	ldr	r3, [pc, #12]	; (8005eb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	20000004 	.word	0x20000004

08005ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ec0:	f7ff fff0 	bl	8005ea4 <HAL_RCC_GetHCLKFreq>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	4b05      	ldr	r3, [pc, #20]	; (8005edc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	0a9b      	lsrs	r3, r3, #10
 8005ecc:	f003 0307 	and.w	r3, r3, #7
 8005ed0:	4903      	ldr	r1, [pc, #12]	; (8005ee0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ed2:	5ccb      	ldrb	r3, [r1, r3]
 8005ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	40023800 	.word	0x40023800
 8005ee0:	080076a4 	.word	0x080076a4

08005ee4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e07b      	b.n	8005fee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d108      	bne.n	8005f10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f06:	d009      	beq.n	8005f1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	61da      	str	r2, [r3, #28]
 8005f0e:	e005      	b.n	8005f1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d106      	bne.n	8005f3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7fc fd5e 	bl	80029f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f64:	431a      	orrs	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f6e:	431a      	orrs	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	f003 0302 	and.w	r3, r3, #2
 8005f78:	431a      	orrs	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	431a      	orrs	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f8c:	431a      	orrs	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f96:	431a      	orrs	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fa0:	ea42 0103 	orr.w	r1, r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	430a      	orrs	r2, r1
 8005fb2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	0c1b      	lsrs	r3, r3, #16
 8005fba:	f003 0104 	and.w	r1, r3, #4
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc2:	f003 0210 	and.w	r2, r3, #16
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	69da      	ldr	r2, [r3, #28]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fdc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b082      	sub	sp, #8
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d101      	bne.n	8006008 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e041      	b.n	800608c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	d106      	bne.n	8006022 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f7fc fd33 	bl	8002a88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2202      	movs	r2, #2
 8006026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	3304      	adds	r3, #4
 8006032:	4619      	mov	r1, r3
 8006034:	4610      	mov	r0, r2
 8006036:	f000 fe67 	bl	8006d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3708      	adds	r7, #8
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d001      	beq.n	80060ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e046      	b.n	800613a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2202      	movs	r2, #2
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a23      	ldr	r2, [pc, #140]	; (8006148 <HAL_TIM_Base_Start+0xb4>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d022      	beq.n	8006104 <HAL_TIM_Base_Start+0x70>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060c6:	d01d      	beq.n	8006104 <HAL_TIM_Base_Start+0x70>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a1f      	ldr	r2, [pc, #124]	; (800614c <HAL_TIM_Base_Start+0xb8>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d018      	beq.n	8006104 <HAL_TIM_Base_Start+0x70>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a1e      	ldr	r2, [pc, #120]	; (8006150 <HAL_TIM_Base_Start+0xbc>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d013      	beq.n	8006104 <HAL_TIM_Base_Start+0x70>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a1c      	ldr	r2, [pc, #112]	; (8006154 <HAL_TIM_Base_Start+0xc0>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d00e      	beq.n	8006104 <HAL_TIM_Base_Start+0x70>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a1b      	ldr	r2, [pc, #108]	; (8006158 <HAL_TIM_Base_Start+0xc4>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d009      	beq.n	8006104 <HAL_TIM_Base_Start+0x70>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a19      	ldr	r2, [pc, #100]	; (800615c <HAL_TIM_Base_Start+0xc8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d004      	beq.n	8006104 <HAL_TIM_Base_Start+0x70>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a18      	ldr	r2, [pc, #96]	; (8006160 <HAL_TIM_Base_Start+0xcc>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d111      	bne.n	8006128 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f003 0307 	and.w	r3, r3, #7
 800610e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2b06      	cmp	r3, #6
 8006114:	d010      	beq.n	8006138 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f042 0201 	orr.w	r2, r2, #1
 8006124:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006126:	e007      	b.n	8006138 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f042 0201 	orr.w	r2, r2, #1
 8006136:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3714      	adds	r7, #20
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	40010000 	.word	0x40010000
 800614c:	40000400 	.word	0x40000400
 8006150:	40000800 	.word	0x40000800
 8006154:	40000c00 	.word	0x40000c00
 8006158:	40010400 	.word	0x40010400
 800615c:	40014000 	.word	0x40014000
 8006160:	40001800 	.word	0x40001800

08006164 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006172:	b2db      	uxtb	r3, r3
 8006174:	2b01      	cmp	r3, #1
 8006176:	d001      	beq.n	800617c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e04e      	b.n	800621a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2202      	movs	r2, #2
 8006180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68da      	ldr	r2, [r3, #12]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f042 0201 	orr.w	r2, r2, #1
 8006192:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a23      	ldr	r2, [pc, #140]	; (8006228 <HAL_TIM_Base_Start_IT+0xc4>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d022      	beq.n	80061e4 <HAL_TIM_Base_Start_IT+0x80>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061a6:	d01d      	beq.n	80061e4 <HAL_TIM_Base_Start_IT+0x80>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a1f      	ldr	r2, [pc, #124]	; (800622c <HAL_TIM_Base_Start_IT+0xc8>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d018      	beq.n	80061e4 <HAL_TIM_Base_Start_IT+0x80>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a1e      	ldr	r2, [pc, #120]	; (8006230 <HAL_TIM_Base_Start_IT+0xcc>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d013      	beq.n	80061e4 <HAL_TIM_Base_Start_IT+0x80>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a1c      	ldr	r2, [pc, #112]	; (8006234 <HAL_TIM_Base_Start_IT+0xd0>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d00e      	beq.n	80061e4 <HAL_TIM_Base_Start_IT+0x80>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a1b      	ldr	r2, [pc, #108]	; (8006238 <HAL_TIM_Base_Start_IT+0xd4>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d009      	beq.n	80061e4 <HAL_TIM_Base_Start_IT+0x80>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a19      	ldr	r2, [pc, #100]	; (800623c <HAL_TIM_Base_Start_IT+0xd8>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d004      	beq.n	80061e4 <HAL_TIM_Base_Start_IT+0x80>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a18      	ldr	r2, [pc, #96]	; (8006240 <HAL_TIM_Base_Start_IT+0xdc>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d111      	bne.n	8006208 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f003 0307 	and.w	r3, r3, #7
 80061ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2b06      	cmp	r3, #6
 80061f4:	d010      	beq.n	8006218 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f042 0201 	orr.w	r2, r2, #1
 8006204:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006206:	e007      	b.n	8006218 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f042 0201 	orr.w	r2, r2, #1
 8006216:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3714      	adds	r7, #20
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	40010000 	.word	0x40010000
 800622c:	40000400 	.word	0x40000400
 8006230:	40000800 	.word	0x40000800
 8006234:	40000c00 	.word	0x40000c00
 8006238:	40010400 	.word	0x40010400
 800623c:	40014000 	.word	0x40014000
 8006240:	40001800 	.word	0x40001800

08006244 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e041      	b.n	80062da <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b00      	cmp	r3, #0
 8006260:	d106      	bne.n	8006270 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f839 	bl	80062e2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2202      	movs	r2, #2
 8006274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	3304      	adds	r3, #4
 8006280:	4619      	mov	r1, r3
 8006282:	4610      	mov	r0, r2
 8006284:	f000 fd40 	bl	8006d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3708      	adds	r7, #8
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80062e2:	b480      	push	{r7}
 80062e4:	b083      	sub	sp, #12
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80062ea:	bf00      	nop
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b082      	sub	sp, #8
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d101      	bne.n	8006308 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e041      	b.n	800638c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800630e:	b2db      	uxtb	r3, r3
 8006310:	2b00      	cmp	r3, #0
 8006312:	d106      	bne.n	8006322 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 f839 	bl	8006394 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2202      	movs	r2, #2
 8006326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	3304      	adds	r3, #4
 8006332:	4619      	mov	r1, r3
 8006334:	4610      	mov	r0, r2
 8006336:	f000 fce7 	bl	8006d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2201      	movs	r2, #1
 8006346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063b2:	2300      	movs	r3, #0
 80063b4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d109      	bne.n	80063d0 <HAL_TIM_PWM_Start_IT+0x28>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	bf14      	ite	ne
 80063c8:	2301      	movne	r3, #1
 80063ca:	2300      	moveq	r3, #0
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	e022      	b.n	8006416 <HAL_TIM_PWM_Start_IT+0x6e>
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	2b04      	cmp	r3, #4
 80063d4:	d109      	bne.n	80063ea <HAL_TIM_PWM_Start_IT+0x42>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b01      	cmp	r3, #1
 80063e0:	bf14      	ite	ne
 80063e2:	2301      	movne	r3, #1
 80063e4:	2300      	moveq	r3, #0
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	e015      	b.n	8006416 <HAL_TIM_PWM_Start_IT+0x6e>
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	2b08      	cmp	r3, #8
 80063ee:	d109      	bne.n	8006404 <HAL_TIM_PWM_Start_IT+0x5c>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	bf14      	ite	ne
 80063fc:	2301      	movne	r3, #1
 80063fe:	2300      	moveq	r3, #0
 8006400:	b2db      	uxtb	r3, r3
 8006402:	e008      	b.n	8006416 <HAL_TIM_PWM_Start_IT+0x6e>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b01      	cmp	r3, #1
 800640e:	bf14      	ite	ne
 8006410:	2301      	movne	r3, #1
 8006412:	2300      	moveq	r3, #0
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d001      	beq.n	800641e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e0c7      	b.n	80065ae <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d104      	bne.n	800642e <HAL_TIM_PWM_Start_IT+0x86>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2202      	movs	r2, #2
 8006428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800642c:	e013      	b.n	8006456 <HAL_TIM_PWM_Start_IT+0xae>
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	2b04      	cmp	r3, #4
 8006432:	d104      	bne.n	800643e <HAL_TIM_PWM_Start_IT+0x96>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800643c:	e00b      	b.n	8006456 <HAL_TIM_PWM_Start_IT+0xae>
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b08      	cmp	r3, #8
 8006442:	d104      	bne.n	800644e <HAL_TIM_PWM_Start_IT+0xa6>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800644c:	e003      	b.n	8006456 <HAL_TIM_PWM_Start_IT+0xae>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2202      	movs	r2, #2
 8006452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2b0c      	cmp	r3, #12
 800645a:	d841      	bhi.n	80064e0 <HAL_TIM_PWM_Start_IT+0x138>
 800645c:	a201      	add	r2, pc, #4	; (adr r2, 8006464 <HAL_TIM_PWM_Start_IT+0xbc>)
 800645e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006462:	bf00      	nop
 8006464:	08006499 	.word	0x08006499
 8006468:	080064e1 	.word	0x080064e1
 800646c:	080064e1 	.word	0x080064e1
 8006470:	080064e1 	.word	0x080064e1
 8006474:	080064ab 	.word	0x080064ab
 8006478:	080064e1 	.word	0x080064e1
 800647c:	080064e1 	.word	0x080064e1
 8006480:	080064e1 	.word	0x080064e1
 8006484:	080064bd 	.word	0x080064bd
 8006488:	080064e1 	.word	0x080064e1
 800648c:	080064e1 	.word	0x080064e1
 8006490:	080064e1 	.word	0x080064e1
 8006494:	080064cf 	.word	0x080064cf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68da      	ldr	r2, [r3, #12]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f042 0202 	orr.w	r2, r2, #2
 80064a6:	60da      	str	r2, [r3, #12]
      break;
 80064a8:	e01d      	b.n	80064e6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68da      	ldr	r2, [r3, #12]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f042 0204 	orr.w	r2, r2, #4
 80064b8:	60da      	str	r2, [r3, #12]
      break;
 80064ba:	e014      	b.n	80064e6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68da      	ldr	r2, [r3, #12]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f042 0208 	orr.w	r2, r2, #8
 80064ca:	60da      	str	r2, [r3, #12]
      break;
 80064cc:	e00b      	b.n	80064e6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68da      	ldr	r2, [r3, #12]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f042 0210 	orr.w	r2, r2, #16
 80064dc:	60da      	str	r2, [r3, #12]
      break;
 80064de:	e002      	b.n	80064e6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	73fb      	strb	r3, [r7, #15]
      break;
 80064e4:	bf00      	nop
  }

  if (status == HAL_OK)
 80064e6:	7bfb      	ldrb	r3, [r7, #15]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d15f      	bne.n	80065ac <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2201      	movs	r2, #1
 80064f2:	6839      	ldr	r1, [r7, #0]
 80064f4:	4618      	mov	r0, r3
 80064f6:	f000 ff8e 	bl	8007416 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a2e      	ldr	r2, [pc, #184]	; (80065b8 <HAL_TIM_PWM_Start_IT+0x210>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d004      	beq.n	800650e <HAL_TIM_PWM_Start_IT+0x166>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a2c      	ldr	r2, [pc, #176]	; (80065bc <HAL_TIM_PWM_Start_IT+0x214>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d101      	bne.n	8006512 <HAL_TIM_PWM_Start_IT+0x16a>
 800650e:	2301      	movs	r3, #1
 8006510:	e000      	b.n	8006514 <HAL_TIM_PWM_Start_IT+0x16c>
 8006512:	2300      	movs	r3, #0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d007      	beq.n	8006528 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006526:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a22      	ldr	r2, [pc, #136]	; (80065b8 <HAL_TIM_PWM_Start_IT+0x210>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d022      	beq.n	8006578 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800653a:	d01d      	beq.n	8006578 <HAL_TIM_PWM_Start_IT+0x1d0>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a1f      	ldr	r2, [pc, #124]	; (80065c0 <HAL_TIM_PWM_Start_IT+0x218>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d018      	beq.n	8006578 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a1e      	ldr	r2, [pc, #120]	; (80065c4 <HAL_TIM_PWM_Start_IT+0x21c>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d013      	beq.n	8006578 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a1c      	ldr	r2, [pc, #112]	; (80065c8 <HAL_TIM_PWM_Start_IT+0x220>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d00e      	beq.n	8006578 <HAL_TIM_PWM_Start_IT+0x1d0>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a17      	ldr	r2, [pc, #92]	; (80065bc <HAL_TIM_PWM_Start_IT+0x214>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d009      	beq.n	8006578 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a18      	ldr	r2, [pc, #96]	; (80065cc <HAL_TIM_PWM_Start_IT+0x224>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d004      	beq.n	8006578 <HAL_TIM_PWM_Start_IT+0x1d0>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a17      	ldr	r2, [pc, #92]	; (80065d0 <HAL_TIM_PWM_Start_IT+0x228>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d111      	bne.n	800659c <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f003 0307 	and.w	r3, r3, #7
 8006582:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	2b06      	cmp	r3, #6
 8006588:	d010      	beq.n	80065ac <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f042 0201 	orr.w	r2, r2, #1
 8006598:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800659a:	e007      	b.n	80065ac <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f042 0201 	orr.w	r2, r2, #1
 80065aa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80065ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	40010000 	.word	0x40010000
 80065bc:	40010400 	.word	0x40010400
 80065c0:	40000400 	.word	0x40000400
 80065c4:	40000800 	.word	0x40000800
 80065c8:	40000c00 	.word	0x40000c00
 80065cc:	40014000 	.word	0x40014000
 80065d0:	40001800 	.word	0x40001800

080065d4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d101      	bne.n	80065e8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e041      	b.n	800666c <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d106      	bne.n	8006602 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 f839 	bl	8006674 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2202      	movs	r2, #2
 8006606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	3304      	adds	r3, #4
 8006612:	4619      	mov	r1, r3
 8006614:	4610      	mov	r0, r2
 8006616:	f000 fb77 	bl	8006d08 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f022 0208 	bic.w	r2, r2, #8
 8006628:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	6819      	ldr	r1, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	683a      	ldr	r2, [r7, #0]
 8006636:	430a      	orrs	r2, r1
 8006638:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2201      	movs	r2, #1
 8006656:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2201      	movs	r2, #1
 8006666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3708      	adds	r7, #8
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800667c:	bf00      	nop
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	f003 0302 	and.w	r3, r3, #2
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d020      	beq.n	80066ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f003 0302 	and.w	r3, r3, #2
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d01b      	beq.n	80066ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f06f 0202 	mvn.w	r2, #2
 80066bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	f003 0303 	and.w	r3, r3, #3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d003      	beq.n	80066da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fb03 	bl	8006cde <HAL_TIM_IC_CaptureCallback>
 80066d8:	e005      	b.n	80066e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 faf5 	bl	8006cca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f7fb fd7b 	bl	80021dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	f003 0304 	and.w	r3, r3, #4
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d020      	beq.n	8006738 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f003 0304 	and.w	r3, r3, #4
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d01b      	beq.n	8006738 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f06f 0204 	mvn.w	r2, #4
 8006708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2202      	movs	r2, #2
 800670e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800671a:	2b00      	cmp	r3, #0
 800671c:	d003      	beq.n	8006726 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 fadd 	bl	8006cde <HAL_TIM_IC_CaptureCallback>
 8006724:	e005      	b.n	8006732 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 facf 	bl	8006cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f7fb fd55 	bl	80021dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	f003 0308 	and.w	r3, r3, #8
 800673e:	2b00      	cmp	r3, #0
 8006740:	d020      	beq.n	8006784 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f003 0308 	and.w	r3, r3, #8
 8006748:	2b00      	cmp	r3, #0
 800674a:	d01b      	beq.n	8006784 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f06f 0208 	mvn.w	r2, #8
 8006754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2204      	movs	r2, #4
 800675a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	69db      	ldr	r3, [r3, #28]
 8006762:	f003 0303 	and.w	r3, r3, #3
 8006766:	2b00      	cmp	r3, #0
 8006768:	d003      	beq.n	8006772 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fab7 	bl	8006cde <HAL_TIM_IC_CaptureCallback>
 8006770:	e005      	b.n	800677e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 faa9 	bl	8006cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f7fb fd2f 	bl	80021dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	f003 0310 	and.w	r3, r3, #16
 800678a:	2b00      	cmp	r3, #0
 800678c:	d020      	beq.n	80067d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f003 0310 	and.w	r3, r3, #16
 8006794:	2b00      	cmp	r3, #0
 8006796:	d01b      	beq.n	80067d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f06f 0210 	mvn.w	r2, #16
 80067a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2208      	movs	r2, #8
 80067a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	69db      	ldr	r3, [r3, #28]
 80067ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d003      	beq.n	80067be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fa91 	bl	8006cde <HAL_TIM_IC_CaptureCallback>
 80067bc:	e005      	b.n	80067ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fa83 	bl	8006cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f7fb fd09 	bl	80021dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00c      	beq.n	80067f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f003 0301 	and.w	r3, r3, #1
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d007      	beq.n	80067f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f06f 0201 	mvn.w	r2, #1
 80067ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 fa61 	bl	8006cb6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00c      	beq.n	8006818 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006804:	2b00      	cmp	r3, #0
 8006806:	d007      	beq.n	8006818 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 fefc 	bl	8007610 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00c      	beq.n	800683c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006828:	2b00      	cmp	r3, #0
 800682a:	d007      	beq.n	800683c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fa5b 	bl	8006cf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	f003 0320 	and.w	r3, r3, #32
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00c      	beq.n	8006860 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f003 0320 	and.w	r3, r3, #32
 800684c:	2b00      	cmp	r3, #0
 800684e:	d007      	beq.n	8006860 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f06f 0220 	mvn.w	r2, #32
 8006858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fece 	bl	80075fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006860:	bf00      	nop
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006874:	2300      	movs	r3, #0
 8006876:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800687e:	2b01      	cmp	r3, #1
 8006880:	d101      	bne.n	8006886 <HAL_TIM_OC_ConfigChannel+0x1e>
 8006882:	2302      	movs	r3, #2
 8006884:	e048      	b.n	8006918 <HAL_TIM_OC_ConfigChannel+0xb0>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2b0c      	cmp	r3, #12
 8006892:	d839      	bhi.n	8006908 <HAL_TIM_OC_ConfigChannel+0xa0>
 8006894:	a201      	add	r2, pc, #4	; (adr r2, 800689c <HAL_TIM_OC_ConfigChannel+0x34>)
 8006896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689a:	bf00      	nop
 800689c:	080068d1 	.word	0x080068d1
 80068a0:	08006909 	.word	0x08006909
 80068a4:	08006909 	.word	0x08006909
 80068a8:	08006909 	.word	0x08006909
 80068ac:	080068df 	.word	0x080068df
 80068b0:	08006909 	.word	0x08006909
 80068b4:	08006909 	.word	0x08006909
 80068b8:	08006909 	.word	0x08006909
 80068bc:	080068ed 	.word	0x080068ed
 80068c0:	08006909 	.word	0x08006909
 80068c4:	08006909 	.word	0x08006909
 80068c8:	08006909 	.word	0x08006909
 80068cc:	080068fb 	.word	0x080068fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68b9      	ldr	r1, [r7, #8]
 80068d6:	4618      	mov	r0, r3
 80068d8:	f000 fac2 	bl	8006e60 <TIM_OC1_SetConfig>
      break;
 80068dc:	e017      	b.n	800690e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68b9      	ldr	r1, [r7, #8]
 80068e4:	4618      	mov	r0, r3
 80068e6:	f000 fb2b 	bl	8006f40 <TIM_OC2_SetConfig>
      break;
 80068ea:	e010      	b.n	800690e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68b9      	ldr	r1, [r7, #8]
 80068f2:	4618      	mov	r0, r3
 80068f4:	f000 fb9a 	bl	800702c <TIM_OC3_SetConfig>
      break;
 80068f8:	e009      	b.n	800690e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68b9      	ldr	r1, [r7, #8]
 8006900:	4618      	mov	r0, r3
 8006902:	f000 fc07 	bl	8007114 <TIM_OC4_SetConfig>
      break;
 8006906:	e002      	b.n	800690e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	75fb      	strb	r3, [r7, #23]
      break;
 800690c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006916:	7dfb      	ldrb	r3, [r7, #23]
}
 8006918:	4618      	mov	r0, r3
 800691a:	3718      	adds	r7, #24
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800692c:	2300      	movs	r3, #0
 800692e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006936:	2b01      	cmp	r3, #1
 8006938:	d101      	bne.n	800693e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800693a:	2302      	movs	r3, #2
 800693c:	e0ae      	b.n	8006a9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2b0c      	cmp	r3, #12
 800694a:	f200 809f 	bhi.w	8006a8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800694e:	a201      	add	r2, pc, #4	; (adr r2, 8006954 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006954:	08006989 	.word	0x08006989
 8006958:	08006a8d 	.word	0x08006a8d
 800695c:	08006a8d 	.word	0x08006a8d
 8006960:	08006a8d 	.word	0x08006a8d
 8006964:	080069c9 	.word	0x080069c9
 8006968:	08006a8d 	.word	0x08006a8d
 800696c:	08006a8d 	.word	0x08006a8d
 8006970:	08006a8d 	.word	0x08006a8d
 8006974:	08006a0b 	.word	0x08006a0b
 8006978:	08006a8d 	.word	0x08006a8d
 800697c:	08006a8d 	.word	0x08006a8d
 8006980:	08006a8d 	.word	0x08006a8d
 8006984:	08006a4b 	.word	0x08006a4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68b9      	ldr	r1, [r7, #8]
 800698e:	4618      	mov	r0, r3
 8006990:	f000 fa66 	bl	8006e60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	699a      	ldr	r2, [r3, #24]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f042 0208 	orr.w	r2, r2, #8
 80069a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	699a      	ldr	r2, [r3, #24]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f022 0204 	bic.w	r2, r2, #4
 80069b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	6999      	ldr	r1, [r3, #24]
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	691a      	ldr	r2, [r3, #16]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	619a      	str	r2, [r3, #24]
      break;
 80069c6:	e064      	b.n	8006a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68b9      	ldr	r1, [r7, #8]
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 fab6 	bl	8006f40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	699a      	ldr	r2, [r3, #24]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	699a      	ldr	r2, [r3, #24]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	6999      	ldr	r1, [r3, #24]
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	021a      	lsls	r2, r3, #8
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	619a      	str	r2, [r3, #24]
      break;
 8006a08:	e043      	b.n	8006a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68b9      	ldr	r1, [r7, #8]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f000 fb0b 	bl	800702c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	69da      	ldr	r2, [r3, #28]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f042 0208 	orr.w	r2, r2, #8
 8006a24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	69da      	ldr	r2, [r3, #28]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f022 0204 	bic.w	r2, r2, #4
 8006a34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	69d9      	ldr	r1, [r3, #28]
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	691a      	ldr	r2, [r3, #16]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	430a      	orrs	r2, r1
 8006a46:	61da      	str	r2, [r3, #28]
      break;
 8006a48:	e023      	b.n	8006a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68b9      	ldr	r1, [r7, #8]
 8006a50:	4618      	mov	r0, r3
 8006a52:	f000 fb5f 	bl	8007114 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	69da      	ldr	r2, [r3, #28]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	69da      	ldr	r2, [r3, #28]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	69d9      	ldr	r1, [r3, #28]
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	021a      	lsls	r2, r3, #8
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	430a      	orrs	r2, r1
 8006a88:	61da      	str	r2, [r3, #28]
      break;
 8006a8a:	e002      	b.n	8006a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3718      	adds	r7, #24
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d101      	bne.n	8006ac0 <HAL_TIM_ConfigClockSource+0x1c>
 8006abc:	2302      	movs	r3, #2
 8006abe:	e0b4      	b.n	8006c2a <HAL_TIM_ConfigClockSource+0x186>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2202      	movs	r2, #2
 8006acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ade:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ae6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006af8:	d03e      	beq.n	8006b78 <HAL_TIM_ConfigClockSource+0xd4>
 8006afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006afe:	f200 8087 	bhi.w	8006c10 <HAL_TIM_ConfigClockSource+0x16c>
 8006b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b06:	f000 8086 	beq.w	8006c16 <HAL_TIM_ConfigClockSource+0x172>
 8006b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b0e:	d87f      	bhi.n	8006c10 <HAL_TIM_ConfigClockSource+0x16c>
 8006b10:	2b70      	cmp	r3, #112	; 0x70
 8006b12:	d01a      	beq.n	8006b4a <HAL_TIM_ConfigClockSource+0xa6>
 8006b14:	2b70      	cmp	r3, #112	; 0x70
 8006b16:	d87b      	bhi.n	8006c10 <HAL_TIM_ConfigClockSource+0x16c>
 8006b18:	2b60      	cmp	r3, #96	; 0x60
 8006b1a:	d050      	beq.n	8006bbe <HAL_TIM_ConfigClockSource+0x11a>
 8006b1c:	2b60      	cmp	r3, #96	; 0x60
 8006b1e:	d877      	bhi.n	8006c10 <HAL_TIM_ConfigClockSource+0x16c>
 8006b20:	2b50      	cmp	r3, #80	; 0x50
 8006b22:	d03c      	beq.n	8006b9e <HAL_TIM_ConfigClockSource+0xfa>
 8006b24:	2b50      	cmp	r3, #80	; 0x50
 8006b26:	d873      	bhi.n	8006c10 <HAL_TIM_ConfigClockSource+0x16c>
 8006b28:	2b40      	cmp	r3, #64	; 0x40
 8006b2a:	d058      	beq.n	8006bde <HAL_TIM_ConfigClockSource+0x13a>
 8006b2c:	2b40      	cmp	r3, #64	; 0x40
 8006b2e:	d86f      	bhi.n	8006c10 <HAL_TIM_ConfigClockSource+0x16c>
 8006b30:	2b30      	cmp	r3, #48	; 0x30
 8006b32:	d064      	beq.n	8006bfe <HAL_TIM_ConfigClockSource+0x15a>
 8006b34:	2b30      	cmp	r3, #48	; 0x30
 8006b36:	d86b      	bhi.n	8006c10 <HAL_TIM_ConfigClockSource+0x16c>
 8006b38:	2b20      	cmp	r3, #32
 8006b3a:	d060      	beq.n	8006bfe <HAL_TIM_ConfigClockSource+0x15a>
 8006b3c:	2b20      	cmp	r3, #32
 8006b3e:	d867      	bhi.n	8006c10 <HAL_TIM_ConfigClockSource+0x16c>
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d05c      	beq.n	8006bfe <HAL_TIM_ConfigClockSource+0x15a>
 8006b44:	2b10      	cmp	r3, #16
 8006b46:	d05a      	beq.n	8006bfe <HAL_TIM_ConfigClockSource+0x15a>
 8006b48:	e062      	b.n	8006c10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b5a:	f000 fc3c 	bl	80073d6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68ba      	ldr	r2, [r7, #8]
 8006b74:	609a      	str	r2, [r3, #8]
      break;
 8006b76:	e04f      	b.n	8006c18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b88:	f000 fc25 	bl	80073d6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	689a      	ldr	r2, [r3, #8]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b9a:	609a      	str	r2, [r3, #8]
      break;
 8006b9c:	e03c      	b.n	8006c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006baa:	461a      	mov	r2, r3
 8006bac:	f000 fb99 	bl	80072e2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2150      	movs	r1, #80	; 0x50
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f000 fbf2 	bl	80073a0 <TIM_ITRx_SetConfig>
      break;
 8006bbc:	e02c      	b.n	8006c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bca:	461a      	mov	r2, r3
 8006bcc:	f000 fbb8 	bl	8007340 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2160      	movs	r1, #96	; 0x60
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f000 fbe2 	bl	80073a0 <TIM_ITRx_SetConfig>
      break;
 8006bdc:	e01c      	b.n	8006c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bea:	461a      	mov	r2, r3
 8006bec:	f000 fb79 	bl	80072e2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2140      	movs	r1, #64	; 0x40
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f000 fbd2 	bl	80073a0 <TIM_ITRx_SetConfig>
      break;
 8006bfc:	e00c      	b.n	8006c18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4619      	mov	r1, r3
 8006c08:	4610      	mov	r0, r2
 8006c0a:	f000 fbc9 	bl	80073a0 <TIM_ITRx_SetConfig>
      break;
 8006c0e:	e003      	b.n	8006c18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	73fb      	strb	r3, [r7, #15]
      break;
 8006c14:	e000      	b.n	8006c18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006c16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b082      	sub	sp, #8
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
 8006c3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d101      	bne.n	8006c4a <HAL_TIM_SlaveConfigSynchro+0x18>
 8006c46:	2302      	movs	r3, #2
 8006c48:	e031      	b.n	8006cae <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2202      	movs	r2, #2
 8006c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006c5a:	6839      	ldr	r1, [r7, #0]
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 faaf 	bl	80071c0 <TIM_SlaveTimer_SetConfig>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d009      	beq.n	8006c7c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e018      	b.n	8006cae <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68da      	ldr	r2, [r3, #12]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c8a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68da      	ldr	r2, [r3, #12]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006c9a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3708      	adds	r7, #8
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	b083      	sub	sp, #12
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006cbe:	bf00      	nop
 8006cc0:	370c      	adds	r7, #12
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cca:	b480      	push	{r7}
 8006ccc:	b083      	sub	sp, #12
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cd2:	bf00      	nop
 8006cd4:	370c      	adds	r7, #12
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cde:	b480      	push	{r7}
 8006ce0:	b083      	sub	sp, #12
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ce6:	bf00      	nop
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b083      	sub	sp, #12
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cfa:	bf00      	nop
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
	...

08006d08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a46      	ldr	r2, [pc, #280]	; (8006e34 <TIM_Base_SetConfig+0x12c>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d013      	beq.n	8006d48 <TIM_Base_SetConfig+0x40>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d26:	d00f      	beq.n	8006d48 <TIM_Base_SetConfig+0x40>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a43      	ldr	r2, [pc, #268]	; (8006e38 <TIM_Base_SetConfig+0x130>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d00b      	beq.n	8006d48 <TIM_Base_SetConfig+0x40>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a42      	ldr	r2, [pc, #264]	; (8006e3c <TIM_Base_SetConfig+0x134>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d007      	beq.n	8006d48 <TIM_Base_SetConfig+0x40>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a41      	ldr	r2, [pc, #260]	; (8006e40 <TIM_Base_SetConfig+0x138>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d003      	beq.n	8006d48 <TIM_Base_SetConfig+0x40>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a40      	ldr	r2, [pc, #256]	; (8006e44 <TIM_Base_SetConfig+0x13c>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d108      	bne.n	8006d5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a35      	ldr	r2, [pc, #212]	; (8006e34 <TIM_Base_SetConfig+0x12c>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d02b      	beq.n	8006dba <TIM_Base_SetConfig+0xb2>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d68:	d027      	beq.n	8006dba <TIM_Base_SetConfig+0xb2>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a32      	ldr	r2, [pc, #200]	; (8006e38 <TIM_Base_SetConfig+0x130>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d023      	beq.n	8006dba <TIM_Base_SetConfig+0xb2>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a31      	ldr	r2, [pc, #196]	; (8006e3c <TIM_Base_SetConfig+0x134>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d01f      	beq.n	8006dba <TIM_Base_SetConfig+0xb2>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a30      	ldr	r2, [pc, #192]	; (8006e40 <TIM_Base_SetConfig+0x138>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d01b      	beq.n	8006dba <TIM_Base_SetConfig+0xb2>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a2f      	ldr	r2, [pc, #188]	; (8006e44 <TIM_Base_SetConfig+0x13c>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d017      	beq.n	8006dba <TIM_Base_SetConfig+0xb2>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a2e      	ldr	r2, [pc, #184]	; (8006e48 <TIM_Base_SetConfig+0x140>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d013      	beq.n	8006dba <TIM_Base_SetConfig+0xb2>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a2d      	ldr	r2, [pc, #180]	; (8006e4c <TIM_Base_SetConfig+0x144>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d00f      	beq.n	8006dba <TIM_Base_SetConfig+0xb2>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a2c      	ldr	r2, [pc, #176]	; (8006e50 <TIM_Base_SetConfig+0x148>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d00b      	beq.n	8006dba <TIM_Base_SetConfig+0xb2>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a2b      	ldr	r2, [pc, #172]	; (8006e54 <TIM_Base_SetConfig+0x14c>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d007      	beq.n	8006dba <TIM_Base_SetConfig+0xb2>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a2a      	ldr	r2, [pc, #168]	; (8006e58 <TIM_Base_SetConfig+0x150>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d003      	beq.n	8006dba <TIM_Base_SetConfig+0xb2>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a29      	ldr	r2, [pc, #164]	; (8006e5c <TIM_Base_SetConfig+0x154>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d108      	bne.n	8006dcc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	689a      	ldr	r2, [r3, #8]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a10      	ldr	r2, [pc, #64]	; (8006e34 <TIM_Base_SetConfig+0x12c>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d003      	beq.n	8006e00 <TIM_Base_SetConfig+0xf8>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a12      	ldr	r2, [pc, #72]	; (8006e44 <TIM_Base_SetConfig+0x13c>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d103      	bne.n	8006e08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	691a      	ldr	r2, [r3, #16]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d105      	bne.n	8006e26 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	f023 0201 	bic.w	r2, r3, #1
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	611a      	str	r2, [r3, #16]
  }
}
 8006e26:	bf00      	nop
 8006e28:	3714      	adds	r7, #20
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	40010000 	.word	0x40010000
 8006e38:	40000400 	.word	0x40000400
 8006e3c:	40000800 	.word	0x40000800
 8006e40:	40000c00 	.word	0x40000c00
 8006e44:	40010400 	.word	0x40010400
 8006e48:	40014000 	.word	0x40014000
 8006e4c:	40014400 	.word	0x40014400
 8006e50:	40014800 	.word	0x40014800
 8006e54:	40001800 	.word	0x40001800
 8006e58:	40001c00 	.word	0x40001c00
 8006e5c:	40002000 	.word	0x40002000

08006e60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b087      	sub	sp, #28
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a1b      	ldr	r3, [r3, #32]
 8006e74:	f023 0201 	bic.w	r2, r3, #1
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f023 0303 	bic.w	r3, r3, #3
 8006e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f023 0302 	bic.w	r3, r3, #2
 8006ea8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4a20      	ldr	r2, [pc, #128]	; (8006f38 <TIM_OC1_SetConfig+0xd8>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d003      	beq.n	8006ec4 <TIM_OC1_SetConfig+0x64>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a1f      	ldr	r2, [pc, #124]	; (8006f3c <TIM_OC1_SetConfig+0xdc>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d10c      	bne.n	8006ede <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	f023 0308 	bic.w	r3, r3, #8
 8006eca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f023 0304 	bic.w	r3, r3, #4
 8006edc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a15      	ldr	r2, [pc, #84]	; (8006f38 <TIM_OC1_SetConfig+0xd8>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d003      	beq.n	8006eee <TIM_OC1_SetConfig+0x8e>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a14      	ldr	r2, [pc, #80]	; (8006f3c <TIM_OC1_SetConfig+0xdc>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d111      	bne.n	8006f12 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ef4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006efc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	693a      	ldr	r2, [r7, #16]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	685a      	ldr	r2, [r3, #4]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	621a      	str	r2, [r3, #32]
}
 8006f2c:	bf00      	nop
 8006f2e:	371c      	adds	r7, #28
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr
 8006f38:	40010000 	.word	0x40010000
 8006f3c:	40010400 	.word	0x40010400

08006f40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b087      	sub	sp, #28
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6a1b      	ldr	r3, [r3, #32]
 8006f54:	f023 0210 	bic.w	r2, r3, #16
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	699b      	ldr	r3, [r3, #24]
 8006f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	021b      	lsls	r3, r3, #8
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	f023 0320 	bic.w	r3, r3, #32
 8006f8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	011b      	lsls	r3, r3, #4
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a22      	ldr	r2, [pc, #136]	; (8007024 <TIM_OC2_SetConfig+0xe4>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d003      	beq.n	8006fa8 <TIM_OC2_SetConfig+0x68>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a21      	ldr	r2, [pc, #132]	; (8007028 <TIM_OC2_SetConfig+0xe8>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d10d      	bne.n	8006fc4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	011b      	lsls	r3, r3, #4
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fc2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a17      	ldr	r2, [pc, #92]	; (8007024 <TIM_OC2_SetConfig+0xe4>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d003      	beq.n	8006fd4 <TIM_OC2_SetConfig+0x94>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a16      	ldr	r2, [pc, #88]	; (8007028 <TIM_OC2_SetConfig+0xe8>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d113      	bne.n	8006ffc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	695b      	ldr	r3, [r3, #20]
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	693a      	ldr	r2, [r7, #16]
 8007000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	621a      	str	r2, [r3, #32]
}
 8007016:	bf00      	nop
 8007018:	371c      	adds	r7, #28
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	40010000 	.word	0x40010000
 8007028:	40010400 	.word	0x40010400

0800702c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800702c:	b480      	push	{r7}
 800702e:	b087      	sub	sp, #28
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a1b      	ldr	r3, [r3, #32]
 8007040:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	69db      	ldr	r3, [r3, #28]
 8007052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800705a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f023 0303 	bic.w	r3, r3, #3
 8007062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	4313      	orrs	r3, r2
 800706c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007074:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	021b      	lsls	r3, r3, #8
 800707c:	697a      	ldr	r2, [r7, #20]
 800707e:	4313      	orrs	r3, r2
 8007080:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a21      	ldr	r2, [pc, #132]	; (800710c <TIM_OC3_SetConfig+0xe0>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d003      	beq.n	8007092 <TIM_OC3_SetConfig+0x66>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a20      	ldr	r2, [pc, #128]	; (8007110 <TIM_OC3_SetConfig+0xe4>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d10d      	bne.n	80070ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007098:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	021b      	lsls	r3, r3, #8
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a16      	ldr	r2, [pc, #88]	; (800710c <TIM_OC3_SetConfig+0xe0>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d003      	beq.n	80070be <TIM_OC3_SetConfig+0x92>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a15      	ldr	r2, [pc, #84]	; (8007110 <TIM_OC3_SetConfig+0xe4>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d113      	bne.n	80070e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	695b      	ldr	r3, [r3, #20]
 80070d2:	011b      	lsls	r3, r3, #4
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	011b      	lsls	r3, r3, #4
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	693a      	ldr	r2, [r7, #16]
 80070ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	685a      	ldr	r2, [r3, #4]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	697a      	ldr	r2, [r7, #20]
 80070fe:	621a      	str	r2, [r3, #32]
}
 8007100:	bf00      	nop
 8007102:	371c      	adds	r7, #28
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr
 800710c:	40010000 	.word	0x40010000
 8007110:	40010400 	.word	0x40010400

08007114 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007114:	b480      	push	{r7}
 8007116:	b087      	sub	sp, #28
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6a1b      	ldr	r3, [r3, #32]
 8007128:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	69db      	ldr	r3, [r3, #28]
 800713a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800714a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	021b      	lsls	r3, r3, #8
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	4313      	orrs	r3, r2
 8007156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800715e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	031b      	lsls	r3, r3, #12
 8007166:	693a      	ldr	r2, [r7, #16]
 8007168:	4313      	orrs	r3, r2
 800716a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a12      	ldr	r2, [pc, #72]	; (80071b8 <TIM_OC4_SetConfig+0xa4>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d003      	beq.n	800717c <TIM_OC4_SetConfig+0x68>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a11      	ldr	r2, [pc, #68]	; (80071bc <TIM_OC4_SetConfig+0xa8>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d109      	bne.n	8007190 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007182:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	695b      	ldr	r3, [r3, #20]
 8007188:	019b      	lsls	r3, r3, #6
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	4313      	orrs	r3, r2
 800718e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	697a      	ldr	r2, [r7, #20]
 8007194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	693a      	ldr	r2, [r7, #16]
 80071a8:	621a      	str	r2, [r3, #32]
}
 80071aa:	bf00      	nop
 80071ac:	371c      	adds	r7, #28
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	40010000 	.word	0x40010000
 80071bc:	40010400 	.word	0x40010400

080071c0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071ca:	2300      	movs	r3, #0
 80071cc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071dc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	693a      	ldr	r2, [r7, #16]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	f023 0307 	bic.w	r3, r3, #7
 80071ee:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	2b70      	cmp	r3, #112	; 0x70
 8007208:	d01a      	beq.n	8007240 <TIM_SlaveTimer_SetConfig+0x80>
 800720a:	2b70      	cmp	r3, #112	; 0x70
 800720c:	d860      	bhi.n	80072d0 <TIM_SlaveTimer_SetConfig+0x110>
 800720e:	2b60      	cmp	r3, #96	; 0x60
 8007210:	d054      	beq.n	80072bc <TIM_SlaveTimer_SetConfig+0xfc>
 8007212:	2b60      	cmp	r3, #96	; 0x60
 8007214:	d85c      	bhi.n	80072d0 <TIM_SlaveTimer_SetConfig+0x110>
 8007216:	2b50      	cmp	r3, #80	; 0x50
 8007218:	d046      	beq.n	80072a8 <TIM_SlaveTimer_SetConfig+0xe8>
 800721a:	2b50      	cmp	r3, #80	; 0x50
 800721c:	d858      	bhi.n	80072d0 <TIM_SlaveTimer_SetConfig+0x110>
 800721e:	2b40      	cmp	r3, #64	; 0x40
 8007220:	d019      	beq.n	8007256 <TIM_SlaveTimer_SetConfig+0x96>
 8007222:	2b40      	cmp	r3, #64	; 0x40
 8007224:	d854      	bhi.n	80072d0 <TIM_SlaveTimer_SetConfig+0x110>
 8007226:	2b30      	cmp	r3, #48	; 0x30
 8007228:	d055      	beq.n	80072d6 <TIM_SlaveTimer_SetConfig+0x116>
 800722a:	2b30      	cmp	r3, #48	; 0x30
 800722c:	d850      	bhi.n	80072d0 <TIM_SlaveTimer_SetConfig+0x110>
 800722e:	2b20      	cmp	r3, #32
 8007230:	d051      	beq.n	80072d6 <TIM_SlaveTimer_SetConfig+0x116>
 8007232:	2b20      	cmp	r3, #32
 8007234:	d84c      	bhi.n	80072d0 <TIM_SlaveTimer_SetConfig+0x110>
 8007236:	2b00      	cmp	r3, #0
 8007238:	d04d      	beq.n	80072d6 <TIM_SlaveTimer_SetConfig+0x116>
 800723a:	2b10      	cmp	r3, #16
 800723c:	d04b      	beq.n	80072d6 <TIM_SlaveTimer_SetConfig+0x116>
 800723e:	e047      	b.n	80072d0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8007250:	f000 f8c1 	bl	80073d6 <TIM_ETR_SetConfig>
      break;
 8007254:	e040      	b.n	80072d8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2b05      	cmp	r3, #5
 800725c:	d101      	bne.n	8007262 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e03b      	b.n	80072da <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	6a1b      	ldr	r3, [r3, #32]
 8007268:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	6a1a      	ldr	r2, [r3, #32]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f022 0201 	bic.w	r2, r2, #1
 8007278:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007288:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	011b      	lsls	r3, r3, #4
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	4313      	orrs	r3, r2
 8007294:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68ba      	ldr	r2, [r7, #8]
 800729c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	621a      	str	r2, [r3, #32]
      break;
 80072a6:	e017      	b.n	80072d8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072b4:	461a      	mov	r2, r3
 80072b6:	f000 f814 	bl	80072e2 <TIM_TI1_ConfigInputStage>
      break;
 80072ba:	e00d      	b.n	80072d8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80072c8:	461a      	mov	r2, r3
 80072ca:	f000 f839 	bl	8007340 <TIM_TI2_ConfigInputStage>
      break;
 80072ce:	e003      	b.n	80072d8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	75fb      	strb	r3, [r7, #23]
      break;
 80072d4:	e000      	b.n	80072d8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80072d6:	bf00      	nop
  }

  return status;
 80072d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3718      	adds	r7, #24
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072e2:	b480      	push	{r7}
 80072e4:	b087      	sub	sp, #28
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	60f8      	str	r0, [r7, #12]
 80072ea:	60b9      	str	r1, [r7, #8]
 80072ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6a1b      	ldr	r3, [r3, #32]
 80072f8:	f023 0201 	bic.w	r2, r3, #1
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	699b      	ldr	r3, [r3, #24]
 8007304:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800730c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	011b      	lsls	r3, r3, #4
 8007312:	693a      	ldr	r2, [r7, #16]
 8007314:	4313      	orrs	r3, r2
 8007316:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	f023 030a 	bic.w	r3, r3, #10
 800731e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007320:	697a      	ldr	r2, [r7, #20]
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	4313      	orrs	r3, r2
 8007326:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	693a      	ldr	r2, [r7, #16]
 800732c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	697a      	ldr	r2, [r7, #20]
 8007332:	621a      	str	r2, [r3, #32]
}
 8007334:	bf00      	nop
 8007336:	371c      	adds	r7, #28
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007340:	b480      	push	{r7}
 8007342:	b087      	sub	sp, #28
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6a1b      	ldr	r3, [r3, #32]
 8007350:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6a1b      	ldr	r3, [r3, #32]
 8007356:	f023 0210 	bic.w	r2, r3, #16
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	699b      	ldr	r3, [r3, #24]
 8007362:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800736a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	031b      	lsls	r3, r3, #12
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	4313      	orrs	r3, r2
 8007374:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800737c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	011b      	lsls	r3, r3, #4
 8007382:	697a      	ldr	r2, [r7, #20]
 8007384:	4313      	orrs	r3, r2
 8007386:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	693a      	ldr	r2, [r7, #16]
 800738c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	697a      	ldr	r2, [r7, #20]
 8007392:	621a      	str	r2, [r3, #32]
}
 8007394:	bf00      	nop
 8007396:	371c      	adds	r7, #28
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073b8:	683a      	ldr	r2, [r7, #0]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	4313      	orrs	r3, r2
 80073be:	f043 0307 	orr.w	r3, r3, #7
 80073c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	609a      	str	r2, [r3, #8]
}
 80073ca:	bf00      	nop
 80073cc:	3714      	adds	r7, #20
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr

080073d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073d6:	b480      	push	{r7}
 80073d8:	b087      	sub	sp, #28
 80073da:	af00      	add	r7, sp, #0
 80073dc:	60f8      	str	r0, [r7, #12]
 80073de:	60b9      	str	r1, [r7, #8]
 80073e0:	607a      	str	r2, [r7, #4]
 80073e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	021a      	lsls	r2, r3, #8
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	431a      	orrs	r2, r3
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	697a      	ldr	r2, [r7, #20]
 8007400:	4313      	orrs	r3, r2
 8007402:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	697a      	ldr	r2, [r7, #20]
 8007408:	609a      	str	r2, [r3, #8]
}
 800740a:	bf00      	nop
 800740c:	371c      	adds	r7, #28
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr

08007416 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007416:	b480      	push	{r7}
 8007418:	b087      	sub	sp, #28
 800741a:	af00      	add	r7, sp, #0
 800741c:	60f8      	str	r0, [r7, #12]
 800741e:	60b9      	str	r1, [r7, #8]
 8007420:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	f003 031f 	and.w	r3, r3, #31
 8007428:	2201      	movs	r2, #1
 800742a:	fa02 f303 	lsl.w	r3, r2, r3
 800742e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6a1a      	ldr	r2, [r3, #32]
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	43db      	mvns	r3, r3
 8007438:	401a      	ands	r2, r3
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6a1a      	ldr	r2, [r3, #32]
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	f003 031f 	and.w	r3, r3, #31
 8007448:	6879      	ldr	r1, [r7, #4]
 800744a:	fa01 f303 	lsl.w	r3, r1, r3
 800744e:	431a      	orrs	r2, r3
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	621a      	str	r2, [r3, #32]
}
 8007454:	bf00      	nop
 8007456:	371c      	adds	r7, #28
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007460:	b480      	push	{r7}
 8007462:	b085      	sub	sp, #20
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007470:	2b01      	cmp	r3, #1
 8007472:	d101      	bne.n	8007478 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007474:	2302      	movs	r3, #2
 8007476:	e05a      	b.n	800752e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2202      	movs	r2, #2
 8007484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800749e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a21      	ldr	r2, [pc, #132]	; (800753c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d022      	beq.n	8007502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074c4:	d01d      	beq.n	8007502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a1d      	ldr	r2, [pc, #116]	; (8007540 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d018      	beq.n	8007502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a1b      	ldr	r2, [pc, #108]	; (8007544 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d013      	beq.n	8007502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a1a      	ldr	r2, [pc, #104]	; (8007548 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d00e      	beq.n	8007502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a18      	ldr	r2, [pc, #96]	; (800754c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d009      	beq.n	8007502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a17      	ldr	r2, [pc, #92]	; (8007550 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d004      	beq.n	8007502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a15      	ldr	r2, [pc, #84]	; (8007554 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d10c      	bne.n	800751c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007508:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	68ba      	ldr	r2, [r7, #8]
 8007510:	4313      	orrs	r3, r2
 8007512:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3714      	adds	r7, #20
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	40010000 	.word	0x40010000
 8007540:	40000400 	.word	0x40000400
 8007544:	40000800 	.word	0x40000800
 8007548:	40000c00 	.word	0x40000c00
 800754c:	40010400 	.word	0x40010400
 8007550:	40014000 	.word	0x40014000
 8007554:	40001800 	.word	0x40001800

08007558 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007562:	2300      	movs	r3, #0
 8007564:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800756c:	2b01      	cmp	r3, #1
 800756e:	d101      	bne.n	8007574 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007570:	2302      	movs	r3, #2
 8007572:	e03d      	b.n	80075f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	4313      	orrs	r3, r2
 8007588:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	4313      	orrs	r3, r2
 8007596:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	4313      	orrs	r3, r2
 80075c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	695b      	ldr	r3, [r3, #20]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	69db      	ldr	r3, [r3, #28]
 80075da:	4313      	orrs	r3, r2
 80075dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3714      	adds	r7, #20
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007604:	bf00      	nop
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007618:	bf00      	nop
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <memset>:
 8007624:	4402      	add	r2, r0
 8007626:	4603      	mov	r3, r0
 8007628:	4293      	cmp	r3, r2
 800762a:	d100      	bne.n	800762e <memset+0xa>
 800762c:	4770      	bx	lr
 800762e:	f803 1b01 	strb.w	r1, [r3], #1
 8007632:	e7f9      	b.n	8007628 <memset+0x4>

08007634 <__libc_init_array>:
 8007634:	b570      	push	{r4, r5, r6, lr}
 8007636:	4d0d      	ldr	r5, [pc, #52]	; (800766c <__libc_init_array+0x38>)
 8007638:	4c0d      	ldr	r4, [pc, #52]	; (8007670 <__libc_init_array+0x3c>)
 800763a:	1b64      	subs	r4, r4, r5
 800763c:	10a4      	asrs	r4, r4, #2
 800763e:	2600      	movs	r6, #0
 8007640:	42a6      	cmp	r6, r4
 8007642:	d109      	bne.n	8007658 <__libc_init_array+0x24>
 8007644:	4d0b      	ldr	r5, [pc, #44]	; (8007674 <__libc_init_array+0x40>)
 8007646:	4c0c      	ldr	r4, [pc, #48]	; (8007678 <__libc_init_array+0x44>)
 8007648:	f000 f818 	bl	800767c <_init>
 800764c:	1b64      	subs	r4, r4, r5
 800764e:	10a4      	asrs	r4, r4, #2
 8007650:	2600      	movs	r6, #0
 8007652:	42a6      	cmp	r6, r4
 8007654:	d105      	bne.n	8007662 <__libc_init_array+0x2e>
 8007656:	bd70      	pop	{r4, r5, r6, pc}
 8007658:	f855 3b04 	ldr.w	r3, [r5], #4
 800765c:	4798      	blx	r3
 800765e:	3601      	adds	r6, #1
 8007660:	e7ee      	b.n	8007640 <__libc_init_array+0xc>
 8007662:	f855 3b04 	ldr.w	r3, [r5], #4
 8007666:	4798      	blx	r3
 8007668:	3601      	adds	r6, #1
 800766a:	e7f2      	b.n	8007652 <__libc_init_array+0x1e>
 800766c:	080076b4 	.word	0x080076b4
 8007670:	080076b4 	.word	0x080076b4
 8007674:	080076b4 	.word	0x080076b4
 8007678:	080076b8 	.word	0x080076b8

0800767c <_init>:
 800767c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767e:	bf00      	nop
 8007680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007682:	bc08      	pop	{r3}
 8007684:	469e      	mov	lr, r3
 8007686:	4770      	bx	lr

08007688 <_fini>:
 8007688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800768a:	bf00      	nop
 800768c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800768e:	bc08      	pop	{r3}
 8007690:	469e      	mov	lr, r3
 8007692:	4770      	bx	lr
