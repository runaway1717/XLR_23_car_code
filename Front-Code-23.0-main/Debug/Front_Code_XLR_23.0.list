
Front_Code_XLR_23.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bd4  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08005d84  08005d84  00015d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d94  08005d94  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d94  08005d94  00015d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d9c  08005d9c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d9c  08005d9c  00015d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005da0  08005da0  00015da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005da4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00000390  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003ac  200003ac  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d005  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001dbd  00000000  00000000  0002d094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c88  00000000  00000000  0002ee58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009af  00000000  00000000  0002fae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000240c8  00000000  00000000  0003048f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e688  00000000  00000000  00054557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e314b  00000000  00000000  00062bdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003690  00000000  00000000  00145d2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  001493bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005d6c 	.word	0x08005d6c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000020 	.word	0x20000020
 80001ec:	08005d6c 	.word	0x08005d6c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b970 	b.w	8000e74 <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9e08      	ldr	r6, [sp, #32]
 8000bb2:	460d      	mov	r5, r1
 8000bb4:	4604      	mov	r4, r0
 8000bb6:	460f      	mov	r7, r1
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d14a      	bne.n	8000c52 <__udivmoddi4+0xa6>
 8000bbc:	428a      	cmp	r2, r1
 8000bbe:	4694      	mov	ip, r2
 8000bc0:	d965      	bls.n	8000c8e <__udivmoddi4+0xe2>
 8000bc2:	fab2 f382 	clz	r3, r2
 8000bc6:	b143      	cbz	r3, 8000bda <__udivmoddi4+0x2e>
 8000bc8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bcc:	f1c3 0220 	rsb	r2, r3, #32
 8000bd0:	409f      	lsls	r7, r3
 8000bd2:	fa20 f202 	lsr.w	r2, r0, r2
 8000bd6:	4317      	orrs	r7, r2
 8000bd8:	409c      	lsls	r4, r3
 8000bda:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bde:	fa1f f58c 	uxth.w	r5, ip
 8000be2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000be6:	0c22      	lsrs	r2, r4, #16
 8000be8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bf0:	fb01 f005 	mul.w	r0, r1, r5
 8000bf4:	4290      	cmp	r0, r2
 8000bf6:	d90a      	bls.n	8000c0e <__udivmoddi4+0x62>
 8000bf8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bfc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c00:	f080 811c 	bcs.w	8000e3c <__udivmoddi4+0x290>
 8000c04:	4290      	cmp	r0, r2
 8000c06:	f240 8119 	bls.w	8000e3c <__udivmoddi4+0x290>
 8000c0a:	3902      	subs	r1, #2
 8000c0c:	4462      	add	r2, ip
 8000c0e:	1a12      	subs	r2, r2, r0
 8000c10:	b2a4      	uxth	r4, r4
 8000c12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c1a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c1e:	fb00 f505 	mul.w	r5, r0, r5
 8000c22:	42a5      	cmp	r5, r4
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x90>
 8000c26:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c2e:	f080 8107 	bcs.w	8000e40 <__udivmoddi4+0x294>
 8000c32:	42a5      	cmp	r5, r4
 8000c34:	f240 8104 	bls.w	8000e40 <__udivmoddi4+0x294>
 8000c38:	4464      	add	r4, ip
 8000c3a:	3802      	subs	r0, #2
 8000c3c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c40:	1b64      	subs	r4, r4, r5
 8000c42:	2100      	movs	r1, #0
 8000c44:	b11e      	cbz	r6, 8000c4e <__udivmoddi4+0xa2>
 8000c46:	40dc      	lsrs	r4, r3
 8000c48:	2300      	movs	r3, #0
 8000c4a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d908      	bls.n	8000c68 <__udivmoddi4+0xbc>
 8000c56:	2e00      	cmp	r6, #0
 8000c58:	f000 80ed 	beq.w	8000e36 <__udivmoddi4+0x28a>
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c62:	4608      	mov	r0, r1
 8000c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c68:	fab3 f183 	clz	r1, r3
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	d149      	bne.n	8000d04 <__udivmoddi4+0x158>
 8000c70:	42ab      	cmp	r3, r5
 8000c72:	d302      	bcc.n	8000c7a <__udivmoddi4+0xce>
 8000c74:	4282      	cmp	r2, r0
 8000c76:	f200 80f8 	bhi.w	8000e6a <__udivmoddi4+0x2be>
 8000c7a:	1a84      	subs	r4, r0, r2
 8000c7c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c80:	2001      	movs	r0, #1
 8000c82:	4617      	mov	r7, r2
 8000c84:	2e00      	cmp	r6, #0
 8000c86:	d0e2      	beq.n	8000c4e <__udivmoddi4+0xa2>
 8000c88:	e9c6 4700 	strd	r4, r7, [r6]
 8000c8c:	e7df      	b.n	8000c4e <__udivmoddi4+0xa2>
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xe6>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f382 	clz	r3, r2
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f040 8090 	bne.w	8000dbc <__udivmoddi4+0x210>
 8000c9c:	1a8a      	subs	r2, r1, r2
 8000c9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca2:	fa1f fe8c 	uxth.w	lr, ip
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cac:	fb07 2015 	mls	r0, r7, r5, r2
 8000cb0:	0c22      	lsrs	r2, r4, #16
 8000cb2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cb6:	fb0e f005 	mul.w	r0, lr, r5
 8000cba:	4290      	cmp	r0, r2
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x124>
 8000cbe:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x122>
 8000cc8:	4290      	cmp	r0, r2
 8000cca:	f200 80cb 	bhi.w	8000e64 <__udivmoddi4+0x2b8>
 8000cce:	4645      	mov	r5, r8
 8000cd0:	1a12      	subs	r2, r2, r0
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cd8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cdc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ce0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ce4:	45a6      	cmp	lr, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x14e>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf0:	d202      	bcs.n	8000cf8 <__udivmoddi4+0x14c>
 8000cf2:	45a6      	cmp	lr, r4
 8000cf4:	f200 80bb 	bhi.w	8000e6e <__udivmoddi4+0x2c2>
 8000cf8:	4610      	mov	r0, r2
 8000cfa:	eba4 040e 	sub.w	r4, r4, lr
 8000cfe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d02:	e79f      	b.n	8000c44 <__udivmoddi4+0x98>
 8000d04:	f1c1 0720 	rsb	r7, r1, #32
 8000d08:	408b      	lsls	r3, r1
 8000d0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d12:	fa05 f401 	lsl.w	r4, r5, r1
 8000d16:	fa20 f307 	lsr.w	r3, r0, r7
 8000d1a:	40fd      	lsrs	r5, r7
 8000d1c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d20:	4323      	orrs	r3, r4
 8000d22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d2e:	0c1c      	lsrs	r4, r3, #16
 8000d30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d34:	fb08 f50e 	mul.w	r5, r8, lr
 8000d38:	42a5      	cmp	r5, r4
 8000d3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d3e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d42:	d90b      	bls.n	8000d5c <__udivmoddi4+0x1b0>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d4c:	f080 8088 	bcs.w	8000e60 <__udivmoddi4+0x2b4>
 8000d50:	42a5      	cmp	r5, r4
 8000d52:	f240 8085 	bls.w	8000e60 <__udivmoddi4+0x2b4>
 8000d56:	f1a8 0802 	sub.w	r8, r8, #2
 8000d5a:	4464      	add	r4, ip
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	b29d      	uxth	r5, r3
 8000d60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d64:	fb09 4413 	mls	r4, r9, r3, r4
 8000d68:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d6c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d70:	45a6      	cmp	lr, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x1da>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d7c:	d26c      	bcs.n	8000e58 <__udivmoddi4+0x2ac>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	d96a      	bls.n	8000e58 <__udivmoddi4+0x2ac>
 8000d82:	3b02      	subs	r3, #2
 8000d84:	4464      	add	r4, ip
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d8e:	eba4 040e 	sub.w	r4, r4, lr
 8000d92:	42ac      	cmp	r4, r5
 8000d94:	46c8      	mov	r8, r9
 8000d96:	46ae      	mov	lr, r5
 8000d98:	d356      	bcc.n	8000e48 <__udivmoddi4+0x29c>
 8000d9a:	d053      	beq.n	8000e44 <__udivmoddi4+0x298>
 8000d9c:	b156      	cbz	r6, 8000db4 <__udivmoddi4+0x208>
 8000d9e:	ebb0 0208 	subs.w	r2, r0, r8
 8000da2:	eb64 040e 	sbc.w	r4, r4, lr
 8000da6:	fa04 f707 	lsl.w	r7, r4, r7
 8000daa:	40ca      	lsrs	r2, r1
 8000dac:	40cc      	lsrs	r4, r1
 8000dae:	4317      	orrs	r7, r2
 8000db0:	e9c6 7400 	strd	r7, r4, [r6]
 8000db4:	4618      	mov	r0, r3
 8000db6:	2100      	movs	r1, #0
 8000db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbc:	f1c3 0120 	rsb	r1, r3, #32
 8000dc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dc4:	fa20 f201 	lsr.w	r2, r0, r1
 8000dc8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dcc:	409d      	lsls	r5, r3
 8000dce:	432a      	orrs	r2, r5
 8000dd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd4:	fa1f fe8c 	uxth.w	lr, ip
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1510 	mls	r5, r7, r0, r1
 8000de0:	0c11      	lsrs	r1, r2, #16
 8000de2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000de6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dea:	428d      	cmp	r5, r1
 8000dec:	fa04 f403 	lsl.w	r4, r4, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x258>
 8000df2:	eb1c 0101 	adds.w	r1, ip, r1
 8000df6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dfa:	d22f      	bcs.n	8000e5c <__udivmoddi4+0x2b0>
 8000dfc:	428d      	cmp	r5, r1
 8000dfe:	d92d      	bls.n	8000e5c <__udivmoddi4+0x2b0>
 8000e00:	3802      	subs	r0, #2
 8000e02:	4461      	add	r1, ip
 8000e04:	1b49      	subs	r1, r1, r5
 8000e06:	b292      	uxth	r2, r2
 8000e08:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e0c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e14:	fb05 f10e 	mul.w	r1, r5, lr
 8000e18:	4291      	cmp	r1, r2
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x282>
 8000e1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e20:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e24:	d216      	bcs.n	8000e54 <__udivmoddi4+0x2a8>
 8000e26:	4291      	cmp	r1, r2
 8000e28:	d914      	bls.n	8000e54 <__udivmoddi4+0x2a8>
 8000e2a:	3d02      	subs	r5, #2
 8000e2c:	4462      	add	r2, ip
 8000e2e:	1a52      	subs	r2, r2, r1
 8000e30:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e34:	e738      	b.n	8000ca8 <__udivmoddi4+0xfc>
 8000e36:	4631      	mov	r1, r6
 8000e38:	4630      	mov	r0, r6
 8000e3a:	e708      	b.n	8000c4e <__udivmoddi4+0xa2>
 8000e3c:	4639      	mov	r1, r7
 8000e3e:	e6e6      	b.n	8000c0e <__udivmoddi4+0x62>
 8000e40:	4610      	mov	r0, r2
 8000e42:	e6fb      	b.n	8000c3c <__udivmoddi4+0x90>
 8000e44:	4548      	cmp	r0, r9
 8000e46:	d2a9      	bcs.n	8000d9c <__udivmoddi4+0x1f0>
 8000e48:	ebb9 0802 	subs.w	r8, r9, r2
 8000e4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e50:	3b01      	subs	r3, #1
 8000e52:	e7a3      	b.n	8000d9c <__udivmoddi4+0x1f0>
 8000e54:	4645      	mov	r5, r8
 8000e56:	e7ea      	b.n	8000e2e <__udivmoddi4+0x282>
 8000e58:	462b      	mov	r3, r5
 8000e5a:	e794      	b.n	8000d86 <__udivmoddi4+0x1da>
 8000e5c:	4640      	mov	r0, r8
 8000e5e:	e7d1      	b.n	8000e04 <__udivmoddi4+0x258>
 8000e60:	46d0      	mov	r8, sl
 8000e62:	e77b      	b.n	8000d5c <__udivmoddi4+0x1b0>
 8000e64:	3d02      	subs	r5, #2
 8000e66:	4462      	add	r2, ip
 8000e68:	e732      	b.n	8000cd0 <__udivmoddi4+0x124>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e70a      	b.n	8000c84 <__udivmoddi4+0xd8>
 8000e6e:	4464      	add	r4, ip
 8000e70:	3802      	subs	r0, #2
 8000e72:	e742      	b.n	8000cfa <__udivmoddi4+0x14e>

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <ADC_Read>:
/* USER CODE END 0 */

/* USER CODE BEGIN 1 */

uint16_t ADC_Read(ADC_HandleTypeDef* hadc, uint32_t ADC_CH)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
	uint32_t val;
	ADC_ChannelConfTypeDef sConfig = {0};
 8000e82:	f107 030c 	add.w	r3, r7, #12
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CH;
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = 1;
 8000e94:	2301      	movs	r3, #1
 8000e96:	613b      	str	r3, [r7, #16]
	HAL_ADC_ConfigChannel(hadc, &sConfig);
 8000e98:	f107 030c 	add.w	r3, r7, #12
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f002 fa8a 	bl	80033b8 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(hadc);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f002 f8e9 	bl	800307c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(hadc, 1);
 8000eaa:	2101      	movs	r1, #1
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f002 f9ea 	bl	8003286 <HAL_ADC_PollForConversion>
	val = HAL_ADC_GetValue(hadc);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f002 fa72 	bl	800339c <HAL_ADC_GetValue>
 8000eb8:	61f8      	str	r0, [r7, #28]
	HAL_ADC_Stop(hadc);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f002 f9b0 	bl	8003220 <HAL_ADC_Stop>
	return val;
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	b29b      	uxth	r3, r3
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3720      	adds	r7, #32
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	0000      	movs	r0, r0
	...

08000ed0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed0:	b5b0      	push	{r4, r5, r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed4:	f002 f81c 	bl	8002f10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed8:	f000 fcb4 	bl	8001844 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000edc:	f000 fede 	bl	8001c9c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ee0:	f000 fd10 	bl	8001904 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000ee4:	f000 fd60 	bl	80019a8 <MX_ADC3_Init>
  MX_CAN1_Init();
 8000ee8:	f000 fdb0 	bl	8001a4c <MX_CAN1_Init>
  MX_CAN2_Init();
 8000eec:	f000 fde4 	bl	8001ab8 <MX_CAN2_Init>
  MX_TIM6_Init();
 8000ef0:	f000 fe68 	bl	8001bc4 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000ef4:	f000 fe9c 	bl	8001c30 <MX_TIM7_Init>
  MX_TIM5_Init();
 8000ef8:	f000 fe14 	bl	8001b24 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

 // commenting it to remove can
  CAN_Start();
 8000efc:	f000 ffe8 	bl	8001ed0 <CAN_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8000f00:	48c5      	ldr	r0, [pc, #788]	; (8001218 <main+0x348>)
 8000f02:	f004 fab5 	bl	8005470 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//xvel=4;
	adc_apps1 = ADC_Read(&hadc1, ADC_CHANNEL_8);
 8000f06:	2108      	movs	r1, #8
 8000f08:	48c4      	ldr	r0, [pc, #784]	; (800121c <main+0x34c>)
 8000f0a:	f7ff ffb5 	bl	8000e78 <ADC_Read>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	4bc3      	ldr	r3, [pc, #780]	; (8001220 <main+0x350>)
 8000f14:	801a      	strh	r2, [r3, #0]
	adc_apps2 = ADC_Read(&hadc1, ADC_CHANNEL_9);
 8000f16:	2109      	movs	r1, #9
 8000f18:	48c0      	ldr	r0, [pc, #768]	; (800121c <main+0x34c>)
 8000f1a:	f7ff ffad 	bl	8000e78 <ADC_Read>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	4bc0      	ldr	r3, [pc, #768]	; (8001224 <main+0x354>)
 8000f24:	801a      	strh	r2, [r3, #0]
	adc_brk1 = ADC_Read(&hadc1,ADC_CHANNEL_7);
 8000f26:	2107      	movs	r1, #7
 8000f28:	48bc      	ldr	r0, [pc, #752]	; (800121c <main+0x34c>)
 8000f2a:	f7ff ffa5 	bl	8000e78 <ADC_Read>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	4bbd      	ldr	r3, [pc, #756]	; (8001228 <main+0x358>)
 8000f34:	801a      	strh	r2, [r3, #0]
	adc_brk2 = ADC_Read(&hadc1,ADC_CHANNEL_6);//front
 8000f36:	2106      	movs	r1, #6
 8000f38:	48b8      	ldr	r0, [pc, #736]	; (800121c <main+0x34c>)
 8000f3a:	f7ff ff9d 	bl	8000e78 <ADC_Read>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	4bba      	ldr	r3, [pc, #744]	; (800122c <main+0x35c>)
 8000f44:	801a      	strh	r2, [r3, #0]




	adc_damper_left = ADC_Read(&hadc3, ADC_CHANNEL_9);// left damper
 8000f46:	2109      	movs	r1, #9
 8000f48:	48b9      	ldr	r0, [pc, #740]	; (8001230 <main+0x360>)
 8000f4a:	f7ff ff95 	bl	8000e78 <ADC_Read>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	4bb8      	ldr	r3, [pc, #736]	; (8001234 <main+0x364>)
 8000f54:	801a      	strh	r2, [r3, #0]
	adc_damper_right = ADC_Read(&hadc3, ADC_CHANNEL_14);//right damper
 8000f56:	210e      	movs	r1, #14
 8000f58:	48b5      	ldr	r0, [pc, #724]	; (8001230 <main+0x360>)
 8000f5a:	f7ff ff8d 	bl	8000e78 <ADC_Read>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	4bb5      	ldr	r3, [pc, #724]	; (8001238 <main+0x368>)
 8000f64:	801a      	strh	r2, [r3, #0]
	adc_steer_sens = ADC_Read(&hadc1,ADC_CHANNEL_5);
 8000f66:	2105      	movs	r1, #5
 8000f68:	48ac      	ldr	r0, [pc, #688]	; (800121c <main+0x34c>)
 8000f6a:	f7ff ff85 	bl	8000e78 <ADC_Read>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	4bb2      	ldr	r3, [pc, #712]	; (800123c <main+0x36c>)
 8000f74:	801a      	strh	r2, [r3, #0]
	adc_ir_sens= ADC_Read(&hadc3,ADC_CHANNEL_15);
 8000f76:	210f      	movs	r1, #15
 8000f78:	48ad      	ldr	r0, [pc, #692]	; (8001230 <main+0x360>)
 8000f7a:	f7ff ff7d 	bl	8000e78 <ADC_Read>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	4baf      	ldr	r3, [pc, #700]	; (8001240 <main+0x370>)
 8000f84:	801a      	strh	r2, [r3, #0]


	app1 = map(adc_apps1, range_adc_apps1[0], range_adc_apps1[1],100);
 8000f86:	4ba6      	ldr	r3, [pc, #664]	; (8001220 <main+0x350>)
 8000f88:	8818      	ldrh	r0, [r3, #0]
 8000f8a:	4bae      	ldr	r3, [pc, #696]	; (8001244 <main+0x374>)
 8000f8c:	8819      	ldrh	r1, [r3, #0]
 8000f8e:	4bad      	ldr	r3, [pc, #692]	; (8001244 <main+0x374>)
 8000f90:	885a      	ldrh	r2, [r3, #2]
 8000f92:	2364      	movs	r3, #100	; 0x64
 8000f94:	f001 f89a 	bl	80020cc <map>
 8000f98:	eef0 7a40 	vmov.f32	s15, s0
 8000f9c:	4baa      	ldr	r3, [pc, #680]	; (8001248 <main+0x378>)
 8000f9e:	edc3 7a00 	vstr	s15, [r3]
	app2 = map(adc_apps2, range_adc_apps2[0], range_adc_apps2[1],100);
 8000fa2:	4ba0      	ldr	r3, [pc, #640]	; (8001224 <main+0x354>)
 8000fa4:	8818      	ldrh	r0, [r3, #0]
 8000fa6:	4ba9      	ldr	r3, [pc, #676]	; (800124c <main+0x37c>)
 8000fa8:	8819      	ldrh	r1, [r3, #0]
 8000faa:	4ba8      	ldr	r3, [pc, #672]	; (800124c <main+0x37c>)
 8000fac:	885a      	ldrh	r2, [r3, #2]
 8000fae:	2364      	movs	r3, #100	; 0x64
 8000fb0:	f001 f88c 	bl	80020cc <map>
 8000fb4:	eef0 7a40 	vmov.f32	s15, s0
 8000fb8:	4ba5      	ldr	r3, [pc, #660]	; (8001250 <main+0x380>)
 8000fba:	edc3 7a00 	vstr	s15, [r3]
	apps_avg = (app1+app2)/2;
 8000fbe:	4ba2      	ldr	r3, [pc, #648]	; (8001248 <main+0x378>)
 8000fc0:	ed93 7a00 	vldr	s14, [r3]
 8000fc4:	4ba2      	ldr	r3, [pc, #648]	; (8001250 <main+0x380>)
 8000fc6:	edd3 7a00 	vldr	s15, [r3]
 8000fca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fce:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000fd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fd6:	4b9f      	ldr	r3, [pc, #636]	; (8001254 <main+0x384>)
 8000fd8:	edc3 7a00 	vstr	s15, [r3]
	torque_demand=(apps_avg/100)*torque_limit;
 8000fdc:	4b9d      	ldr	r3, [pc, #628]	; (8001254 <main+0x384>)
 8000fde:	edd3 7a00 	vldr	s15, [r3]
 8000fe2:	eddf 6a9d 	vldr	s13, [pc, #628]	; 8001258 <main+0x388>
 8000fe6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000fea:	4b9c      	ldr	r3, [pc, #624]	; (800125c <main+0x38c>)
 8000fec:	881b      	ldrh	r3, [r3, #0]
 8000fee:	ee07 3a90 	vmov	s15, r3
 8000ff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ffa:	4b99      	ldr	r3, [pc, #612]	; (8001260 <main+0x390>)
 8000ffc:	edc3 7a00 	vstr	s15, [r3]
	brk_avg = (adc_brk1+adc_brk2)/2;
 8001000:	4b89      	ldr	r3, [pc, #548]	; (8001228 <main+0x358>)
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	4b89      	ldr	r3, [pc, #548]	; (800122c <main+0x35c>)
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	4413      	add	r3, r2
 800100c:	0fda      	lsrs	r2, r3, #31
 800100e:	4413      	add	r3, r2
 8001010:	105b      	asrs	r3, r3, #1
 8001012:	b29a      	uxth	r2, r3
 8001014:	4b93      	ldr	r3, [pc, #588]	; (8001264 <main+0x394>)
 8001016:	801a      	strh	r2, [r3, #0]
	FrontBrakePressure = 1 + 0.0225*(adc_brk2 - 372.27);
 8001018:	4b84      	ldr	r3, [pc, #528]	; (800122c <main+0x35c>)
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fa39 	bl	8000494 <__aeabi_i2d>
 8001022:	a371      	add	r3, pc, #452	; (adr r3, 80011e8 <main+0x318>)
 8001024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001028:	f7ff f8e6 	bl	80001f8 <__aeabi_dsub>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4610      	mov	r0, r2
 8001032:	4619      	mov	r1, r3
 8001034:	a36e      	add	r3, pc, #440	; (adr r3, 80011f0 <main+0x320>)
 8001036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103a:	f7ff fa95 	bl	8000568 <__aeabi_dmul>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4610      	mov	r0, r2
 8001044:	4619      	mov	r1, r3
 8001046:	f04f 0200 	mov.w	r2, #0
 800104a:	4b87      	ldr	r3, [pc, #540]	; (8001268 <main+0x398>)
 800104c:	f7ff f8d6 	bl	80001fc <__adddf3>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4610      	mov	r0, r2
 8001056:	4619      	mov	r1, r3
 8001058:	f7ff fd20 	bl	8000a9c <__aeabi_d2uiz>
 800105c:	4603      	mov	r3, r0
 800105e:	b29a      	uxth	r2, r3
 8001060:	4b82      	ldr	r3, [pc, #520]	; (800126c <main+0x39c>)
 8001062:	801a      	strh	r2, [r3, #0]
	RearBrakePressure = 1 + 0.0225*(adc_brk1 - 372.27);
 8001064:	4b70      	ldr	r3, [pc, #448]	; (8001228 <main+0x358>)
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fa13 	bl	8000494 <__aeabi_i2d>
 800106e:	a35e      	add	r3, pc, #376	; (adr r3, 80011e8 <main+0x318>)
 8001070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001074:	f7ff f8c0 	bl	80001f8 <__aeabi_dsub>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4610      	mov	r0, r2
 800107e:	4619      	mov	r1, r3
 8001080:	a35b      	add	r3, pc, #364	; (adr r3, 80011f0 <main+0x320>)
 8001082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001086:	f7ff fa6f 	bl	8000568 <__aeabi_dmul>
 800108a:	4602      	mov	r2, r0
 800108c:	460b      	mov	r3, r1
 800108e:	4610      	mov	r0, r2
 8001090:	4619      	mov	r1, r3
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	4b74      	ldr	r3, [pc, #464]	; (8001268 <main+0x398>)
 8001098:	f7ff f8b0 	bl	80001fc <__adddf3>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	4610      	mov	r0, r2
 80010a2:	4619      	mov	r1, r3
 80010a4:	f7ff fcfa 	bl	8000a9c <__aeabi_d2uiz>
 80010a8:	4603      	mov	r3, r0
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	4b70      	ldr	r3, [pc, #448]	; (8001270 <main+0x3a0>)
 80010ae:	801a      	strh	r2, [r3, #0]
	softBSPD();
 80010b0:	f001 f894 	bl	80021dc <softBSPD>
	implausiblityCheck();
 80010b4:	f001 f858 	bl	8002168 <implausiblityCheck>
	steering_degree= ((adc_steer_sens-1888.0)/1144.0)*34.0; // to be transmitted
 80010b8:	4b60      	ldr	r3, [pc, #384]	; (800123c <main+0x36c>)
 80010ba:	881b      	ldrh	r3, [r3, #0]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff f9e9 	bl	8000494 <__aeabi_i2d>
 80010c2:	f04f 0200 	mov.w	r2, #0
 80010c6:	4b6b      	ldr	r3, [pc, #428]	; (8001274 <main+0x3a4>)
 80010c8:	f7ff f896 	bl	80001f8 <__aeabi_dsub>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4610      	mov	r0, r2
 80010d2:	4619      	mov	r1, r3
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	4b67      	ldr	r3, [pc, #412]	; (8001278 <main+0x3a8>)
 80010da:	f7ff fb6f 	bl	80007bc <__aeabi_ddiv>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4610      	mov	r0, r2
 80010e4:	4619      	mov	r1, r3
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	4b64      	ldr	r3, [pc, #400]	; (800127c <main+0x3ac>)
 80010ec:	f7ff fa3c 	bl	8000568 <__aeabi_dmul>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4610      	mov	r0, r2
 80010f6:	4619      	mov	r1, r3
 80010f8:	f7ff fcf0 	bl	8000adc <__aeabi_d2f>
 80010fc:	4603      	mov	r3, r0
 80010fe:	4a60      	ldr	r2, [pc, #384]	; (8001280 <main+0x3b0>)
 8001100:	6013      	str	r3, [r2, #0]
//	steering_rad= ((adc_steer_sens-2055.0)/1144.0)*34.0*(3.1415/180.0);

//	k2= (xvel*steering_rad-1.6*zgyro)/(1.6*xvel*xvel)-0.006;
	wref2= ((xvel*steering_degree*(0.01745))/(1.6+k2*xvel*xvel));
 8001102:	4b60      	ldr	r3, [pc, #384]	; (8001284 <main+0x3b4>)
 8001104:	ed93 7a00 	vldr	s14, [r3]
 8001108:	4b5d      	ldr	r3, [pc, #372]	; (8001280 <main+0x3b0>)
 800110a:	edd3 7a00 	vldr	s15, [r3]
 800110e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001112:	ee17 0a90 	vmov	r0, s15
 8001116:	f7ff f9cf 	bl	80004b8 <__aeabi_f2d>
 800111a:	a337      	add	r3, pc, #220	; (adr r3, 80011f8 <main+0x328>)
 800111c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001120:	f7ff fa22 	bl	8000568 <__aeabi_dmul>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4614      	mov	r4, r2
 800112a:	461d      	mov	r5, r3
 800112c:	4b56      	ldr	r3, [pc, #344]	; (8001288 <main+0x3b8>)
 800112e:	ed93 7a00 	vldr	s14, [r3]
 8001132:	4b54      	ldr	r3, [pc, #336]	; (8001284 <main+0x3b4>)
 8001134:	edd3 7a00 	vldr	s15, [r3]
 8001138:	ee27 7a27 	vmul.f32	s14, s14, s15
 800113c:	4b51      	ldr	r3, [pc, #324]	; (8001284 <main+0x3b4>)
 800113e:	edd3 7a00 	vldr	s15, [r3]
 8001142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001146:	ee17 0a90 	vmov	r0, s15
 800114a:	f7ff f9b5 	bl	80004b8 <__aeabi_f2d>
 800114e:	a32c      	add	r3, pc, #176	; (adr r3, 8001200 <main+0x330>)
 8001150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001154:	f7ff f852 	bl	80001fc <__adddf3>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4620      	mov	r0, r4
 800115e:	4629      	mov	r1, r5
 8001160:	f7ff fb2c 	bl	80007bc <__aeabi_ddiv>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4610      	mov	r0, r2
 800116a:	4619      	mov	r1, r3
 800116c:	f7ff fcb6 	bl	8000adc <__aeabi_d2f>
 8001170:	4603      	mov	r3, r0
 8001172:	4a46      	ldr	r2, [pc, #280]	; (800128c <main+0x3bc>)
 8001174:	6013      	str	r3, [r2, #0]
   // if(compfactor<=1)
	//{
//		compfactor=1;
//	}
//	wref = ((xvel*steering_rad)/(1.6+k*xvel*xvel))*compfactor; // 1.6 is the wheelbase
	tb=ta;
 8001176:	4b46      	ldr	r3, [pc, #280]	; (8001290 <main+0x3c0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a46      	ldr	r2, [pc, #280]	; (8001294 <main+0x3c4>)
 800117c:	6013      	str	r3, [r2, #0]
	ta=HAL_GetTick();
 800117e:	f001 ff2d 	bl	8002fdc <HAL_GetTick>
 8001182:	4603      	mov	r3, r0
 8001184:	461a      	mov	r2, r3
 8001186:	4b42      	ldr	r3, [pc, #264]	; (8001290 <main+0x3c0>)
 8001188:	601a      	str	r2, [r3, #0]
	error= wref2- zgyro;
 800118a:	4b40      	ldr	r3, [pc, #256]	; (800128c <main+0x3bc>)
 800118c:	ed93 7a00 	vldr	s14, [r3]
 8001190:	4b41      	ldr	r3, [pc, #260]	; (8001298 <main+0x3c8>)
 8001192:	edd3 7a00 	vldr	s15, [r3]
 8001196:	ee77 7a67 	vsub.f32	s15, s14, s15
 800119a:	4b40      	ldr	r3, [pc, #256]	; (800129c <main+0x3cc>)
 800119c:	edc3 7a00 	vstr	s15, [r3]
	if (xvel<2){
 80011a0:	4b38      	ldr	r3, [pc, #224]	; (8001284 <main+0x3b4>)
 80011a2:	edd3 7a00 	vldr	s15, [r3]
 80011a6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80011aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b2:	d503      	bpl.n	80011bc <main+0x2ec>
		xvel=2;
 80011b4:	4b33      	ldr	r3, [pc, #204]	; (8001284 <main+0x3b4>)
 80011b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ba:	601a      	str	r2, [r3, #0]
	}
//	//xvel should be transmitted before this
	kp= (556.085-(21.544*xvel))*0.005; // 5.14 at xvel=2
 80011bc:	4b31      	ldr	r3, [pc, #196]	; (8001284 <main+0x3b4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff f979 	bl	80004b8 <__aeabi_f2d>
 80011c6:	a310      	add	r3, pc, #64	; (adr r3, 8001208 <main+0x338>)
 80011c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011cc:	f7ff f9cc 	bl	8000568 <__aeabi_dmul>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	a10e      	add	r1, pc, #56	; (adr r1, 8001210 <main+0x340>)
 80011d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011da:	f7ff f80d 	bl	80001f8 <__aeabi_dsub>
 80011de:	4602      	mov	r2, r0
 80011e0:	e05e      	b.n	80012a0 <main+0x3d0>
 80011e2:	bf00      	nop
 80011e4:	f3af 8000 	nop.w
 80011e8:	eb851eb8 	.word	0xeb851eb8
 80011ec:	40774451 	.word	0x40774451
 80011f0:	70a3d70a 	.word	0x70a3d70a
 80011f4:	3f970a3d 	.word	0x3f970a3d
 80011f8:	ad42c3ca 	.word	0xad42c3ca
 80011fc:	3f91de69 	.word	0x3f91de69
 8001200:	9999999a 	.word	0x9999999a
 8001204:	3ff99999 	.word	0x3ff99999
 8001208:	95810625 	.word	0x95810625
 800120c:	40358b43 	.word	0x40358b43
 8001210:	147ae148 	.word	0x147ae148
 8001214:	408160ae 	.word	0x408160ae
 8001218:	20000118 	.word	0x20000118
 800121c:	20000038 	.word	0x20000038
 8001220:	200002d4 	.word	0x200002d4
 8001224:	200002d6 	.word	0x200002d6
 8001228:	200002e8 	.word	0x200002e8
 800122c:	200002ea 	.word	0x200002ea
 8001230:	20000080 	.word	0x20000080
 8001234:	200002f6 	.word	0x200002f6
 8001238:	200002f8 	.word	0x200002f8
 800123c:	200002f2 	.word	0x200002f2
 8001240:	200002f4 	.word	0x200002f4
 8001244:	20000004 	.word	0x20000004
 8001248:	200002d8 	.word	0x200002d8
 800124c:	20000000 	.word	0x20000000
 8001250:	200002dc 	.word	0x200002dc
 8001254:	200002e0 	.word	0x200002e0
 8001258:	42c80000 	.word	0x42c80000
 800125c:	2000000e 	.word	0x2000000e
 8001260:	200002e4 	.word	0x200002e4
 8001264:	200002f0 	.word	0x200002f0
 8001268:	3ff00000 	.word	0x3ff00000
 800126c:	200002ec 	.word	0x200002ec
 8001270:	200002ee 	.word	0x200002ee
 8001274:	409d8000 	.word	0x409d8000
 8001278:	4091e000 	.word	0x4091e000
 800127c:	40410000 	.word	0x40410000
 8001280:	20000350 	.word	0x20000350
 8001284:	20000360 	.word	0x20000360
 8001288:	20000378 	.word	0x20000378
 800128c:	2000037c 	.word	0x2000037c
 8001290:	20000370 	.word	0x20000370
 8001294:	20000374 	.word	0x20000374
 8001298:	20000364 	.word	0x20000364
 800129c:	20000368 	.word	0x20000368
 80012a0:	460b      	mov	r3, r1
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	a3a7      	add	r3, pc, #668	; (adr r3, 8001544 <main+0x674>)
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	f7ff f95c 	bl	8000568 <__aeabi_dmul>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4610      	mov	r0, r2
 80012b6:	4619      	mov	r1, r3
 80012b8:	f7ff fc10 	bl	8000adc <__aeabi_d2f>
 80012bc:	4603      	mov	r3, r0
 80012be:	4a86      	ldr	r2, [pc, #536]	; (80014d8 <main+0x608>)
 80012c0:	6013      	str	r3, [r2, #0]
	ki=(1521.88+(75047.39/xvel));   //
 80012c2:	4b86      	ldr	r3, [pc, #536]	; (80014dc <main+0x60c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f8f6 	bl	80004b8 <__aeabi_f2d>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	a179      	add	r1, pc, #484	; (adr r1, 80014b8 <main+0x5e8>)
 80012d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012d6:	f7ff fa71 	bl	80007bc <__aeabi_ddiv>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	a377      	add	r3, pc, #476	; (adr r3, 80014c0 <main+0x5f0>)
 80012e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e8:	f7fe ff88 	bl	80001fc <__adddf3>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4610      	mov	r0, r2
 80012f2:	4619      	mov	r1, r3
 80012f4:	f7ff fbf2 	bl	8000adc <__aeabi_d2f>
 80012f8:	4603      	mov	r3, r0
 80012fa:	4a79      	ldr	r2, [pc, #484]	; (80014e0 <main+0x610>)
 80012fc:	6013      	str	r3, [r2, #0]
	op=kp*error;
 80012fe:	4b76      	ldr	r3, [pc, #472]	; (80014d8 <main+0x608>)
 8001300:	ed93 7a00 	vldr	s14, [r3]
 8001304:	4b77      	ldr	r3, [pc, #476]	; (80014e4 <main+0x614>)
 8001306:	edd3 7a00 	vldr	s15, [r3]
 800130a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800130e:	4b76      	ldr	r3, [pc, #472]	; (80014e8 <main+0x618>)
 8001310:	edc3 7a00 	vstr	s15, [r3]
	error_i = error_i + error*(ta-tb)/1000;
 8001314:	4b75      	ldr	r3, [pc, #468]	; (80014ec <main+0x61c>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b75      	ldr	r3, [pc, #468]	; (80014f0 <main+0x620>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	ee07 3a90 	vmov	s15, r3
 8001322:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001326:	4b6f      	ldr	r3, [pc, #444]	; (80014e4 <main+0x614>)
 8001328:	edd3 7a00 	vldr	s15, [r3]
 800132c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001330:	eddf 6a70 	vldr	s13, [pc, #448]	; 80014f4 <main+0x624>
 8001334:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001338:	4b6f      	ldr	r3, [pc, #444]	; (80014f8 <main+0x628>)
 800133a:	edd3 7a00 	vldr	s15, [r3]
 800133e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001342:	4b6d      	ldr	r3, [pc, #436]	; (80014f8 <main+0x628>)
 8001344:	edc3 7a00 	vstr	s15, [r3]
	oi =ki*error_i ;
 8001348:	4b65      	ldr	r3, [pc, #404]	; (80014e0 <main+0x610>)
 800134a:	ed93 7a00 	vldr	s14, [r3]
 800134e:	4b6a      	ldr	r3, [pc, #424]	; (80014f8 <main+0x628>)
 8001350:	edd3 7a00 	vldr	s15, [r3]
 8001354:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001358:	4b68      	ldr	r3, [pc, #416]	; (80014fc <main+0x62c>)
 800135a:	edc3 7a00 	vstr	s15, [r3]
	if (zgyro>-0.015 && zgyro<0.015){
 800135e:	4b68      	ldr	r3, [pc, #416]	; (8001500 <main+0x630>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff f8a8 	bl	80004b8 <__aeabi_f2d>
 8001368:	a357      	add	r3, pc, #348	; (adr r3, 80014c8 <main+0x5f8>)
 800136a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136e:	f7ff fb8b 	bl	8000a88 <__aeabi_dcmpgt>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d010      	beq.n	800139a <main+0x4ca>
 8001378:	4b61      	ldr	r3, [pc, #388]	; (8001500 <main+0x630>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f89b 	bl	80004b8 <__aeabi_f2d>
 8001382:	a353      	add	r3, pc, #332	; (adr r3, 80014d0 <main+0x600>)
 8001384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001388:	f7ff fb60 	bl	8000a4c <__aeabi_dcmplt>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <main+0x4ca>
		o=0.0;
 8001392:	4b5c      	ldr	r3, [pc, #368]	; (8001504 <main+0x634>)
 8001394:	f04f 0200 	mov.w	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
////		oi=7;
////	}
////	else if(oi<-7){
////		oi=-7;
////	}
	o =op;
 800139a:	4b53      	ldr	r3, [pc, #332]	; (80014e8 <main+0x618>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a59      	ldr	r2, [pc, #356]	; (8001504 <main+0x634>)
 80013a0:	6013      	str	r3, [r2, #0]
//	//o=5.0;
	if (o>10){
 80013a2:	4b58      	ldr	r3, [pc, #352]	; (8001504 <main+0x634>)
 80013a4:	edd3 7a00 	vldr	s15, [r3]
 80013a8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80013ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b4:	dd03      	ble.n	80013be <main+0x4ee>
		o=10;
 80013b6:	4b53      	ldr	r3, [pc, #332]	; (8001504 <main+0x634>)
 80013b8:	4a53      	ldr	r2, [pc, #332]	; (8001508 <main+0x638>)
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	e00c      	b.n	80013d8 <main+0x508>
	}
	else if(o<-10) {
 80013be:	4b51      	ldr	r3, [pc, #324]	; (8001504 <main+0x634>)
 80013c0:	edd3 7a00 	vldr	s15, [r3]
 80013c4:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80013c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d0:	d502      	bpl.n	80013d8 <main+0x508>
		o=-10;
 80013d2:	4b4c      	ldr	r3, [pc, #304]	; (8001504 <main+0x634>)
 80013d4:	4a4d      	ldr	r2, [pc, #308]	; (800150c <main+0x63c>)
 80013d6:	601a      	str	r2, [r3, #0]
	}
	if (xvel<=6){
 80013d8:	4b40      	ldr	r3, [pc, #256]	; (80014dc <main+0x60c>)
 80013da:	edd3 7a00 	vldr	s15, [r3]
 80013de:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80013e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ea:	d803      	bhi.n	80013f4 <main+0x524>
		o=0;
 80013ec:	4b45      	ldr	r3, [pc, #276]	; (8001504 <main+0x634>)
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]




//	comment out testing
	if(HAL_GPIO_ReadPin(TSMS_GPIO_Port, TSMS_Pin)==GPIO_PIN_SET){
 80013f4:	2180      	movs	r1, #128	; 0x80
 80013f6:	4846      	ldr	r0, [pc, #280]	; (8001510 <main+0x640>)
 80013f8:	f003 fb62 	bl	8004ac0 <HAL_GPIO_ReadPin>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d103      	bne.n	800140a <main+0x53a>
			tsms=1;
 8001402:	4b44      	ldr	r3, [pc, #272]	; (8001514 <main+0x644>)
 8001404:	2201      	movs	r2, #1
 8001406:	701a      	strb	r2, [r3, #0]
 8001408:	e002      	b.n	8001410 <main+0x540>
		}else{
			tsms=0;
 800140a:	4b42      	ldr	r3, [pc, #264]	; (8001514 <main+0x644>)
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
		}
	if(rtds_temp==0){
 8001410:	4b41      	ldr	r3, [pc, #260]	; (8001518 <main+0x648>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d13b      	bne.n	8001490 <main+0x5c0>
		if(HAL_GPIO_ReadPin(GPIOB, RTDS_INPUT_Pin)==GPIO_PIN_SET && (tsms==1) && (clearfault_left==1) && (clearfault_right==1)&&(rtds==0)&&(adc_brk1>500)&&(adc_brk2>500)){
 8001418:	2120      	movs	r1, #32
 800141a:	483d      	ldr	r0, [pc, #244]	; (8001510 <main+0x640>)
 800141c:	f003 fb50 	bl	8004ac0 <HAL_GPIO_ReadPin>
 8001420:	4603      	mov	r3, r0
 8001422:	2b01      	cmp	r3, #1
 8001424:	d134      	bne.n	8001490 <main+0x5c0>
 8001426:	4b3b      	ldr	r3, [pc, #236]	; (8001514 <main+0x644>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d130      	bne.n	8001490 <main+0x5c0>
 800142e:	4b3b      	ldr	r3, [pc, #236]	; (800151c <main+0x64c>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d12c      	bne.n	8001490 <main+0x5c0>
 8001436:	4b3a      	ldr	r3, [pc, #232]	; (8001520 <main+0x650>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d128      	bne.n	8001490 <main+0x5c0>
 800143e:	4b39      	ldr	r3, [pc, #228]	; (8001524 <main+0x654>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d124      	bne.n	8001490 <main+0x5c0>
 8001446:	4b38      	ldr	r3, [pc, #224]	; (8001528 <main+0x658>)
 8001448:	881b      	ldrh	r3, [r3, #0]
 800144a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800144e:	d91f      	bls.n	8001490 <main+0x5c0>
 8001450:	4b36      	ldr	r3, [pc, #216]	; (800152c <main+0x65c>)
 8001452:	881b      	ldrh	r3, [r3, #0]
 8001454:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001458:	d91a      	bls.n	8001490 <main+0x5c0>
			c1++;
 800145a:	4b35      	ldr	r3, [pc, #212]	; (8001530 <main+0x660>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	3301      	adds	r3, #1
 8001460:	4a33      	ldr	r2, [pc, #204]	; (8001530 <main+0x660>)
 8001462:	6013      	str	r3, [r2, #0]
			if(CNT==0){
 8001464:	4b33      	ldr	r3, [pc, #204]	; (8001534 <main+0x664>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d103      	bne.n	8001474 <main+0x5a4>
				HAL_TIM_Base_Start_IT(&htim6);
 800146c:	4832      	ldr	r0, [pc, #200]	; (8001538 <main+0x668>)
 800146e:	f003 ffff 	bl	8005470 <HAL_TIM_Base_Start_IT>
 8001472:	e00a      	b.n	800148a <main+0x5ba>
			}else if(CNT!=0){
 8001474:	4b2f      	ldr	r3, [pc, #188]	; (8001534 <main+0x664>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d006      	beq.n	800148a <main+0x5ba>
				HAL_TIM_Base_Start_IT(&htim6);
 800147c:	482e      	ldr	r0, [pc, #184]	; (8001538 <main+0x668>)
 800147e:	f003 fff7 	bl	8005470 <HAL_TIM_Base_Start_IT>
				HAL_GPIO_TogglePin(GPIOB, BUZZ_OUT_Pin);
 8001482:	2140      	movs	r1, #64	; 0x40
 8001484:	4822      	ldr	r0, [pc, #136]	; (8001510 <main+0x640>)
 8001486:	f003 fb4c 	bl	8004b22 <HAL_GPIO_TogglePin>
			}
			rtds_temp=1;
 800148a:	4b23      	ldr	r3, [pc, #140]	; (8001518 <main+0x648>)
 800148c:	2201      	movs	r2, #1
 800148e:	701a      	strb	r2, [r3, #0]
//		if(HAL_GPIO_ReadPin(TV_Enable_GPIO_Port, TV_Enable_Pin)==GPIO_PIN_SET ){
//			tv=0;
//		}
//	}

	if(tv==1){
 8001490:	4b2a      	ldr	r3, [pc, #168]	; (800153c <main+0x66c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d159      	bne.n	800154c <main+0x67c>
		HAL_GPIO_WritePin(GPIOG, TV_LED_Pin, GPIO_PIN_SET);
 8001498:	2201      	movs	r2, #1
 800149a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800149e:	4828      	ldr	r0, [pc, #160]	; (8001540 <main+0x670>)
 80014a0:	f003 fb26 	bl	8004af0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, TC_LED_Pin, GPIO_PIN_SET);
 80014a4:	2201      	movs	r2, #1
 80014a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014aa:	4825      	ldr	r0, [pc, #148]	; (8001540 <main+0x670>)
 80014ac:	f003 fb20 	bl	8004af0 <HAL_GPIO_WritePin>
 80014b0:	e058      	b.n	8001564 <main+0x694>
 80014b2:	bf00      	nop
 80014b4:	f3af 8000 	nop.w
 80014b8:	3d70a3d7 	.word	0x3d70a3d7
 80014bc:	40f25276 	.word	0x40f25276
 80014c0:	1eb851ec 	.word	0x1eb851ec
 80014c4:	4097c785 	.word	0x4097c785
 80014c8:	eb851eb8 	.word	0xeb851eb8
 80014cc:	bf8eb851 	.word	0xbf8eb851
 80014d0:	eb851eb8 	.word	0xeb851eb8
 80014d4:	3f8eb851 	.word	0x3f8eb851
 80014d8:	20000348 	.word	0x20000348
 80014dc:	20000360 	.word	0x20000360
 80014e0:	2000034c 	.word	0x2000034c
 80014e4:	20000368 	.word	0x20000368
 80014e8:	20000354 	.word	0x20000354
 80014ec:	20000370 	.word	0x20000370
 80014f0:	20000374 	.word	0x20000374
 80014f4:	447a0000 	.word	0x447a0000
 80014f8:	2000036c 	.word	0x2000036c
 80014fc:	20000358 	.word	0x20000358
 8001500:	20000364 	.word	0x20000364
 8001504:	2000035c 	.word	0x2000035c
 8001508:	41200000 	.word	0x41200000
 800150c:	c1200000 	.word	0xc1200000
 8001510:	40020400 	.word	0x40020400
 8001514:	200002bb 	.word	0x200002bb
 8001518:	200002ba 	.word	0x200002ba
 800151c:	200002ca 	.word	0x200002ca
 8001520:	200002cb 	.word	0x200002cb
 8001524:	200002bc 	.word	0x200002bc
 8001528:	200002e8 	.word	0x200002e8
 800152c:	200002ea 	.word	0x200002ea
 8001530:	200002cc 	.word	0x200002cc
 8001534:	200002c0 	.word	0x200002c0
 8001538:	20000160 	.word	0x20000160
 800153c:	20000331 	.word	0x20000331
 8001540:	40021800 	.word	0x40021800
 8001544:	47ae147b 	.word	0x47ae147b
 8001548:	3f747ae1 	.word	0x3f747ae1

	}else{
		HAL_GPIO_WritePin(GPIOG, TV_LED_Pin, GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001552:	489b      	ldr	r0, [pc, #620]	; (80017c0 <main+0x8f0>)
 8001554:	f003 facc 	bl	8004af0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, TC_LED_Pin, GPIO_PIN_RESET);
 8001558:	2200      	movs	r2, #0
 800155a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800155e:	4898      	ldr	r0, [pc, #608]	; (80017c0 <main+0x8f0>)
 8001560:	f003 fac6 	bl	8004af0 <HAL_GPIO_WritePin>
	}


	if(tsms==0){
 8001564:	4b97      	ldr	r3, [pc, #604]	; (80017c4 <main+0x8f4>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d10b      	bne.n	8001584 <main+0x6b4>
		rtds=0;
 800156c:	4b96      	ldr	r3, [pc, #600]	; (80017c8 <main+0x8f8>)
 800156e:	2200      	movs	r2, #0
 8001570:	701a      	strb	r2, [r3, #0]
		rtds_temp=0;
 8001572:	4b96      	ldr	r3, [pc, #600]	; (80017cc <main+0x8fc>)
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]
		clearfault_left=0;
 8001578:	4b95      	ldr	r3, [pc, #596]	; (80017d0 <main+0x900>)
 800157a:	2200      	movs	r2, #0
 800157c:	701a      	strb	r2, [r3, #0]
		clearfault_right=0;
 800157e:	4b95      	ldr	r3, [pc, #596]	; (80017d4 <main+0x904>)
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]
	}
//	rtds=1;
	Txdata_imp1[0]=(uint16_t)apps_avg;
 8001584:	4b94      	ldr	r3, [pc, #592]	; (80017d8 <main+0x908>)
 8001586:	edd3 7a00 	vldr	s15, [r3]
 800158a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800158e:	ee17 3a90 	vmov	r3, s15
 8001592:	b29a      	uxth	r2, r3
 8001594:	4b91      	ldr	r3, [pc, #580]	; (80017dc <main+0x90c>)
 8001596:	801a      	strh	r2, [r3, #0]
	Txdata_imp1[1]=FrontBrakePressure;
 8001598:	4b91      	ldr	r3, [pc, #580]	; (80017e0 <main+0x910>)
 800159a:	881a      	ldrh	r2, [r3, #0]
 800159c:	4b8f      	ldr	r3, [pc, #572]	; (80017dc <main+0x90c>)
 800159e:	805a      	strh	r2, [r3, #2]
	Txdata_imp1[2]=RearBrakePressure;
 80015a0:	4b90      	ldr	r3, [pc, #576]	; (80017e4 <main+0x914>)
 80015a2:	881a      	ldrh	r2, [r3, #0]
 80015a4:	4b8d      	ldr	r3, [pc, #564]	; (80017dc <main+0x90c>)
 80015a6:	809a      	strh	r2, [r3, #4]
	Txdata_imp1[3]=(short)(steering_degree*10);
 80015a8:	4b8f      	ldr	r3, [pc, #572]	; (80017e8 <main+0x918>)
 80015aa:	edd3 7a00 	vldr	s15, [r3]
 80015ae:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80015b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015ba:	ee17 3a90 	vmov	r3, s15
 80015be:	b21b      	sxth	r3, r3
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	4b86      	ldr	r3, [pc, #536]	; (80017dc <main+0x90c>)
 80015c4:	80da      	strh	r2, [r3, #6]

	Txdata_imp2[0]=adc_damper_right;
 80015c6:	4b89      	ldr	r3, [pc, #548]	; (80017ec <main+0x91c>)
 80015c8:	881a      	ldrh	r2, [r3, #0]
 80015ca:	4b89      	ldr	r3, [pc, #548]	; (80017f0 <main+0x920>)
 80015cc:	801a      	strh	r2, [r3, #0]
	Txdata_imp2[1]=adc_damper_left;
 80015ce:	4b89      	ldr	r3, [pc, #548]	; (80017f4 <main+0x924>)
 80015d0:	881a      	ldrh	r2, [r3, #0]
 80015d2:	4b87      	ldr	r3, [pc, #540]	; (80017f0 <main+0x920>)
 80015d4:	805a      	strh	r2, [r3, #2]
	Txdata_imp2[3]=adc_ir_sens;
 80015d6:	4b88      	ldr	r3, [pc, #544]	; (80017f8 <main+0x928>)
 80015d8:	881a      	ldrh	r2, [r3, #0]
 80015da:	4b85      	ldr	r3, [pc, #532]	; (80017f0 <main+0x920>)
 80015dc:	80da      	strh	r2, [r3, #6]

	Txdata_state[0]=soft_bspd;
 80015de:	4b87      	ldr	r3, [pc, #540]	; (80017fc <main+0x92c>)
 80015e0:	781a      	ldrb	r2, [r3, #0]
 80015e2:	4b87      	ldr	r3, [pc, #540]	; (8001800 <main+0x930>)
 80015e4:	701a      	strb	r2, [r3, #0]
	Txdata_state[1]=implausiblity;
 80015e6:	4b87      	ldr	r3, [pc, #540]	; (8001804 <main+0x934>)
 80015e8:	781a      	ldrb	r2, [r3, #0]
 80015ea:	4b85      	ldr	r3, [pc, #532]	; (8001800 <main+0x930>)
 80015ec:	705a      	strb	r2, [r3, #1]
	Txdata_state[2]=tsms;
 80015ee:	4b75      	ldr	r3, [pc, #468]	; (80017c4 <main+0x8f4>)
 80015f0:	781a      	ldrb	r2, [r3, #0]
 80015f2:	4b83      	ldr	r3, [pc, #524]	; (8001800 <main+0x930>)
 80015f4:	709a      	strb	r2, [r3, #2]
	Txdata_state[3]=rtds;
 80015f6:	4b74      	ldr	r3, [pc, #464]	; (80017c8 <main+0x8f8>)
 80015f8:	781a      	ldrb	r2, [r3, #0]
 80015fa:	4b81      	ldr	r3, [pc, #516]	; (8001800 <main+0x930>)
 80015fc:	70da      	strb	r2, [r3, #3]
	Txdata_state[4]=tc;
 80015fe:	4b82      	ldr	r3, [pc, #520]	; (8001808 <main+0x938>)
 8001600:	781a      	ldrb	r2, [r3, #0]
 8001602:	4b7f      	ldr	r3, [pc, #508]	; (8001800 <main+0x930>)
 8001604:	711a      	strb	r2, [r3, #4]
	Txdata_state[5]=tv;
 8001606:	4b81      	ldr	r3, [pc, #516]	; (800180c <main+0x93c>)
 8001608:	781a      	ldrb	r2, [r3, #0]
 800160a:	4b7d      	ldr	r3, [pc, #500]	; (8001800 <main+0x930>)
 800160c:	715a      	strb	r2, [r3, #5]

	Txdata_control[0]=(short)(op*100);
 800160e:	4b80      	ldr	r3, [pc, #512]	; (8001810 <main+0x940>)
 8001610:	edd3 7a00 	vldr	s15, [r3]
 8001614:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001814 <main+0x944>
 8001618:	ee67 7a87 	vmul.f32	s15, s15, s14
 800161c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001620:	ee17 3a90 	vmov	r3, s15
 8001624:	b21a      	sxth	r2, r3
 8001626:	4b7c      	ldr	r3, [pc, #496]	; (8001818 <main+0x948>)
 8001628:	801a      	strh	r2, [r3, #0]
	Txdata_control[1]=(short)(oi*100);
 800162a:	4b7c      	ldr	r3, [pc, #496]	; (800181c <main+0x94c>)
 800162c:	edd3 7a00 	vldr	s15, [r3]
 8001630:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8001814 <main+0x944>
 8001634:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001638:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800163c:	ee17 3a90 	vmov	r3, s15
 8001640:	b21a      	sxth	r2, r3
 8001642:	4b75      	ldr	r3, [pc, #468]	; (8001818 <main+0x948>)
 8001644:	805a      	strh	r2, [r3, #2]
	Txdata_control[2]=(short)(error*100);
 8001646:	4b76      	ldr	r3, [pc, #472]	; (8001820 <main+0x950>)
 8001648:	edd3 7a00 	vldr	s15, [r3]
 800164c:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001814 <main+0x944>
 8001650:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001654:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001658:	ee17 3a90 	vmov	r3, s15
 800165c:	b21a      	sxth	r2, r3
 800165e:	4b6e      	ldr	r3, [pc, #440]	; (8001818 <main+0x948>)
 8001660:	809a      	strh	r2, [r3, #4]
	Txdata_control[3]=(short)(error_i*100);
 8001662:	4b70      	ldr	r3, [pc, #448]	; (8001824 <main+0x954>)
 8001664:	edd3 7a00 	vldr	s15, [r3]
 8001668:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8001814 <main+0x944>
 800166c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001670:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001674:	ee17 3a90 	vmov	r3, s15
 8001678:	b21a      	sxth	r2, r3
 800167a:	4b67      	ldr	r3, [pc, #412]	; (8001818 <main+0x948>)
 800167c:	80da      	strh	r2, [r3, #6]
//	Txdata_control[1]=oi;

	if(tv==0){
 800167e:	4b63      	ldr	r3, [pc, #396]	; (800180c <main+0x93c>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d108      	bne.n	8001698 <main+0x7c8>
		torque_commanded_left=torque_commanded;
 8001686:	4b68      	ldr	r3, [pc, #416]	; (8001828 <main+0x958>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a68      	ldr	r2, [pc, #416]	; (800182c <main+0x95c>)
 800168c:	6013      	str	r3, [r2, #0]
		torque_commanded_right=torque_commanded;
 800168e:	4b66      	ldr	r3, [pc, #408]	; (8001828 <main+0x958>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a67      	ldr	r2, [pc, #412]	; (8001830 <main+0x960>)
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	e043      	b.n	8001720 <main+0x850>
	}else if(tv==1){
 8001698:	4b5c      	ldr	r3, [pc, #368]	; (800180c <main+0x93c>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d13f      	bne.n	8001720 <main+0x850>
		torque_commanded_left=torque_commanded+o*0.5;
 80016a0:	4b61      	ldr	r3, [pc, #388]	; (8001828 <main+0x958>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe ff07 	bl	80004b8 <__aeabi_f2d>
 80016aa:	4604      	mov	r4, r0
 80016ac:	460d      	mov	r5, r1
 80016ae:	4b61      	ldr	r3, [pc, #388]	; (8001834 <main+0x964>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe ff00 	bl	80004b8 <__aeabi_f2d>
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	4b5e      	ldr	r3, [pc, #376]	; (8001838 <main+0x968>)
 80016be:	f7fe ff53 	bl	8000568 <__aeabi_dmul>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4620      	mov	r0, r4
 80016c8:	4629      	mov	r1, r5
 80016ca:	f7fe fd97 	bl	80001fc <__adddf3>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	f7ff fa01 	bl	8000adc <__aeabi_d2f>
 80016da:	4603      	mov	r3, r0
 80016dc:	4a53      	ldr	r2, [pc, #332]	; (800182c <main+0x95c>)
 80016de:	6013      	str	r3, [r2, #0]
		torque_commanded_right=torque_commanded-o*0.5;
 80016e0:	4b51      	ldr	r3, [pc, #324]	; (8001828 <main+0x958>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe fee7 	bl	80004b8 <__aeabi_f2d>
 80016ea:	4604      	mov	r4, r0
 80016ec:	460d      	mov	r5, r1
 80016ee:	4b51      	ldr	r3, [pc, #324]	; (8001834 <main+0x964>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe fee0 	bl	80004b8 <__aeabi_f2d>
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	4b4e      	ldr	r3, [pc, #312]	; (8001838 <main+0x968>)
 80016fe:	f7fe ff33 	bl	8000568 <__aeabi_dmul>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4620      	mov	r0, r4
 8001708:	4629      	mov	r1, r5
 800170a:	f7fe fd75 	bl	80001f8 <__aeabi_dsub>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4610      	mov	r0, r2
 8001714:	4619      	mov	r1, r3
 8001716:	f7ff f9e1 	bl	8000adc <__aeabi_d2f>
 800171a:	4603      	mov	r3, r0
 800171c:	4a44      	ldr	r2, [pc, #272]	; (8001830 <main+0x960>)
 800171e:	6013      	str	r3, [r2, #0]
	}
	if (torque_commanded_left>(float)torque_limit){
 8001720:	4b46      	ldr	r3, [pc, #280]	; (800183c <main+0x96c>)
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	ee07 3a90 	vmov	s15, r3
 8001728:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800172c:	4b3f      	ldr	r3, [pc, #252]	; (800182c <main+0x95c>)
 800172e:	edd3 7a00 	vldr	s15, [r3]
 8001732:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173a:	d509      	bpl.n	8001750 <main+0x880>
		torque_commanded_left=(float)torque_limit;
 800173c:	4b3f      	ldr	r3, [pc, #252]	; (800183c <main+0x96c>)
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	ee07 3a90 	vmov	s15, r3
 8001744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001748:	4b38      	ldr	r3, [pc, #224]	; (800182c <main+0x95c>)
 800174a:	edc3 7a00 	vstr	s15, [r3]
 800174e:	e00b      	b.n	8001768 <main+0x898>
	}
	else if (torque_commanded_left<0.00){
 8001750:	4b36      	ldr	r3, [pc, #216]	; (800182c <main+0x95c>)
 8001752:	edd3 7a00 	vldr	s15, [r3]
 8001756:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800175a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175e:	d503      	bpl.n	8001768 <main+0x898>
		torque_commanded_left=0.00;
 8001760:	4b32      	ldr	r3, [pc, #200]	; (800182c <main+0x95c>)
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
	}
	if (torque_commanded_right>(float)torque_limit){
 8001768:	4b34      	ldr	r3, [pc, #208]	; (800183c <main+0x96c>)
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	ee07 3a90 	vmov	s15, r3
 8001770:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001774:	4b2e      	ldr	r3, [pc, #184]	; (8001830 <main+0x960>)
 8001776:	edd3 7a00 	vldr	s15, [r3]
 800177a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800177e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001782:	d509      	bpl.n	8001798 <main+0x8c8>
		torque_commanded_right=(float)torque_limit;
 8001784:	4b2d      	ldr	r3, [pc, #180]	; (800183c <main+0x96c>)
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	ee07 3a90 	vmov	s15, r3
 800178c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001790:	4b27      	ldr	r3, [pc, #156]	; (8001830 <main+0x960>)
 8001792:	edc3 7a00 	vstr	s15, [r3]
 8001796:	e00b      	b.n	80017b0 <main+0x8e0>
	}
	else if (torque_commanded_right<0.00){
 8001798:	4b25      	ldr	r3, [pc, #148]	; (8001830 <main+0x960>)
 800179a:	edd3 7a00 	vldr	s15, [r3]
 800179e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a6:	d503      	bpl.n	80017b0 <main+0x8e0>
		torque_commanded_right=0.00;
 80017a8:	4b21      	ldr	r3, [pc, #132]	; (8001830 <main+0x960>)
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
	}
	a++;
 80017b0:	4b23      	ldr	r3, [pc, #140]	; (8001840 <main+0x970>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	3301      	adds	r3, #1
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	4b21      	ldr	r3, [pc, #132]	; (8001840 <main+0x970>)
 80017ba:	701a      	strb	r2, [r3, #0]
  {
 80017bc:	f7ff bba3 	b.w	8000f06 <main+0x36>
 80017c0:	40021800 	.word	0x40021800
 80017c4:	200002bb 	.word	0x200002bb
 80017c8:	200002bc 	.word	0x200002bc
 80017cc:	200002ba 	.word	0x200002ba
 80017d0:	200002ca 	.word	0x200002ca
 80017d4:	200002cb 	.word	0x200002cb
 80017d8:	200002e0 	.word	0x200002e0
 80017dc:	20000308 	.word	0x20000308
 80017e0:	200002ec 	.word	0x200002ec
 80017e4:	200002ee 	.word	0x200002ee
 80017e8:	20000350 	.word	0x20000350
 80017ec:	200002f8 	.word	0x200002f8
 80017f0:	20000310 	.word	0x20000310
 80017f4:	200002f6 	.word	0x200002f6
 80017f8:	200002f4 	.word	0x200002f4
 80017fc:	200002d0 	.word	0x200002d0
 8001800:	20000318 	.word	0x20000318
 8001804:	200002d1 	.word	0x200002d1
 8001808:	20000330 	.word	0x20000330
 800180c:	20000331 	.word	0x20000331
 8001810:	20000354 	.word	0x20000354
 8001814:	42c80000 	.word	0x42c80000
 8001818:	20000328 	.word	0x20000328
 800181c:	20000358 	.word	0x20000358
 8001820:	20000368 	.word	0x20000368
 8001824:	2000036c 	.word	0x2000036c
 8001828:	200002fc 	.word	0x200002fc
 800182c:	20000300 	.word	0x20000300
 8001830:	20000304 	.word	0x20000304
 8001834:	2000035c 	.word	0x2000035c
 8001838:	3fe00000 	.word	0x3fe00000
 800183c:	2000000e 	.word	0x2000000e
 8001840:	20000344 	.word	0x20000344

08001844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b094      	sub	sp, #80	; 0x50
 8001848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800184a:	f107 0320 	add.w	r3, r7, #32
 800184e:	2230      	movs	r2, #48	; 0x30
 8001850:	2100      	movs	r1, #0
 8001852:	4618      	mov	r0, r3
 8001854:	f004 fa5e 	bl	8005d14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001858:	f107 030c 	add.w	r3, r7, #12
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001868:	2300      	movs	r3, #0
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	4b23      	ldr	r3, [pc, #140]	; (80018fc <SystemClock_Config+0xb8>)
 800186e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001870:	4a22      	ldr	r2, [pc, #136]	; (80018fc <SystemClock_Config+0xb8>)
 8001872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001876:	6413      	str	r3, [r2, #64]	; 0x40
 8001878:	4b20      	ldr	r3, [pc, #128]	; (80018fc <SystemClock_Config+0xb8>)
 800187a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001884:	2300      	movs	r3, #0
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	4b1d      	ldr	r3, [pc, #116]	; (8001900 <SystemClock_Config+0xbc>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001890:	4a1b      	ldr	r2, [pc, #108]	; (8001900 <SystemClock_Config+0xbc>)
 8001892:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	4b19      	ldr	r3, [pc, #100]	; (8001900 <SystemClock_Config+0xbc>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018a4:	2302      	movs	r3, #2
 80018a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018a8:	2301      	movs	r3, #1
 80018aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018ac:	2310      	movs	r3, #16
 80018ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018b0:	2300      	movs	r3, #0
 80018b2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b4:	f107 0320 	add.w	r3, r7, #32
 80018b8:	4618      	mov	r0, r3
 80018ba:	f003 f965 	bl	8004b88 <HAL_RCC_OscConfig>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80018c4:	f001 f86c 	bl	80029a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c8:	230f      	movs	r3, #15
 80018ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018cc:	2300      	movs	r3, #0
 80018ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018d8:	2300      	movs	r3, #0
 80018da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018dc:	f107 030c 	add.w	r3, r7, #12
 80018e0:	2100      	movs	r1, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f003 fbc8 	bl	8005078 <HAL_RCC_ClockConfig>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80018ee:	f001 f857 	bl	80029a0 <Error_Handler>
  }
}
 80018f2:	bf00      	nop
 80018f4:	3750      	adds	r7, #80	; 0x50
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40023800 	.word	0x40023800
 8001900:	40007000 	.word	0x40007000

08001904 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800190a:	463b      	mov	r3, r7
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001916:	4b21      	ldr	r3, [pc, #132]	; (800199c <MX_ADC1_Init+0x98>)
 8001918:	4a21      	ldr	r2, [pc, #132]	; (80019a0 <MX_ADC1_Init+0x9c>)
 800191a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800191c:	4b1f      	ldr	r3, [pc, #124]	; (800199c <MX_ADC1_Init+0x98>)
 800191e:	2200      	movs	r2, #0
 8001920:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001922:	4b1e      	ldr	r3, [pc, #120]	; (800199c <MX_ADC1_Init+0x98>)
 8001924:	2200      	movs	r2, #0
 8001926:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001928:	4b1c      	ldr	r3, [pc, #112]	; (800199c <MX_ADC1_Init+0x98>)
 800192a:	2200      	movs	r2, #0
 800192c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800192e:	4b1b      	ldr	r3, [pc, #108]	; (800199c <MX_ADC1_Init+0x98>)
 8001930:	2200      	movs	r2, #0
 8001932:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001934:	4b19      	ldr	r3, [pc, #100]	; (800199c <MX_ADC1_Init+0x98>)
 8001936:	2200      	movs	r2, #0
 8001938:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800193c:	4b17      	ldr	r3, [pc, #92]	; (800199c <MX_ADC1_Init+0x98>)
 800193e:	2200      	movs	r2, #0
 8001940:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001942:	4b16      	ldr	r3, [pc, #88]	; (800199c <MX_ADC1_Init+0x98>)
 8001944:	4a17      	ldr	r2, [pc, #92]	; (80019a4 <MX_ADC1_Init+0xa0>)
 8001946:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001948:	4b14      	ldr	r3, [pc, #80]	; (800199c <MX_ADC1_Init+0x98>)
 800194a:	2200      	movs	r2, #0
 800194c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800194e:	4b13      	ldr	r3, [pc, #76]	; (800199c <MX_ADC1_Init+0x98>)
 8001950:	2201      	movs	r2, #1
 8001952:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <MX_ADC1_Init+0x98>)
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800195c:	4b0f      	ldr	r3, [pc, #60]	; (800199c <MX_ADC1_Init+0x98>)
 800195e:	2201      	movs	r2, #1
 8001960:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001962:	480e      	ldr	r0, [pc, #56]	; (800199c <MX_ADC1_Init+0x98>)
 8001964:	f001 fb46 	bl	8002ff4 <HAL_ADC_Init>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800196e:	f001 f817 	bl	80029a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001972:	2305      	movs	r3, #5
 8001974:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001976:	2301      	movs	r3, #1
 8001978:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800197a:	2300      	movs	r3, #0
 800197c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800197e:	463b      	mov	r3, r7
 8001980:	4619      	mov	r1, r3
 8001982:	4806      	ldr	r0, [pc, #24]	; (800199c <MX_ADC1_Init+0x98>)
 8001984:	f001 fd18 	bl	80033b8 <HAL_ADC_ConfigChannel>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800198e:	f001 f807 	bl	80029a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001992:	bf00      	nop
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000038 	.word	0x20000038
 80019a0:	40012000 	.word	0x40012000
 80019a4:	0f000001 	.word	0x0f000001

080019a8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019ae:	463b      	mov	r3, r7
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80019ba:	4b21      	ldr	r3, [pc, #132]	; (8001a40 <MX_ADC3_Init+0x98>)
 80019bc:	4a21      	ldr	r2, [pc, #132]	; (8001a44 <MX_ADC3_Init+0x9c>)
 80019be:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80019c0:	4b1f      	ldr	r3, [pc, #124]	; (8001a40 <MX_ADC3_Init+0x98>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80019c6:	4b1e      	ldr	r3, [pc, #120]	; (8001a40 <MX_ADC3_Init+0x98>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80019cc:	4b1c      	ldr	r3, [pc, #112]	; (8001a40 <MX_ADC3_Init+0x98>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80019d2:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <MX_ADC3_Init+0x98>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80019d8:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <MX_ADC3_Init+0x98>)
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019e0:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <MX_ADC3_Init+0x98>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019e6:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <MX_ADC3_Init+0x98>)
 80019e8:	4a17      	ldr	r2, [pc, #92]	; (8001a48 <MX_ADC3_Init+0xa0>)
 80019ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019ec:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <MX_ADC3_Init+0x98>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80019f2:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <MX_ADC3_Init+0x98>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <MX_ADC3_Init+0x98>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a00:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <MX_ADC3_Init+0x98>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001a06:	480e      	ldr	r0, [pc, #56]	; (8001a40 <MX_ADC3_Init+0x98>)
 8001a08:	f001 faf4 	bl	8002ff4 <HAL_ADC_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8001a12:	f000 ffc5 	bl	80029a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001a16:	2309      	movs	r3, #9
 8001a18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001a22:	463b      	mov	r3, r7
 8001a24:	4619      	mov	r1, r3
 8001a26:	4806      	ldr	r0, [pc, #24]	; (8001a40 <MX_ADC3_Init+0x98>)
 8001a28:	f001 fcc6 	bl	80033b8 <HAL_ADC_ConfigChannel>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8001a32:	f000 ffb5 	bl	80029a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001a36:	bf00      	nop
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000080 	.word	0x20000080
 8001a44:	40012200 	.word	0x40012200
 8001a48:	0f000001 	.word	0x0f000001

08001a4c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001a50:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <MX_CAN1_Init+0x64>)
 8001a52:	4a18      	ldr	r2, [pc, #96]	; (8001ab4 <MX_CAN1_Init+0x68>)
 8001a54:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8001a56:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <MX_CAN1_Init+0x64>)
 8001a58:	2202      	movs	r2, #2
 8001a5a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001a5c:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <MX_CAN1_Init+0x64>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a62:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <MX_CAN1_Init+0x64>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8001a68:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <MX_CAN1_Init+0x64>)
 8001a6a:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8001a6e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001a70:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <MX_CAN1_Init+0x64>)
 8001a72:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001a76:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001a78:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <MX_CAN1_Init+0x64>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001a7e:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <MX_CAN1_Init+0x64>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8001a84:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <MX_CAN1_Init+0x64>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8001a8a:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <MX_CAN1_Init+0x64>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001a90:	4b07      	ldr	r3, [pc, #28]	; (8001ab0 <MX_CAN1_Init+0x64>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <MX_CAN1_Init+0x64>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001a9c:	4804      	ldr	r0, [pc, #16]	; (8001ab0 <MX_CAN1_Init+0x64>)
 8001a9e:	f001 feb9 	bl	8003814 <HAL_CAN_Init>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001aa8:	f000 ff7a 	bl	80029a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	200000c8 	.word	0x200000c8
 8001ab4:	40006400 	.word	0x40006400

08001ab8 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001abc:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <MX_CAN2_Init+0x64>)
 8001abe:	4a18      	ldr	r2, [pc, #96]	; (8001b20 <MX_CAN2_Init+0x68>)
 8001ac0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 8001ac2:	4b16      	ldr	r3, [pc, #88]	; (8001b1c <MX_CAN2_Init+0x64>)
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001ac8:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <MX_CAN2_Init+0x64>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001ace:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <MX_CAN2_Init+0x64>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
 8001ad4:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <MX_CAN2_Init+0x64>)
 8001ad6:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8001ada:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001adc:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <MX_CAN2_Init+0x64>)
 8001ade:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001ae2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001ae4:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <MX_CAN2_Init+0x64>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001aea:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <MX_CAN2_Init+0x64>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = ENABLE;
 8001af0:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <MX_CAN2_Init+0x64>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 8001af6:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <MX_CAN2_Init+0x64>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001afc:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <MX_CAN2_Init+0x64>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <MX_CAN2_Init+0x64>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001b08:	4804      	ldr	r0, [pc, #16]	; (8001b1c <MX_CAN2_Init+0x64>)
 8001b0a:	f001 fe83 	bl	8003814 <HAL_CAN_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001b14:	f000 ff44 	bl	80029a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	200000f0 	.word	0x200000f0
 8001b20:	40006800 	.word	0x40006800

08001b24 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b088      	sub	sp, #32
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */
																			// Using for CANTx transmission frequency, Delay of 30msec
  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001b2a:	f107 030c 	add.w	r3, r7, #12
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	605a      	str	r2, [r3, #4]
 8001b34:	609a      	str	r2, [r3, #8]
 8001b36:	60da      	str	r2, [r3, #12]
 8001b38:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b42:	4b1e      	ldr	r3, [pc, #120]	; (8001bbc <MX_TIM5_Init+0x98>)
 8001b44:	4a1e      	ldr	r2, [pc, #120]	; (8001bc0 <MX_TIM5_Init+0x9c>)
 8001b46:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 15999;
 8001b48:	4b1c      	ldr	r3, [pc, #112]	; (8001bbc <MX_TIM5_Init+0x98>)
 8001b4a:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001b4e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b50:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <MX_TIM5_Init+0x98>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 49;
 8001b56:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <MX_TIM5_Init+0x98>)
 8001b58:	2231      	movs	r2, #49	; 0x31
 8001b5a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5c:	4b17      	ldr	r3, [pc, #92]	; (8001bbc <MX_TIM5_Init+0x98>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b62:	4b16      	ldr	r3, [pc, #88]	; (8001bbc <MX_TIM5_Init+0x98>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001b68:	4814      	ldr	r0, [pc, #80]	; (8001bbc <MX_TIM5_Init+0x98>)
 8001b6a:	f003 fc31 	bl	80053d0 <HAL_TIM_Base_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001b74:	f000 ff14 	bl	80029a0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8001b80:	f107 030c 	add.w	r3, r7, #12
 8001b84:	4619      	mov	r1, r3
 8001b86:	480d      	ldr	r0, [pc, #52]	; (8001bbc <MX_TIM5_Init+0x98>)
 8001b88:	f003 fe19 	bl	80057be <HAL_TIM_SlaveConfigSynchro>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8001b92:	f000 ff05 	bl	80029a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001b9e:	1d3b      	adds	r3, r7, #4
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4806      	ldr	r0, [pc, #24]	; (8001bbc <MX_TIM5_Init+0x98>)
 8001ba4:	f004 f826 	bl	8005bf4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001bae:	f000 fef7 	bl	80029a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001bb2:	bf00      	nop
 8001bb4:	3720      	adds	r7, #32
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000118 	.word	0x20000118
 8001bc0:	40000c00 	.word	0x40000c00

08001bc4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */
																// Using for RTDS, Delay of 2sec
  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bca:	463b      	mov	r3, r7
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <MX_TIM6_Init+0x64>)
 8001bd4:	4a15      	ldr	r2, [pc, #84]	; (8001c2c <MX_TIM6_Init+0x68>)
 8001bd6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 799;
 8001bd8:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <MX_TIM6_Init+0x64>)
 8001bda:	f240 321f 	movw	r2, #799	; 0x31f
 8001bde:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be0:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <MX_TIM6_Init+0x64>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 40000;
 8001be6:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <MX_TIM6_Init+0x64>)
 8001be8:	f649 4240 	movw	r2, #40000	; 0x9c40
 8001bec:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bee:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <MX_TIM6_Init+0x64>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001bf4:	480c      	ldr	r0, [pc, #48]	; (8001c28 <MX_TIM6_Init+0x64>)
 8001bf6:	f003 fbeb 	bl	80053d0 <HAL_TIM_Base_Init>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001c00:	f000 fece 	bl	80029a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c04:	2300      	movs	r3, #0
 8001c06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c0c:	463b      	mov	r3, r7
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4805      	ldr	r0, [pc, #20]	; (8001c28 <MX_TIM6_Init+0x64>)
 8001c12:	f003 ffef 	bl	8005bf4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001c1c:	f000 fec0 	bl	80029a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c20:	bf00      	nop
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000160 	.word	0x20000160
 8001c2c:	40001000 	.word	0x40001000

08001c30 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */
																// Using for implausibility function, Delay of 100msec
  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c36:	463b      	mov	r3, r7
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <MX_TIM7_Init+0x64>)
 8001c40:	4a15      	ldr	r2, [pc, #84]	; (8001c98 <MX_TIM7_Init+0x68>)
 8001c42:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 39;
 8001c44:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <MX_TIM7_Init+0x64>)
 8001c46:	2227      	movs	r2, #39	; 0x27
 8001c48:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4a:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <MX_TIM7_Init+0x64>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 40000;
 8001c50:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <MX_TIM7_Init+0x64>)
 8001c52:	f649 4240 	movw	r2, #40000	; 0x9c40
 8001c56:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c58:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <MX_TIM7_Init+0x64>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001c5e:	480d      	ldr	r0, [pc, #52]	; (8001c94 <MX_TIM7_Init+0x64>)
 8001c60:	f003 fbb6 	bl	80053d0 <HAL_TIM_Base_Init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001c6a:	f000 fe99 	bl	80029a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001c76:	463b      	mov	r3, r7
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4806      	ldr	r0, [pc, #24]	; (8001c94 <MX_TIM7_Init+0x64>)
 8001c7c:	f003 ffba 	bl	8005bf4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001c86:	f000 fe8b 	bl	80029a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	200001a8 	.word	0x200001a8
 8001c98:	40001400 	.word	0x40001400

08001c9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08c      	sub	sp, #48	; 0x30
 8001ca0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca2:	f107 031c 	add.w	r3, r7, #28
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	605a      	str	r2, [r3, #4]
 8001cac:	609a      	str	r2, [r3, #8]
 8001cae:	60da      	str	r2, [r3, #12]
 8001cb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61bb      	str	r3, [r7, #24]
 8001cb6:	4b80      	ldr	r3, [pc, #512]	; (8001eb8 <MX_GPIO_Init+0x21c>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	4a7f      	ldr	r2, [pc, #508]	; (8001eb8 <MX_GPIO_Init+0x21c>)
 8001cbc:	f043 0320 	orr.w	r3, r3, #32
 8001cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc2:	4b7d      	ldr	r3, [pc, #500]	; (8001eb8 <MX_GPIO_Init+0x21c>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	f003 0320 	and.w	r3, r3, #32
 8001cca:	61bb      	str	r3, [r7, #24]
 8001ccc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	4b79      	ldr	r3, [pc, #484]	; (8001eb8 <MX_GPIO_Init+0x21c>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a78      	ldr	r2, [pc, #480]	; (8001eb8 <MX_GPIO_Init+0x21c>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b76      	ldr	r3, [pc, #472]	; (8001eb8 <MX_GPIO_Init+0x21c>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	4b72      	ldr	r3, [pc, #456]	; (8001eb8 <MX_GPIO_Init+0x21c>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a71      	ldr	r2, [pc, #452]	; (8001eb8 <MX_GPIO_Init+0x21c>)
 8001cf4:	f043 0302 	orr.w	r3, r3, #2
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b6f      	ldr	r3, [pc, #444]	; (8001eb8 <MX_GPIO_Init+0x21c>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	4b6b      	ldr	r3, [pc, #428]	; (8001eb8 <MX_GPIO_Init+0x21c>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a6a      	ldr	r2, [pc, #424]	; (8001eb8 <MX_GPIO_Init+0x21c>)
 8001d10:	f043 0304 	orr.w	r3, r3, #4
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b68      	ldr	r3, [pc, #416]	; (8001eb8 <MX_GPIO_Init+0x21c>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	4b64      	ldr	r3, [pc, #400]	; (8001eb8 <MX_GPIO_Init+0x21c>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a63      	ldr	r2, [pc, #396]	; (8001eb8 <MX_GPIO_Init+0x21c>)
 8001d2c:	f043 0308 	orr.w	r3, r3, #8
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b61      	ldr	r3, [pc, #388]	; (8001eb8 <MX_GPIO_Init+0x21c>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	607b      	str	r3, [r7, #4]
 8001d42:	4b5d      	ldr	r3, [pc, #372]	; (8001eb8 <MX_GPIO_Init+0x21c>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a5c      	ldr	r2, [pc, #368]	; (8001eb8 <MX_GPIO_Init+0x21c>)
 8001d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b5a      	ldr	r3, [pc, #360]	; (8001eb8 <MX_GPIO_Init+0x21c>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d56:	607b      	str	r3, [r7, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CAN_LED_Pin|LED_Pin|LEDF8_Pin|LEDF9_Pin, GPIO_PIN_RESET);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001d60:	4856      	ldr	r0, [pc, #344]	; (8001ebc <MX_GPIO_Init+0x220>)
 8001d62:	f002 fec5 	bl	8004af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001d66:	2200      	movs	r2, #0
 8001d68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d6c:	4854      	ldr	r0, [pc, #336]	; (8001ec0 <MX_GPIO_Init+0x224>)
 8001d6e:	f002 febf 	bl	8004af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIO1_Pin|CLK1_Pin, GPIO_PIN_RESET);
 8001d72:	2200      	movs	r2, #0
 8001d74:	21c0      	movs	r1, #192	; 0xc0
 8001d76:	4853      	ldr	r0, [pc, #332]	; (8001ec4 <MX_GPIO_Init+0x228>)
 8001d78:	f002 feba 	bl	8004af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, DIO2_Pin|CLK2_Pin|TC_LED_Pin|TV_LED_Pin, GPIO_PIN_RESET);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8001d82:	4851      	ldr	r0, [pc, #324]	; (8001ec8 <MX_GPIO_Init+0x22c>)
 8001d84:	f002 feb4 	bl	8004af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INV_RST_LED_Pin|BUZZ_OUT_Pin, GPIO_PIN_RESET);
 8001d88:	2200      	movs	r2, #0
 8001d8a:	2150      	movs	r1, #80	; 0x50
 8001d8c:	484f      	ldr	r0, [pc, #316]	; (8001ecc <MX_GPIO_Init+0x230>)
 8001d8e:	f002 feaf 	bl	8004af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CAN_LED_Pin LED_Pin LEDF8_Pin LEDF9_Pin */
  GPIO_InitStruct.Pin = CAN_LED_Pin|LED_Pin|LEDF8_Pin|LEDF9_Pin;
 8001d92:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001d96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da0:	2300      	movs	r3, #0
 8001da2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001da4:	f107 031c 	add.w	r3, r7, #28
 8001da8:	4619      	mov	r1, r3
 8001daa:	4844      	ldr	r0, [pc, #272]	; (8001ebc <MX_GPIO_Init+0x220>)
 8001dac:	f002 fcdc 	bl	8004768 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001db0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001db4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db6:	2301      	movs	r3, #1
 8001db8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dc2:	f107 031c 	add.w	r3, r7, #28
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	483d      	ldr	r0, [pc, #244]	; (8001ec0 <MX_GPIO_Init+0x224>)
 8001dca:	f002 fccd 	bl	8004768 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO1_Pin CLK1_Pin */
  GPIO_InitStruct.Pin = DIO1_Pin|CLK1_Pin;
 8001dce:	23c0      	movs	r3, #192	; 0xc0
 8001dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dde:	f107 031c 	add.w	r3, r7, #28
 8001de2:	4619      	mov	r1, r3
 8001de4:	4837      	ldr	r0, [pc, #220]	; (8001ec4 <MX_GPIO_Init+0x228>)
 8001de6:	f002 fcbf 	bl	8004768 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO2_Pin CLK2_Pin TC_LED_Pin TV_LED_Pin */
  GPIO_InitStruct.Pin = DIO2_Pin|CLK2_Pin|TC_LED_Pin|TV_LED_Pin;
 8001dea:	f44f 43ac 	mov.w	r3, #22016	; 0x5600
 8001dee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df0:	2301      	movs	r3, #1
 8001df2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001dfc:	f107 031c 	add.w	r3, r7, #28
 8001e00:	4619      	mov	r1, r3
 8001e02:	4831      	ldr	r0, [pc, #196]	; (8001ec8 <MX_GPIO_Init+0x22c>)
 8001e04:	f002 fcb0 	bl	8004768 <HAL_GPIO_Init>

  /*Configure GPIO pins : TV_EXTI_Pin TV_BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = TV_EXTI_Pin|TV_BUTTON_EXTI13_Pin;
 8001e08:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001e0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e14:	2302      	movs	r3, #2
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e18:	f107 031c 	add.w	r3, r7, #28
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	482a      	ldr	r0, [pc, #168]	; (8001ec8 <MX_GPIO_Init+0x22c>)
 8001e20:	f002 fca2 	bl	8004768 <HAL_GPIO_Init>

  /*Configure GPIO pin : INV_RST_EXTI3_Pin */
  GPIO_InitStruct.Pin = INV_RST_EXTI3_Pin;
 8001e24:	2308      	movs	r3, #8
 8001e26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e28:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(INV_RST_EXTI3_GPIO_Port, &GPIO_InitStruct);
 8001e32:	f107 031c 	add.w	r3, r7, #28
 8001e36:	4619      	mov	r1, r3
 8001e38:	4824      	ldr	r0, [pc, #144]	; (8001ecc <MX_GPIO_Init+0x230>)
 8001e3a:	f002 fc95 	bl	8004768 <HAL_GPIO_Init>

  /*Configure GPIO pin : INV_RST_LED_Pin */
  GPIO_InitStruct.Pin = INV_RST_LED_Pin;
 8001e3e:	2310      	movs	r3, #16
 8001e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e42:	2301      	movs	r3, #1
 8001e44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(INV_RST_LED_GPIO_Port, &GPIO_InitStruct);
 8001e4e:	f107 031c 	add.w	r3, r7, #28
 8001e52:	4619      	mov	r1, r3
 8001e54:	481d      	ldr	r0, [pc, #116]	; (8001ecc <MX_GPIO_Init+0x230>)
 8001e56:	f002 fc87 	bl	8004768 <HAL_GPIO_Init>

  /*Configure GPIO pins : RTDS_INPUT_Pin TSMS_Pin */
  GPIO_InitStruct.Pin = RTDS_INPUT_Pin|TSMS_Pin;
 8001e5a:	23a0      	movs	r3, #160	; 0xa0
 8001e5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e66:	f107 031c 	add.w	r3, r7, #28
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4817      	ldr	r0, [pc, #92]	; (8001ecc <MX_GPIO_Init+0x230>)
 8001e6e:	f002 fc7b 	bl	8004768 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZ_OUT_Pin */
  GPIO_InitStruct.Pin = BUZZ_OUT_Pin;
 8001e72:	2340      	movs	r3, #64	; 0x40
 8001e74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e76:	2301      	movs	r3, #1
 8001e78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BUZZ_OUT_GPIO_Port, &GPIO_InitStruct);
 8001e82:	f107 031c 	add.w	r3, r7, #28
 8001e86:	4619      	mov	r1, r3
 8001e88:	4810      	ldr	r0, [pc, #64]	; (8001ecc <MX_GPIO_Init+0x230>)
 8001e8a:	f002 fc6d 	bl	8004768 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2101      	movs	r1, #1
 8001e92:	2009      	movs	r0, #9
 8001e94:	f002 fc31 	bl	80046fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001e98:	2009      	movs	r0, #9
 8001e9a:	f002 fc4a 	bl	8004732 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	2028      	movs	r0, #40	; 0x28
 8001ea4:	f002 fc29 	bl	80046fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ea8:	2028      	movs	r0, #40	; 0x28
 8001eaa:	f002 fc42 	bl	8004732 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001eae:	bf00      	nop
 8001eb0:	3730      	adds	r7, #48	; 0x30
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	40021400 	.word	0x40021400
 8001ec0:	40020800 	.word	0x40020800
 8001ec4:	40020c00 	.word	0x40020c00
 8001ec8:	40021800 	.word	0x40021800
 8001ecc:	40020400 	.word	0x40020400

08001ed0 <CAN_Start>:

/* USER CODE BEGIN 4 */
void CAN_Start(){
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b094      	sub	sp, #80	; 0x50
 8001ed4:	af00      	add	r7, sp, #0

	CAN_FilterTypeDef filter1, filter2;

	filter1.FilterBank = 0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	63fb      	str	r3, [r7, #60]	; 0x3c

	filter1.FilterActivation = ENABLE;
 8001eda:	2301      	movs	r3, #1
 8001edc:	64bb      	str	r3, [r7, #72]	; 0x48
	filter1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	63bb      	str	r3, [r7, #56]	; 0x38

	filter1.FilterScale = CAN_FILTERSCALE_32BIT;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	647b      	str	r3, [r7, #68]	; 0x44
	filter1.FilterMode = CAN_FILTERMODE_IDMASK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	643b      	str	r3, [r7, #64]	; 0x40

	filter1.FilterMaskIdHigh = 0x0000;
 8001eea:	2300      	movs	r3, #0
 8001eec:	633b      	str	r3, [r7, #48]	; 0x30
	filter1.FilterMaskIdLow  = 0x0000;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	637b      	str	r3, [r7, #52]	; 0x34

	filter1.FilterIdLow  = 0x0000;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
	filter1.FilterIdHigh = 0x0000;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	62bb      	str	r3, [r7, #40]	; 0x28

	filter1.SlaveStartFilterBank = 14;
 8001efa:	230e      	movs	r3, #14
 8001efc:	64fb      	str	r3, [r7, #76]	; 0x4c


	filter2.FilterBank = 15;
 8001efe:	230f      	movs	r3, #15
 8001f00:	617b      	str	r3, [r7, #20]

	filter2.FilterActivation = ENABLE;
 8001f02:	2301      	movs	r3, #1
 8001f04:	623b      	str	r3, [r7, #32]
	filter2.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8001f06:	2301      	movs	r3, #1
 8001f08:	613b      	str	r3, [r7, #16]

	filter2.FilterScale = CAN_FILTERSCALE_32BIT;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	61fb      	str	r3, [r7, #28]
	filter2.FilterMode = CAN_FILTERMODE_IDMASK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61bb      	str	r3, [r7, #24]

	filter2.FilterMaskIdHigh = 0x0000;
 8001f12:	2300      	movs	r3, #0
 8001f14:	60bb      	str	r3, [r7, #8]
	filter2.FilterMaskIdLow  = 0x0000;
 8001f16:	2300      	movs	r3, #0
 8001f18:	60fb      	str	r3, [r7, #12]

	filter2.FilterIdLow  = 0x0000;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	607b      	str	r3, [r7, #4]
	filter2.FilterIdHigh = 0x0000;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	603b      	str	r3, [r7, #0]

	filter2.SlaveStartFilterBank = 14;
 8001f22:	230e      	movs	r3, #14
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24


	if (HAL_CAN_ConfigFilter(&hcan1, &filter1) != HAL_OK) { // Configuring CAN line according to Filter values
 8001f26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	481b      	ldr	r0, [pc, #108]	; (8001f9c <CAN_Start+0xcc>)
 8001f2e:	f001 fd6d 	bl	8003a0c <HAL_CAN_ConfigFilter>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <CAN_Start+0x6c>
		Error_Handler();
 8001f38:	f000 fd32 	bl	80029a0 <Error_Handler>
	}
	if (HAL_CAN_ConfigFilter(&hcan2, &filter2)!= HAL_OK){
 8001f3c:	463b      	mov	r3, r7
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4817      	ldr	r0, [pc, #92]	; (8001fa0 <CAN_Start+0xd0>)
 8001f42:	f001 fd63 	bl	8003a0c <HAL_CAN_ConfigFilter>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <CAN_Start+0x80>
		Error_Handler();
 8001f4c:	f000 fd28 	bl	80029a0 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK) { // CAN start
 8001f50:	4812      	ldr	r0, [pc, #72]	; (8001f9c <CAN_Start+0xcc>)
 8001f52:	f001 fe3b 	bl	8003bcc <HAL_CAN_Start>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <CAN_Start+0x90>
		Error_Handler();
 8001f5c:	f000 fd20 	bl	80029a0 <Error_Handler>
	}

	if(HAL_CAN_Start(&hcan2) != HAL_OK){
 8001f60:	480f      	ldr	r0, [pc, #60]	; (8001fa0 <CAN_Start+0xd0>)
 8001f62:	f001 fe33 	bl	8003bcc <HAL_CAN_Start>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <CAN_Start+0xa0>
		Error_Handler();
 8001f6c:	f000 fd18 	bl	80029a0 <Error_Handler>
	}

	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL | CAN_IT_RX_FIFO0_OVERRUN) != HAL_OK){ // Interrupt activation
 8001f70:	210e      	movs	r1, #14
 8001f72:	480a      	ldr	r0, [pc, #40]	; (8001f9c <CAN_Start+0xcc>)
 8001f74:	f002 f890 	bl	8004098 <HAL_CAN_ActivateNotification>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <CAN_Start+0xb2>
		Error_Handler();
 8001f7e:	f000 fd0f 	bl	80029a0 <Error_Handler>
	}

	if(HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING | CAN_IT_RX_FIFO1_FULL | CAN_IT_RX_FIFO1_OVERRUN ) != HAL_OK){ // Interrupt activation
 8001f82:	2170      	movs	r1, #112	; 0x70
 8001f84:	4806      	ldr	r0, [pc, #24]	; (8001fa0 <CAN_Start+0xd0>)
 8001f86:	f002 f887 	bl	8004098 <HAL_CAN_ActivateNotification>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <CAN_Start+0xc4>
			Error_Handler();
 8001f90:	f000 fd06 	bl	80029a0 <Error_Handler>
		}
}
 8001f94:	bf00      	nop
 8001f96:	3750      	adds	r7, #80	; 0x50
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	200000c8 	.word	0x200000c8
 8001fa0:	200000f0 	.word	0x200000f0

08001fa4 <CAN_Tx>:

void CAN_Tx(CAN_HandleTypeDef* hcan, uint32_t id, uint8_t* data_tx){
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08c      	sub	sp, #48	; 0x30
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
	    CAN_TxHeaderTypeDef TxHeader;
		uint32_t Txmailbox = 0x00U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
		TxHeader.DLC=8;
 8001fb4:	2308      	movs	r3, #8
 8001fb6:	62bb      	str	r3, [r7, #40]	; 0x28
	    TxHeader.StdId=id; // 11 bits
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	61bb      	str	r3, [r7, #24]
	    TxHeader.IDE=CAN_ID_STD;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	623b      	str	r3, [r7, #32]
	    TxHeader.RTR=CAN_RTR_DATA;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24

		if(HAL_CAN_GetTxMailboxesFreeLevel(hcan)>0){
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f001 ff20 	bl	8003e0a <HAL_CAN_GetTxMailboxesFreeLevel>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d010      	beq.n	8001ff2 <CAN_Tx+0x4e>
			HAL_GPIO_TogglePin(GPIOF, CAN_LED_Pin);
 8001fd0:	2140      	movs	r1, #64	; 0x40
 8001fd2:	480a      	ldr	r0, [pc, #40]	; (8001ffc <CAN_Tx+0x58>)
 8001fd4:	f002 fda5 	bl	8004b22 <HAL_GPIO_TogglePin>
			if (HAL_CAN_AddTxMessage(hcan, &TxHeader, data_tx, &Txmailbox)!= HAL_OK){
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	f107 0118 	add.w	r1, r7, #24
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f001 fe36 	bl	8003c54 <HAL_CAN_AddTxMessage>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <CAN_Tx+0x4e>
				Error_Handler();
 8001fee:	f000 fcd7 	bl	80029a0 <Error_Handler>
			}
		}
}
 8001ff2:	bf00      	nop
 8001ff4:	3730      	adds	r7, #48	; 0x30
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40021400 	.word	0x40021400

08002000 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
//	CAN_RxHeaderTypeDef RxHeader;
//	uint8_t RxData[8];
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader,RxData);
 8002008:	4b2b      	ldr	r3, [pc, #172]	; (80020b8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800200a:	4a2c      	ldr	r2, [pc, #176]	; (80020bc <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 800200c:	2100      	movs	r1, #0
 800200e:	482c      	ldr	r0, [pc, #176]	; (80020c0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8002010:	f001 ff30 	bl	8003e74 <HAL_CAN_GetRxMessage>
	if(RxHeader.StdId==0x139){
 8002014:	4b29      	ldr	r3, [pc, #164]	; (80020bc <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f240 1239 	movw	r2, #313	; 0x139
 800201c:	4293      	cmp	r3, r2
 800201e:	d11b      	bne.n	8002058 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
		//HAL_GPIO_TogglePin(GPIOF, LEDF9_Pin);
		xvel=((float)(((uint16_t)RxData[1]<<8)|RxData[0]))*0.01;
 8002020:	4b25      	ldr	r3, [pc, #148]	; (80020b8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8002022:	785b      	ldrb	r3, [r3, #1]
 8002024:	021b      	lsls	r3, r3, #8
 8002026:	4a24      	ldr	r2, [pc, #144]	; (80020b8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8002028:	7812      	ldrb	r2, [r2, #0]
 800202a:	4313      	orrs	r3, r2
 800202c:	ee07 3a90 	vmov	s15, r3
 8002030:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002034:	ee17 0a90 	vmov	r0, s15
 8002038:	f7fe fa3e 	bl	80004b8 <__aeabi_f2d>
 800203c:	a31a      	add	r3, pc, #104	; (adr r3, 80020a8 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 800203e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002042:	f7fe fa91 	bl	8000568 <__aeabi_dmul>
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	4610      	mov	r0, r2
 800204c:	4619      	mov	r1, r3
 800204e:	f7fe fd45 	bl	8000adc <__aeabi_d2f>
 8002052:	4603      	mov	r3, r0
 8002054:	4a1b      	ldr	r2, [pc, #108]	; (80020c4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8002056:	6013      	str	r3, [r2, #0]
	}
	if(RxHeader.StdId==0x122){
 8002058:	4b18      	ldr	r3, [pc, #96]	; (80020bc <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8002060:	d11b      	bne.n	800209a <HAL_CAN_RxFifo0MsgPendingCallback+0x9a>
		zgyro=(float)(((uint16_t)RxData[5]<<8)|RxData[4])*0.001;
 8002062:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8002064:	795b      	ldrb	r3, [r3, #5]
 8002066:	021b      	lsls	r3, r3, #8
 8002068:	4a13      	ldr	r2, [pc, #76]	; (80020b8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800206a:	7912      	ldrb	r2, [r2, #4]
 800206c:	4313      	orrs	r3, r2
 800206e:	ee07 3a90 	vmov	s15, r3
 8002072:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002076:	ee17 0a90 	vmov	r0, s15
 800207a:	f7fe fa1d 	bl	80004b8 <__aeabi_f2d>
 800207e:	a30c      	add	r3, pc, #48	; (adr r3, 80020b0 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8002080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002084:	f7fe fa70 	bl	8000568 <__aeabi_dmul>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4610      	mov	r0, r2
 800208e:	4619      	mov	r1, r3
 8002090:	f7fe fd24 	bl	8000adc <__aeabi_d2f>
 8002094:	4603      	mov	r3, r0
 8002096:	4a0c      	ldr	r2, [pc, #48]	; (80020c8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8002098:	6013      	str	r3, [r2, #0]
	}
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	f3af 8000 	nop.w
 80020a8:	47ae147b 	.word	0x47ae147b
 80020ac:	3f847ae1 	.word	0x3f847ae1
 80020b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80020b4:	3f50624d 	.word	0x3f50624d
 80020b8:	2000039c 	.word	0x2000039c
 80020bc:	20000380 	.word	0x20000380
 80020c0:	200000c8 	.word	0x200000c8
 80020c4:	20000360 	.word	0x20000360
 80020c8:	20000364 	.word	0x20000364

080020cc <map>:
float map(uint16_t value, uint16_t min_val, uint16_t max_val, uint16_t offset){
 80020cc:	b490      	push	{r4, r7}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4604      	mov	r4, r0
 80020d4:	4608      	mov	r0, r1
 80020d6:	4611      	mov	r1, r2
 80020d8:	461a      	mov	r2, r3
 80020da:	4623      	mov	r3, r4
 80020dc:	80fb      	strh	r3, [r7, #6]
 80020de:	4603      	mov	r3, r0
 80020e0:	80bb      	strh	r3, [r7, #4]
 80020e2:	460b      	mov	r3, r1
 80020e4:	807b      	strh	r3, [r7, #2]
 80020e6:	4613      	mov	r3, r2
 80020e8:	803b      	strh	r3, [r7, #0]
	float temp = (((float)(value - (min_val+offset))) / ((float)((max_val-offset) - (min_val+offset)))) * 100.00;
 80020ea:	88fa      	ldrh	r2, [r7, #6]
 80020ec:	88b9      	ldrh	r1, [r7, #4]
 80020ee:	883b      	ldrh	r3, [r7, #0]
 80020f0:	440b      	add	r3, r1
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	ee07 3a90 	vmov	s15, r3
 80020f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80020fc:	887a      	ldrh	r2, [r7, #2]
 80020fe:	883b      	ldrh	r3, [r7, #0]
 8002100:	1ad2      	subs	r2, r2, r3
 8002102:	88b9      	ldrh	r1, [r7, #4]
 8002104:	883b      	ldrh	r3, [r7, #0]
 8002106:	440b      	add	r3, r1
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	ee07 3a90 	vmov	s15, r3
 800210e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002112:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002116:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002160 <map+0x94>
 800211a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800211e:	edc7 7a03 	vstr	s15, [r7, #12]
		if (temp < 0.00){
 8002122:	edd7 7a03 	vldr	s15, [r7, #12]
 8002126:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800212a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800212e:	d502      	bpl.n	8002136 <map+0x6a>
			return 0.00;
 8002130:	f04f 0300 	mov.w	r3, #0
 8002134:	e00b      	b.n	800214e <map+0x82>
		}
		else if (temp > 100.00){
 8002136:	edd7 7a03 	vldr	s15, [r7, #12]
 800213a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002160 <map+0x94>
 800213e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002146:	dd01      	ble.n	800214c <map+0x80>
			return 100.00;
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <map+0x98>)
 800214a:	e000      	b.n	800214e <map+0x82>
		}
		else {
			return temp;
 800214c:	68fb      	ldr	r3, [r7, #12]
		}
	}
 800214e:	ee07 3a90 	vmov	s15, r3
 8002152:	eeb0 0a67 	vmov.f32	s0, s15
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bc90      	pop	{r4, r7}
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	42c80000 	.word	0x42c80000
 8002164:	42c80000 	.word	0x42c80000

08002168 <implausiblityCheck>:

void implausiblityCheck(){
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
	if(app1-app2>10 || app2-app1>10){
 800216c:	4b17      	ldr	r3, [pc, #92]	; (80021cc <implausiblityCheck+0x64>)
 800216e:	ed93 7a00 	vldr	s14, [r3]
 8002172:	4b17      	ldr	r3, [pc, #92]	; (80021d0 <implausiblityCheck+0x68>)
 8002174:	edd3 7a00 	vldr	s15, [r3]
 8002178:	ee77 7a67 	vsub.f32	s15, s14, s15
 800217c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002180:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002188:	dc0f      	bgt.n	80021aa <implausiblityCheck+0x42>
 800218a:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <implausiblityCheck+0x68>)
 800218c:	ed93 7a00 	vldr	s14, [r3]
 8002190:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <implausiblityCheck+0x64>)
 8002192:	edd3 7a00 	vldr	s15, [r3]
 8002196:	ee77 7a67 	vsub.f32	s15, s14, s15
 800219a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800219e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a6:	dc00      	bgt.n	80021aa <implausiblityCheck+0x42>
			HAL_TIM_Base_Start_IT(&htim7);
		}else if(CNT_impl!=1){
			HAL_TIM_Base_Start_IT(&htim7);
		}
	}
}
 80021a8:	e00e      	b.n	80021c8 <implausiblityCheck+0x60>
		if(CNT_impl==0){
 80021aa:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <implausiblityCheck+0x6c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d103      	bne.n	80021ba <implausiblityCheck+0x52>
			HAL_TIM_Base_Start_IT(&htim7);
 80021b2:	4809      	ldr	r0, [pc, #36]	; (80021d8 <implausiblityCheck+0x70>)
 80021b4:	f003 f95c 	bl	8005470 <HAL_TIM_Base_Start_IT>
}
 80021b8:	e006      	b.n	80021c8 <implausiblityCheck+0x60>
		}else if(CNT_impl!=1){
 80021ba:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <implausiblityCheck+0x6c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d002      	beq.n	80021c8 <implausiblityCheck+0x60>
			HAL_TIM_Base_Start_IT(&htim7);
 80021c2:	4805      	ldr	r0, [pc, #20]	; (80021d8 <implausiblityCheck+0x70>)
 80021c4:	f003 f954 	bl	8005470 <HAL_TIM_Base_Start_IT>
}
 80021c8:	bf00      	nop
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	200002d8 	.word	0x200002d8
 80021d0:	200002dc 	.word	0x200002dc
 80021d4:	200002c4 	.word	0x200002c4
 80021d8:	200001a8 	.word	0x200001a8

080021dc <softBSPD>:

void softBSPD(){
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
	if(adc_brk1>soft_bspd_threshold_brk||adc_brk2>soft_bspd_threshold_brk){
 80021e0:	4b29      	ldr	r3, [pc, #164]	; (8002288 <softBSPD+0xac>)
 80021e2:	881a      	ldrh	r2, [r3, #0]
 80021e4:	4b29      	ldr	r3, [pc, #164]	; (800228c <softBSPD+0xb0>)
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d805      	bhi.n	80021f8 <softBSPD+0x1c>
 80021ec:	4b28      	ldr	r3, [pc, #160]	; (8002290 <softBSPD+0xb4>)
 80021ee:	881a      	ldrh	r2, [r3, #0]
 80021f0:	4b26      	ldr	r3, [pc, #152]	; (800228c <softBSPD+0xb0>)
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d90d      	bls.n	8002214 <softBSPD+0x38>
		if(apps_avg>soft_bspd_threshold_apps){
 80021f8:	4b26      	ldr	r3, [pc, #152]	; (8002294 <softBSPD+0xb8>)
 80021fa:	ed93 7a00 	vldr	s14, [r3]
 80021fe:	4b26      	ldr	r3, [pc, #152]	; (8002298 <softBSPD+0xbc>)
 8002200:	edd3 7a00 	vldr	s15, [r3]
 8002204:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220c:	dd02      	ble.n	8002214 <softBSPD+0x38>
			temp_var_soft_bspd=1;
 800220e:	4b23      	ldr	r3, [pc, #140]	; (800229c <softBSPD+0xc0>)
 8002210:	2201      	movs	r2, #1
 8002212:	701a      	strb	r2, [r3, #0]
		}
	}
	if(temp_var_soft_bspd==0){
 8002214:	4b21      	ldr	r3, [pc, #132]	; (800229c <softBSPD+0xc0>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d104      	bne.n	8002226 <softBSPD+0x4a>
		torque_commanded=torque_demand;
 800221c:	4b20      	ldr	r3, [pc, #128]	; (80022a0 <softBSPD+0xc4>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a20      	ldr	r2, [pc, #128]	; (80022a4 <softBSPD+0xc8>)
 8002222:	6013      	str	r3, [r2, #0]
 8002224:	e00f      	b.n	8002246 <softBSPD+0x6a>
	}else if(temp_var_soft_bspd==1){
 8002226:	4b1d      	ldr	r3, [pc, #116]	; (800229c <softBSPD+0xc0>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d10b      	bne.n	8002246 <softBSPD+0x6a>
		torque_commanded=0;
 800222e:	4b1d      	ldr	r3, [pc, #116]	; (80022a4 <softBSPD+0xc8>)
 8002230:	f04f 0200 	mov.w	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
		soft_bspd=1;
 8002236:	4b1c      	ldr	r3, [pc, #112]	; (80022a8 <softBSPD+0xcc>)
 8002238:	2201      	movs	r2, #1
 800223a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOF, LEDF9_Pin);
 800223c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002240:	481a      	ldr	r0, [pc, #104]	; (80022ac <softBSPD+0xd0>)
 8002242:	f002 fc6e 	bl	8004b22 <HAL_GPIO_TogglePin>
	}
	if((temp_var_soft_bspd==1) && (apps_avg<5)){
 8002246:	4b15      	ldr	r3, [pc, #84]	; (800229c <softBSPD+0xc0>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d119      	bne.n	8002282 <softBSPD+0xa6>
 800224e:	4b11      	ldr	r3, [pc, #68]	; (8002294 <softBSPD+0xb8>)
 8002250:	edd3 7a00 	vldr	s15, [r3]
 8002254:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002258:	eef4 7ac7 	vcmpe.f32	s15, s14
 800225c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002260:	d400      	bmi.n	8002264 <softBSPD+0x88>
		torque_commanded=torque_demand;
		soft_bspd=0;
		temp_var_soft_bspd=0;
		HAL_GPIO_TogglePin(GPIOF, LEDF9_Pin);
	}
}
 8002262:	e00e      	b.n	8002282 <softBSPD+0xa6>
		torque_commanded=torque_demand;
 8002264:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <softBSPD+0xc4>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a0e      	ldr	r2, [pc, #56]	; (80022a4 <softBSPD+0xc8>)
 800226a:	6013      	str	r3, [r2, #0]
		soft_bspd=0;
 800226c:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <softBSPD+0xcc>)
 800226e:	2200      	movs	r2, #0
 8002270:	701a      	strb	r2, [r3, #0]
		temp_var_soft_bspd=0;
 8002272:	4b0a      	ldr	r3, [pc, #40]	; (800229c <softBSPD+0xc0>)
 8002274:	2200      	movs	r2, #0
 8002276:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOF, LEDF9_Pin);
 8002278:	f44f 7100 	mov.w	r1, #512	; 0x200
 800227c:	480b      	ldr	r0, [pc, #44]	; (80022ac <softBSPD+0xd0>)
 800227e:	f002 fc50 	bl	8004b22 <HAL_GPIO_TogglePin>
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	200002e8 	.word	0x200002e8
 800228c:	2000000c 	.word	0x2000000c
 8002290:	200002ea 	.word	0x200002ea
 8002294:	200002e0 	.word	0x200002e0
 8002298:	20000008 	.word	0x20000008
 800229c:	200002d3 	.word	0x200002d3
 80022a0:	200002e4 	.word	0x200002e4
 80022a4:	200002fc 	.word	0x200002fc
 80022a8:	200002d0 	.word	0x200002d0
 80022ac:	40021400 	.word	0x40021400

080022b0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TV_BUTTON_EXTI13_Pin){
 80022ba:	88fb      	ldrh	r3, [r7, #6]
 80022bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022c0:	d10e      	bne.n	80022e0 <HAL_GPIO_EXTI_Callback+0x30>
		if(HAL_GPIO_ReadPin(GPIOG, TV_BUTTON_EXTI13_Pin )&& tsms==1){
 80022c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022c6:	4818      	ldr	r0, [pc, #96]	; (8002328 <HAL_GPIO_EXTI_Callback+0x78>)
 80022c8:	f002 fbfa 	bl	8004ac0 <HAL_GPIO_ReadPin>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d006      	beq.n	80022e0 <HAL_GPIO_EXTI_Callback+0x30>
 80022d2:	4b16      	ldr	r3, [pc, #88]	; (800232c <HAL_GPIO_EXTI_Callback+0x7c>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d102      	bne.n	80022e0 <HAL_GPIO_EXTI_Callback+0x30>
			clearfault_temp_var=1;
 80022da:	4b15      	ldr	r3, [pc, #84]	; (8002330 <HAL_GPIO_EXTI_Callback+0x80>)
 80022dc:	2201      	movs	r2, #1
 80022de:	701a      	strb	r2, [r3, #0]
//	if(GPIO_Pin==TV_BUTTON_EXTI13_Pin){
//		if(HAL_GPIO_ReadPin(GPIOG, TV_BUTTON_EXTI13_Pin)){
//			tv=1;
//		}
//	}
	if(GPIO_Pin==TV_EXTI_Pin){
 80022e0:	88fb      	ldrh	r3, [r7, #6]
 80022e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022e6:	d11b      	bne.n	8002320 <HAL_GPIO_EXTI_Callback+0x70>
		if(HAL_GPIO_ReadPin(GPIOG, TV_EXTI_Pin)){
 80022e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022ec:	480e      	ldr	r0, [pc, #56]	; (8002328 <HAL_GPIO_EXTI_Callback+0x78>)
 80022ee:	f002 fbe7 	bl	8004ac0 <HAL_GPIO_ReadPin>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d013      	beq.n	8002320 <HAL_GPIO_EXTI_Callback+0x70>
			if(tv==0){
 80022f8:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <HAL_GPIO_EXTI_Callback+0x84>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d103      	bne.n	8002308 <HAL_GPIO_EXTI_Callback+0x58>
				tv=1;
 8002300:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <HAL_GPIO_EXTI_Callback+0x84>)
 8002302:	2201      	movs	r2, #1
 8002304:	701a      	strb	r2, [r3, #0]
 8002306:	e006      	b.n	8002316 <HAL_GPIO_EXTI_Callback+0x66>
			}else if(tv==1){
 8002308:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <HAL_GPIO_EXTI_Callback+0x84>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d102      	bne.n	8002316 <HAL_GPIO_EXTI_Callback+0x66>
				tv=0;
 8002310:	4b08      	ldr	r3, [pc, #32]	; (8002334 <HAL_GPIO_EXTI_Callback+0x84>)
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]
			}
			c1++;
 8002316:	4b08      	ldr	r3, [pc, #32]	; (8002338 <HAL_GPIO_EXTI_Callback+0x88>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	3301      	adds	r3, #1
 800231c:	4a06      	ldr	r2, [pc, #24]	; (8002338 <HAL_GPIO_EXTI_Callback+0x88>)
 800231e:	6013      	str	r3, [r2, #0]
//			HAL_GPIO_TogglePin(INV_RST_LED_GPIO_Port, INV_RST_LED_Pin);
		}
	}
}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40021800 	.word	0x40021800
 800232c:	200002bb 	.word	0x200002bb
 8002330:	200002c9 	.word	0x200002c9
 8002334:	20000331 	.word	0x20000331
 8002338:	200002cc 	.word	0x200002cc

0800233c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
	if(htim==&htim6){
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a55      	ldr	r2, [pc, #340]	; (800249c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d132      	bne.n	80023b2 <HAL_TIM_PeriodElapsedCallback+0x76>
		if(CNT==0){
 800234c:	4b54      	ldr	r3, [pc, #336]	; (80024a0 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d120      	bne.n	8002396 <HAL_TIM_PeriodElapsedCallback+0x5a>
			if(rtds_temp_var==0){
 8002354:	4b53      	ldr	r3, [pc, #332]	; (80024a4 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d107      	bne.n	800236c <HAL_TIM_PeriodElapsedCallback+0x30>
				HAL_GPIO_TogglePin(GPIOB, BUZZ_OUT_Pin);
 800235c:	2140      	movs	r1, #64	; 0x40
 800235e:	4852      	ldr	r0, [pc, #328]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002360:	f002 fbdf 	bl	8004b22 <HAL_GPIO_TogglePin>
				rtds_temp_var=1;
 8002364:	4b4f      	ldr	r3, [pc, #316]	; (80024a4 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002366:	2201      	movs	r2, #1
 8002368:	701a      	strb	r2, [r3, #0]
 800236a:	e010      	b.n	800238e <HAL_TIM_PeriodElapsedCallback+0x52>
			}else if(rtds_temp_var==1){
 800236c:	4b4d      	ldr	r3, [pc, #308]	; (80024a4 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d10c      	bne.n	800238e <HAL_TIM_PeriodElapsedCallback+0x52>
				HAL_GPIO_TogglePin(GPIOB, BUZZ_OUT_Pin);
 8002374:	2140      	movs	r1, #64	; 0x40
 8002376:	484c      	ldr	r0, [pc, #304]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002378:	f002 fbd3 	bl	8004b22 <HAL_GPIO_TogglePin>
				HAL_TIM_Base_Stop_IT(&htim6);
 800237c:	4847      	ldr	r0, [pc, #284]	; (800249c <HAL_TIM_PeriodElapsedCallback+0x160>)
 800237e:	f003 f8e7 	bl	8005550 <HAL_TIM_Base_Stop_IT>
				rtds=1;
 8002382:	4b4a      	ldr	r3, [pc, #296]	; (80024ac <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002384:	2201      	movs	r2, #1
 8002386:	701a      	strb	r2, [r3, #0]
				rtds_temp_var=0;
 8002388:	4b46      	ldr	r3, [pc, #280]	; (80024a4 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]
			}
			CNT=1;
 800238e:	4b44      	ldr	r3, [pc, #272]	; (80024a0 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002390:	2201      	movs	r2, #1
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	e00d      	b.n	80023b2 <HAL_TIM_PeriodElapsedCallback+0x76>
		}else if(CNT!=0){
 8002396:	4b42      	ldr	r3, [pc, #264]	; (80024a0 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d009      	beq.n	80023b2 <HAL_TIM_PeriodElapsedCallback+0x76>
			HAL_GPIO_TogglePin(GPIOB, BUZZ_OUT_Pin);
 800239e:	2140      	movs	r1, #64	; 0x40
 80023a0:	4841      	ldr	r0, [pc, #260]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80023a2:	f002 fbbe 	bl	8004b22 <HAL_GPIO_TogglePin>
			HAL_TIM_Base_Stop_IT(&htim6);
 80023a6:	483d      	ldr	r0, [pc, #244]	; (800249c <HAL_TIM_PeriodElapsedCallback+0x160>)
 80023a8:	f003 f8d2 	bl	8005550 <HAL_TIM_Base_Stop_IT>
			rtds=1;
 80023ac:	4b3f      	ldr	r3, [pc, #252]	; (80024ac <HAL_TIM_PeriodElapsedCallback+0x170>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	701a      	strb	r2, [r3, #0]
		}
	}
	if(htim==&htim7){
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a3e      	ldr	r2, [pc, #248]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d165      	bne.n	8002486 <HAL_TIM_PeriodElapsedCallback+0x14a>
		if(CNT_impl==0){
 80023ba:	4b3e      	ldr	r3, [pc, #248]	; (80024b4 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d136      	bne.n	8002430 <HAL_TIM_PeriodElapsedCallback+0xf4>
			if(ip_temp_var==0){
 80023c2:	4b3d      	ldr	r3, [pc, #244]	; (80024b8 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d103      	bne.n	80023d2 <HAL_TIM_PeriodElapsedCallback+0x96>
				ip_temp_var=1;
 80023ca:	4b3b      	ldr	r3, [pc, #236]	; (80024b8 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	701a      	strb	r2, [r3, #0]
 80023d0:	e02a      	b.n	8002428 <HAL_TIM_PeriodElapsedCallback+0xec>
			}else if(ip_temp_var==1){
 80023d2:	4b39      	ldr	r3, [pc, #228]	; (80024b8 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d126      	bne.n	8002428 <HAL_TIM_PeriodElapsedCallback+0xec>
				HAL_TIM_Base_Stop_IT(&htim7);
 80023da:	4835      	ldr	r0, [pc, #212]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80023dc:	f003 f8b8 	bl	8005550 <HAL_TIM_Base_Stop_IT>
				if(app1-app2>10 || app2-app1>10){
 80023e0:	4b36      	ldr	r3, [pc, #216]	; (80024bc <HAL_TIM_PeriodElapsedCallback+0x180>)
 80023e2:	ed93 7a00 	vldr	s14, [r3]
 80023e6:	4b36      	ldr	r3, [pc, #216]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80023e8:	edd3 7a00 	vldr	s15, [r3]
 80023ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023f0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80023f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023fc:	dc0e      	bgt.n	800241c <HAL_TIM_PeriodElapsedCallback+0xe0>
 80023fe:	4b30      	ldr	r3, [pc, #192]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002400:	ed93 7a00 	vldr	s14, [r3]
 8002404:	4b2d      	ldr	r3, [pc, #180]	; (80024bc <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002406:	edd3 7a00 	vldr	s15, [r3]
 800240a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800240e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002412:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241a:	dd05      	ble.n	8002428 <HAL_TIM_PeriodElapsedCallback+0xec>
					implausiblity=1;
 800241c:	4b29      	ldr	r3, [pc, #164]	; (80024c4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800241e:	2201      	movs	r2, #1
 8002420:	701a      	strb	r2, [r3, #0]
					rtds=0;
 8002422:	4b22      	ldr	r3, [pc, #136]	; (80024ac <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002424:	2200      	movs	r2, #0
 8002426:	701a      	strb	r2, [r3, #0]
				}
			}
			CNT_impl=1;
 8002428:	4b22      	ldr	r3, [pc, #136]	; (80024b4 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800242a:	2201      	movs	r2, #1
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	e02a      	b.n	8002486 <HAL_TIM_PeriodElapsedCallback+0x14a>
		}else if(CNT!=0){
 8002430:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d026      	beq.n	8002486 <HAL_TIM_PeriodElapsedCallback+0x14a>
			HAL_TIM_Base_Stop_IT(&htim7);
 8002438:	481d      	ldr	r0, [pc, #116]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800243a:	f003 f889 	bl	8005550 <HAL_TIM_Base_Stop_IT>
			if(app1-app2>10 || app2-app1>10){
 800243e:	4b1f      	ldr	r3, [pc, #124]	; (80024bc <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002440:	ed93 7a00 	vldr	s14, [r3]
 8002444:	4b1e      	ldr	r3, [pc, #120]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002446:	edd3 7a00 	vldr	s15, [r3]
 800244a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800244e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002452:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800245a:	dc0e      	bgt.n	800247a <HAL_TIM_PeriodElapsedCallback+0x13e>
 800245c:	4b18      	ldr	r3, [pc, #96]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800245e:	ed93 7a00 	vldr	s14, [r3]
 8002462:	4b16      	ldr	r3, [pc, #88]	; (80024bc <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002464:	edd3 7a00 	vldr	s15, [r3]
 8002468:	ee77 7a67 	vsub.f32	s15, s14, s15
 800246c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002470:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002478:	dd05      	ble.n	8002486 <HAL_TIM_PeriodElapsedCallback+0x14a>
				implausiblity=1;
 800247a:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800247c:	2201      	movs	r2, #1
 800247e:	701a      	strb	r2, [r3, #0]
				rtds=0;
 8002480:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002482:	2200      	movs	r2, #0
 8002484:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if(htim==&htim5){
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a0f      	ldr	r2, [pc, #60]	; (80024c8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d101      	bne.n	8002492 <HAL_TIM_PeriodElapsedCallback+0x156>
		CAN_Transmit_Messages();
 800248e:	f000 f81d 	bl	80024cc <CAN_Transmit_Messages>
	}
}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20000160 	.word	0x20000160
 80024a0:	200002c0 	.word	0x200002c0
 80024a4:	200002c8 	.word	0x200002c8
 80024a8:	40020400 	.word	0x40020400
 80024ac:	200002bc 	.word	0x200002bc
 80024b0:	200001a8 	.word	0x200001a8
 80024b4:	200002c4 	.word	0x200002c4
 80024b8:	200002d2 	.word	0x200002d2
 80024bc:	200002d8 	.word	0x200002d8
 80024c0:	200002dc 	.word	0x200002dc
 80024c4:	200002d1 	.word	0x200002d1
 80024c8:	20000118 	.word	0x20000118

080024cc <CAN_Transmit_Messages>:
void CAN_Transmit_Messages(){
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0

	if(clearfault_temp_var==1){
 80024d0:	4b55      	ldr	r3, [pc, #340]	; (8002628 <CAN_Transmit_Messages+0x15c>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d126      	bne.n	8002526 <CAN_Transmit_Messages+0x5a>
			Txdata_inv_rst[0]=20;
 80024d8:	4b54      	ldr	r3, [pc, #336]	; (800262c <CAN_Transmit_Messages+0x160>)
 80024da:	2214      	movs	r2, #20
 80024dc:	701a      	strb	r2, [r3, #0]
			Txdata_inv_rst[1]=0;
 80024de:	4b53      	ldr	r3, [pc, #332]	; (800262c <CAN_Transmit_Messages+0x160>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	705a      	strb	r2, [r3, #1]
			Txdata_inv_rst[2]=1;
 80024e4:	4b51      	ldr	r3, [pc, #324]	; (800262c <CAN_Transmit_Messages+0x160>)
 80024e6:	2201      	movs	r2, #1
 80024e8:	709a      	strb	r2, [r3, #2]
			Txdata_inv_rst[3]=0;
 80024ea:	4b50      	ldr	r3, [pc, #320]	; (800262c <CAN_Transmit_Messages+0x160>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	70da      	strb	r2, [r3, #3]
			Txdata_inv_rst[4]=0;
 80024f0:	4b4e      	ldr	r3, [pc, #312]	; (800262c <CAN_Transmit_Messages+0x160>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	711a      	strb	r2, [r3, #4]
			Txdata_inv_rst[5]=0;
 80024f6:	4b4d      	ldr	r3, [pc, #308]	; (800262c <CAN_Transmit_Messages+0x160>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	715a      	strb	r2, [r3, #5]
//			CAN_Tx(&hcan1,0x0C1,Txdata_inv_rst);
//			CAN_Tx(&hcan1,0x0F1,Txdata_inv_rst);
			eq_CAN_Tx(&hcan1,0x0C1,Txdata_inv_rst,6);
 80024fc:	2306      	movs	r3, #6
 80024fe:	4a4b      	ldr	r2, [pc, #300]	; (800262c <CAN_Transmit_Messages+0x160>)
 8002500:	21c1      	movs	r1, #193	; 0xc1
 8002502:	484b      	ldr	r0, [pc, #300]	; (8002630 <CAN_Transmit_Messages+0x164>)
 8002504:	f000 f9a6 	bl	8002854 <eq_CAN_Tx>
			eq_CAN_Tx(&hcan1,0x0F1,Txdata_inv_rst,6);
 8002508:	2306      	movs	r3, #6
 800250a:	4a48      	ldr	r2, [pc, #288]	; (800262c <CAN_Transmit_Messages+0x160>)
 800250c:	21f1      	movs	r1, #241	; 0xf1
 800250e:	4848      	ldr	r0, [pc, #288]	; (8002630 <CAN_Transmit_Messages+0x164>)
 8002510:	f000 f9a0 	bl	8002854 <eq_CAN_Tx>
			clearfault_temp_var=0;
 8002514:	4b44      	ldr	r3, [pc, #272]	; (8002628 <CAN_Transmit_Messages+0x15c>)
 8002516:	2200      	movs	r2, #0
 8002518:	701a      	strb	r2, [r3, #0]
			clearfault_left=1;
 800251a:	4b46      	ldr	r3, [pc, #280]	; (8002634 <CAN_Transmit_Messages+0x168>)
 800251c:	2201      	movs	r2, #1
 800251e:	701a      	strb	r2, [r3, #0]
			clearfault_right=1;
 8002520:	4b45      	ldr	r3, [pc, #276]	; (8002638 <CAN_Transmit_Messages+0x16c>)
 8002522:	2201      	movs	r2, #1
 8002524:	701a      	strb	r2, [r3, #0]
	}

	if(tsms==1&&rtds==0&&clearfault_left==1&&clearfault_right==1){
 8002526:	4b45      	ldr	r3, [pc, #276]	; (800263c <CAN_Transmit_Messages+0x170>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b01      	cmp	r3, #1
 800252c:	f040 8094 	bne.w	8002658 <CAN_Transmit_Messages+0x18c>
 8002530:	4b43      	ldr	r3, [pc, #268]	; (8002640 <CAN_Transmit_Messages+0x174>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	f040 808f 	bne.w	8002658 <CAN_Transmit_Messages+0x18c>
 800253a:	4b3e      	ldr	r3, [pc, #248]	; (8002634 <CAN_Transmit_Messages+0x168>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b01      	cmp	r3, #1
 8002540:	f040 808a 	bne.w	8002658 <CAN_Transmit_Messages+0x18c>
 8002544:	4b3c      	ldr	r3, [pc, #240]	; (8002638 <CAN_Transmit_Messages+0x16c>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b01      	cmp	r3, #1
 800254a:	f040 8085 	bne.w	8002658 <CAN_Transmit_Messages+0x18c>
//	if(tsms==1&&clearfault_left==1&&clearfault_right==1&&ishan!=3){
			left_inv_transmit[0]=0;
 800254e:	4b3d      	ldr	r3, [pc, #244]	; (8002644 <CAN_Transmit_Messages+0x178>)
 8002550:	2200      	movs	r2, #0
 8002552:	701a      	strb	r2, [r3, #0]
			left_inv_transmit[1]=0;
 8002554:	4b3b      	ldr	r3, [pc, #236]	; (8002644 <CAN_Transmit_Messages+0x178>)
 8002556:	2200      	movs	r2, #0
 8002558:	705a      	strb	r2, [r3, #1]
			left_inv_transmit[2]=0;
 800255a:	4b3a      	ldr	r3, [pc, #232]	; (8002644 <CAN_Transmit_Messages+0x178>)
 800255c:	2200      	movs	r2, #0
 800255e:	709a      	strb	r2, [r3, #2]
			left_inv_transmit[3]=0;
 8002560:	4b38      	ldr	r3, [pc, #224]	; (8002644 <CAN_Transmit_Messages+0x178>)
 8002562:	2200      	movs	r2, #0
 8002564:	70da      	strb	r2, [r3, #3]
			left_inv_transmit[4]=1;
 8002566:	4b37      	ldr	r3, [pc, #220]	; (8002644 <CAN_Transmit_Messages+0x178>)
 8002568:	2201      	movs	r2, #1
 800256a:	711a      	strb	r2, [r3, #4]
			left_inv_transmit[5]=0;
 800256c:	4b35      	ldr	r3, [pc, #212]	; (8002644 <CAN_Transmit_Messages+0x178>)
 800256e:	2200      	movs	r2, #0
 8002570:	715a      	strb	r2, [r3, #5]
			left_inv_transmit[6]=((torque_limit)*10)%256;
 8002572:	4b35      	ldr	r3, [pc, #212]	; (8002648 <CAN_Transmit_Messages+0x17c>)
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	b2db      	uxtb	r3, r3
 8002578:	461a      	mov	r2, r3
 800257a:	0092      	lsls	r2, r2, #2
 800257c:	4413      	add	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	b2da      	uxtb	r2, r3
 8002582:	4b30      	ldr	r3, [pc, #192]	; (8002644 <CAN_Transmit_Messages+0x178>)
 8002584:	719a      	strb	r2, [r3, #6]
			left_inv_transmit[7]=((torque_limit)*10)/256;
 8002586:	4b30      	ldr	r3, [pc, #192]	; (8002648 <CAN_Transmit_Messages+0x17c>)
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	2b00      	cmp	r3, #0
 8002596:	da00      	bge.n	800259a <CAN_Transmit_Messages+0xce>
 8002598:	33ff      	adds	r3, #255	; 0xff
 800259a:	121b      	asrs	r3, r3, #8
 800259c:	b2da      	uxtb	r2, r3
 800259e:	4b29      	ldr	r3, [pc, #164]	; (8002644 <CAN_Transmit_Messages+0x178>)
 80025a0:	71da      	strb	r2, [r3, #7]

			right_inv_transmit[0]=0;
 80025a2:	4b2a      	ldr	r3, [pc, #168]	; (800264c <CAN_Transmit_Messages+0x180>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	701a      	strb	r2, [r3, #0]
			right_inv_transmit[1]=0;
 80025a8:	4b28      	ldr	r3, [pc, #160]	; (800264c <CAN_Transmit_Messages+0x180>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	705a      	strb	r2, [r3, #1]
			right_inv_transmit[2]=0;
 80025ae:	4b27      	ldr	r3, [pc, #156]	; (800264c <CAN_Transmit_Messages+0x180>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	709a      	strb	r2, [r3, #2]
			right_inv_transmit[3]=0;
 80025b4:	4b25      	ldr	r3, [pc, #148]	; (800264c <CAN_Transmit_Messages+0x180>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	70da      	strb	r2, [r3, #3]
			right_inv_transmit[4]=0;
 80025ba:	4b24      	ldr	r3, [pc, #144]	; (800264c <CAN_Transmit_Messages+0x180>)
 80025bc:	2200      	movs	r2, #0
 80025be:	711a      	strb	r2, [r3, #4]
			right_inv_transmit[5]=0;
 80025c0:	4b22      	ldr	r3, [pc, #136]	; (800264c <CAN_Transmit_Messages+0x180>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	715a      	strb	r2, [r3, #5]
			right_inv_transmit[6]=((torque_limit)*10)%256;
 80025c6:	4b20      	ldr	r3, [pc, #128]	; (8002648 <CAN_Transmit_Messages+0x17c>)
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	461a      	mov	r2, r3
 80025ce:	0092      	lsls	r2, r2, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	4b1d      	ldr	r3, [pc, #116]	; (800264c <CAN_Transmit_Messages+0x180>)
 80025d8:	719a      	strb	r2, [r3, #6]
			right_inv_transmit[7]=((torque_limit)*10)/256;
 80025da:	4b1b      	ldr	r3, [pc, #108]	; (8002648 <CAN_Transmit_Messages+0x17c>)
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	461a      	mov	r2, r3
 80025e0:	4613      	mov	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	da00      	bge.n	80025ee <CAN_Transmit_Messages+0x122>
 80025ec:	33ff      	adds	r3, #255	; 0xff
 80025ee:	121b      	asrs	r3, r3, #8
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	4b16      	ldr	r3, [pc, #88]	; (800264c <CAN_Transmit_Messages+0x180>)
 80025f4:	71da      	strb	r2, [r3, #7]
//			CAN_Tx(&hcan1,0x0F0,left_inv_transmit);
			eq_CAN_Tx(&hcan1,0x0F0,left_inv_transmit,8);
 80025f6:	2308      	movs	r3, #8
 80025f8:	4a12      	ldr	r2, [pc, #72]	; (8002644 <CAN_Transmit_Messages+0x178>)
 80025fa:	21f0      	movs	r1, #240	; 0xf0
 80025fc:	480c      	ldr	r0, [pc, #48]	; (8002630 <CAN_Transmit_Messages+0x164>)
 80025fe:	f000 f929 	bl	8002854 <eq_CAN_Tx>
			a++;
 8002602:	4b13      	ldr	r3, [pc, #76]	; (8002650 <CAN_Transmit_Messages+0x184>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	3301      	adds	r3, #1
 8002608:	b2da      	uxtb	r2, r3
 800260a:	4b11      	ldr	r3, [pc, #68]	; (8002650 <CAN_Transmit_Messages+0x184>)
 800260c:	701a      	strb	r2, [r3, #0]

//			CAN_Tx(&hcan1,0x0C0,right_inv_transmit);
			eq_CAN_Tx(&hcan1,0x0C0,right_inv_transmit,8);
 800260e:	2308      	movs	r3, #8
 8002610:	4a0e      	ldr	r2, [pc, #56]	; (800264c <CAN_Transmit_Messages+0x180>)
 8002612:	21c0      	movs	r1, #192	; 0xc0
 8002614:	4806      	ldr	r0, [pc, #24]	; (8002630 <CAN_Transmit_Messages+0x164>)
 8002616:	f000 f91d 	bl	8002854 <eq_CAN_Tx>
			b++;
 800261a:	4b0e      	ldr	r3, [pc, #56]	; (8002654 <CAN_Transmit_Messages+0x188>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	3301      	adds	r3, #1
 8002620:	b2da      	uxtb	r2, r3
 8002622:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <CAN_Transmit_Messages+0x188>)
 8002624:	701a      	strb	r2, [r3, #0]
 8002626:	e0bf      	b.n	80027a8 <CAN_Transmit_Messages+0x2dc>
 8002628:	200002c9 	.word	0x200002c9
 800262c:	20000320 	.word	0x20000320
 8002630:	200000c8 	.word	0x200000c8
 8002634:	200002ca 	.word	0x200002ca
 8002638:	200002cb 	.word	0x200002cb
 800263c:	200002bb 	.word	0x200002bb
 8002640:	200002bc 	.word	0x200002bc
 8002644:	20000334 	.word	0x20000334
 8002648:	2000000e 	.word	0x2000000e
 800264c:	2000033c 	.word	0x2000033c
 8002650:	20000344 	.word	0x20000344
 8002654:	20000345 	.word	0x20000345
	}else if(tsms==1&&rtds==1){
 8002658:	4b70      	ldr	r3, [pc, #448]	; (800281c <CAN_Transmit_Messages+0x350>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b01      	cmp	r3, #1
 800265e:	f040 80a3 	bne.w	80027a8 <CAN_Transmit_Messages+0x2dc>
 8002662:	4b6f      	ldr	r3, [pc, #444]	; (8002820 <CAN_Transmit_Messages+0x354>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b01      	cmp	r3, #1
 8002668:	f040 809e 	bne.w	80027a8 <CAN_Transmit_Messages+0x2dc>
			left_inv_transmit[0]=(int)((torque_commanded_left)*10)%256;
 800266c:	4b6d      	ldr	r3, [pc, #436]	; (8002824 <CAN_Transmit_Messages+0x358>)
 800266e:	edd3 7a00 	vldr	s15, [r3]
 8002672:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002676:	ee67 7a87 	vmul.f32	s15, s15, s14
 800267a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800267e:	ee17 3a90 	vmov	r3, s15
 8002682:	425a      	negs	r2, r3
 8002684:	b2db      	uxtb	r3, r3
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	bf58      	it	pl
 800268a:	4253      	negpl	r3, r2
 800268c:	b2da      	uxtb	r2, r3
 800268e:	4b66      	ldr	r3, [pc, #408]	; (8002828 <CAN_Transmit_Messages+0x35c>)
 8002690:	701a      	strb	r2, [r3, #0]
			left_inv_transmit[1]=(int)((torque_commanded_left)*10)/256;;
 8002692:	4b64      	ldr	r3, [pc, #400]	; (8002824 <CAN_Transmit_Messages+0x358>)
 8002694:	edd3 7a00 	vldr	s15, [r3]
 8002698:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800269c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026a4:	ee17 3a90 	vmov	r3, s15
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	da00      	bge.n	80026ae <CAN_Transmit_Messages+0x1e2>
 80026ac:	33ff      	adds	r3, #255	; 0xff
 80026ae:	121b      	asrs	r3, r3, #8
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	4b5d      	ldr	r3, [pc, #372]	; (8002828 <CAN_Transmit_Messages+0x35c>)
 80026b4:	705a      	strb	r2, [r3, #1]
			left_inv_transmit[2]=0;
 80026b6:	4b5c      	ldr	r3, [pc, #368]	; (8002828 <CAN_Transmit_Messages+0x35c>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	709a      	strb	r2, [r3, #2]
			left_inv_transmit[3]=0;
 80026bc:	4b5a      	ldr	r3, [pc, #360]	; (8002828 <CAN_Transmit_Messages+0x35c>)
 80026be:	2200      	movs	r2, #0
 80026c0:	70da      	strb	r2, [r3, #3]
			left_inv_transmit[4]=1;
 80026c2:	4b59      	ldr	r3, [pc, #356]	; (8002828 <CAN_Transmit_Messages+0x35c>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	711a      	strb	r2, [r3, #4]
			left_inv_transmit[5]=1;
 80026c8:	4b57      	ldr	r3, [pc, #348]	; (8002828 <CAN_Transmit_Messages+0x35c>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	715a      	strb	r2, [r3, #5]
			left_inv_transmit[6]=((torque_limit)*10)%256;
 80026ce:	4b57      	ldr	r3, [pc, #348]	; (800282c <CAN_Transmit_Messages+0x360>)
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	461a      	mov	r2, r3
 80026d6:	0092      	lsls	r2, r2, #2
 80026d8:	4413      	add	r3, r2
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	4b52      	ldr	r3, [pc, #328]	; (8002828 <CAN_Transmit_Messages+0x35c>)
 80026e0:	719a      	strb	r2, [r3, #6]
			left_inv_transmit[7]=((torque_limit)*10)/256;
 80026e2:	4b52      	ldr	r3, [pc, #328]	; (800282c <CAN_Transmit_Messages+0x360>)
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	4613      	mov	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	da00      	bge.n	80026f6 <CAN_Transmit_Messages+0x22a>
 80026f4:	33ff      	adds	r3, #255	; 0xff
 80026f6:	121b      	asrs	r3, r3, #8
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	4b4b      	ldr	r3, [pc, #300]	; (8002828 <CAN_Transmit_Messages+0x35c>)
 80026fc:	71da      	strb	r2, [r3, #7]

			right_inv_transmit[0]=(int)((torque_commanded_right)*10)%256;;
 80026fe:	4b4c      	ldr	r3, [pc, #304]	; (8002830 <CAN_Transmit_Messages+0x364>)
 8002700:	edd3 7a00 	vldr	s15, [r3]
 8002704:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002708:	ee67 7a87 	vmul.f32	s15, s15, s14
 800270c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002710:	ee17 3a90 	vmov	r3, s15
 8002714:	425a      	negs	r2, r3
 8002716:	b2db      	uxtb	r3, r3
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	bf58      	it	pl
 800271c:	4253      	negpl	r3, r2
 800271e:	b2da      	uxtb	r2, r3
 8002720:	4b44      	ldr	r3, [pc, #272]	; (8002834 <CAN_Transmit_Messages+0x368>)
 8002722:	701a      	strb	r2, [r3, #0]
			right_inv_transmit[1]=(int)((torque_commanded_right)*10)/256;;
 8002724:	4b42      	ldr	r3, [pc, #264]	; (8002830 <CAN_Transmit_Messages+0x364>)
 8002726:	edd3 7a00 	vldr	s15, [r3]
 800272a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800272e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002732:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002736:	ee17 3a90 	vmov	r3, s15
 800273a:	2b00      	cmp	r3, #0
 800273c:	da00      	bge.n	8002740 <CAN_Transmit_Messages+0x274>
 800273e:	33ff      	adds	r3, #255	; 0xff
 8002740:	121b      	asrs	r3, r3, #8
 8002742:	b2da      	uxtb	r2, r3
 8002744:	4b3b      	ldr	r3, [pc, #236]	; (8002834 <CAN_Transmit_Messages+0x368>)
 8002746:	705a      	strb	r2, [r3, #1]
			right_inv_transmit[2]=0;
 8002748:	4b3a      	ldr	r3, [pc, #232]	; (8002834 <CAN_Transmit_Messages+0x368>)
 800274a:	2200      	movs	r2, #0
 800274c:	709a      	strb	r2, [r3, #2]
			right_inv_transmit[3]=0;
 800274e:	4b39      	ldr	r3, [pc, #228]	; (8002834 <CAN_Transmit_Messages+0x368>)
 8002750:	2200      	movs	r2, #0
 8002752:	70da      	strb	r2, [r3, #3]
			right_inv_transmit[4]=0;
 8002754:	4b37      	ldr	r3, [pc, #220]	; (8002834 <CAN_Transmit_Messages+0x368>)
 8002756:	2200      	movs	r2, #0
 8002758:	711a      	strb	r2, [r3, #4]
			right_inv_transmit[5]=1;
 800275a:	4b36      	ldr	r3, [pc, #216]	; (8002834 <CAN_Transmit_Messages+0x368>)
 800275c:	2201      	movs	r2, #1
 800275e:	715a      	strb	r2, [r3, #5]
			right_inv_transmit[6]=((torque_limit)*10)%256;
 8002760:	4b32      	ldr	r3, [pc, #200]	; (800282c <CAN_Transmit_Messages+0x360>)
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	b2db      	uxtb	r3, r3
 8002766:	461a      	mov	r2, r3
 8002768:	0092      	lsls	r2, r2, #2
 800276a:	4413      	add	r3, r2
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	b2da      	uxtb	r2, r3
 8002770:	4b30      	ldr	r3, [pc, #192]	; (8002834 <CAN_Transmit_Messages+0x368>)
 8002772:	719a      	strb	r2, [r3, #6]
			right_inv_transmit[7]=((torque_limit)*10)/256;
 8002774:	4b2d      	ldr	r3, [pc, #180]	; (800282c <CAN_Transmit_Messages+0x360>)
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	461a      	mov	r2, r3
 800277a:	4613      	mov	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	da00      	bge.n	8002788 <CAN_Transmit_Messages+0x2bc>
 8002786:	33ff      	adds	r3, #255	; 0xff
 8002788:	121b      	asrs	r3, r3, #8
 800278a:	b2da      	uxtb	r2, r3
 800278c:	4b29      	ldr	r3, [pc, #164]	; (8002834 <CAN_Transmit_Messages+0x368>)
 800278e:	71da      	strb	r2, [r3, #7]
//			CAN_Tx(&hcan1,0x0F0,left_inv_transmit);
			eq_CAN_Tx(&hcan1,0x0F0,left_inv_transmit,8);
 8002790:	2308      	movs	r3, #8
 8002792:	4a25      	ldr	r2, [pc, #148]	; (8002828 <CAN_Transmit_Messages+0x35c>)
 8002794:	21f0      	movs	r1, #240	; 0xf0
 8002796:	4828      	ldr	r0, [pc, #160]	; (8002838 <CAN_Transmit_Messages+0x36c>)
 8002798:	f000 f85c 	bl	8002854 <eq_CAN_Tx>
//			CAN_Tx(&hcan1,0x0C0,right_inv_transmit);
			eq_CAN_Tx(&hcan1,0x0C0,right_inv_transmit,8);
 800279c:	2308      	movs	r3, #8
 800279e:	4a25      	ldr	r2, [pc, #148]	; (8002834 <CAN_Transmit_Messages+0x368>)
 80027a0:	21c0      	movs	r1, #192	; 0xc0
 80027a2:	4825      	ldr	r0, [pc, #148]	; (8002838 <CAN_Transmit_Messages+0x36c>)
 80027a4:	f000 f856 	bl	8002854 <eq_CAN_Tx>
	}
	eq_CAN_Tx(&hcan1,0x1,Txdata_imp1,8);
 80027a8:	2308      	movs	r3, #8
 80027aa:	4a24      	ldr	r2, [pc, #144]	; (800283c <CAN_Transmit_Messages+0x370>)
 80027ac:	2101      	movs	r1, #1
 80027ae:	4822      	ldr	r0, [pc, #136]	; (8002838 <CAN_Transmit_Messages+0x36c>)
 80027b0:	f000 f850 	bl	8002854 <eq_CAN_Tx>
	eq_CAN_Tx(&hcan1,0x2,Txdata_imp2,6);
 80027b4:	2306      	movs	r3, #6
 80027b6:	4a22      	ldr	r2, [pc, #136]	; (8002840 <CAN_Transmit_Messages+0x374>)
 80027b8:	2102      	movs	r1, #2
 80027ba:	481f      	ldr	r0, [pc, #124]	; (8002838 <CAN_Transmit_Messages+0x36c>)
 80027bc:	f000 f84a 	bl	8002854 <eq_CAN_Tx>
	eq_CAN_Tx(&hcan1,0x3,Txdata_state,8);
 80027c0:	2308      	movs	r3, #8
 80027c2:	4a20      	ldr	r2, [pc, #128]	; (8002844 <CAN_Transmit_Messages+0x378>)
 80027c4:	2103      	movs	r1, #3
 80027c6:	481c      	ldr	r0, [pc, #112]	; (8002838 <CAN_Transmit_Messages+0x36c>)
 80027c8:	f000 f844 	bl	8002854 <eq_CAN_Tx>
	eq_CAN_Tx(&hcan1,0x4,Txdata_control,8);
 80027cc:	2308      	movs	r3, #8
 80027ce:	4a1e      	ldr	r2, [pc, #120]	; (8002848 <CAN_Transmit_Messages+0x37c>)
 80027d0:	2104      	movs	r1, #4
 80027d2:	4819      	ldr	r0, [pc, #100]	; (8002838 <CAN_Transmit_Messages+0x36c>)
 80027d4:	f000 f83e 	bl	8002854 <eq_CAN_Tx>
	while(1)
	    {
	       if ((hcan1.Instance->TSR & CAN_TSR_TME0) || (hcan1.Instance->TSR & CAN_TSR_TME1) || (hcan1.Instance->TSR & CAN_TSR_TME2))  // checking empty CAN Tx mailboxes for can2 replace hcan1 with hcan2
 80027d8:	4b17      	ldr	r3, [pc, #92]	; (8002838 <CAN_Transmit_Messages+0x36c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10d      	bne.n	8002802 <CAN_Transmit_Messages+0x336>
 80027e6:	4b14      	ldr	r3, [pc, #80]	; (8002838 <CAN_Transmit_Messages+0x36c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d106      	bne.n	8002802 <CAN_Transmit_Messages+0x336>
 80027f4:	4b10      	ldr	r3, [pc, #64]	; (8002838 <CAN_Transmit_Messages+0x36c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0ea      	beq.n	80027d8 <CAN_Transmit_Messages+0x30c>
	       {
	        dq_CAN_Tx();
 8002802:	f000 f893 	bl	800292c <dq_CAN_Tx>
	        if (queueHead == queueTail) {
 8002806:	4b11      	ldr	r3, [pc, #68]	; (800284c <CAN_Transmit_Messages+0x380>)
 8002808:	781a      	ldrb	r2, [r3, #0]
 800280a:	4b11      	ldr	r3, [pc, #68]	; (8002850 <CAN_Transmit_Messages+0x384>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d000      	beq.n	8002814 <CAN_Transmit_Messages+0x348>
	       if ((hcan1.Instance->TSR & CAN_TSR_TME0) || (hcan1.Instance->TSR & CAN_TSR_TME1) || (hcan1.Instance->TSR & CAN_TSR_TME2))  // checking empty CAN Tx mailboxes for can2 replace hcan1 with hcan2
 8002812:	e7e1      	b.n	80027d8 <CAN_Transmit_Messages+0x30c>
	                // Queue is empty, nothing to dequeue
	                break; // once queue empty no need for infinite queue
 8002814:	bf00      	nop
	       }
	    }
	}
}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	200002bb 	.word	0x200002bb
 8002820:	200002bc 	.word	0x200002bc
 8002824:	20000300 	.word	0x20000300
 8002828:	20000334 	.word	0x20000334
 800282c:	2000000e 	.word	0x2000000e
 8002830:	20000304 	.word	0x20000304
 8002834:	2000033c 	.word	0x2000033c
 8002838:	200000c8 	.word	0x200000c8
 800283c:	20000308 	.word	0x20000308
 8002840:	20000310 	.word	0x20000310
 8002844:	20000318 	.word	0x20000318
 8002848:	20000328 	.word	0x20000328
 800284c:	200002b8 	.word	0x200002b8
 8002850:	200002b9 	.word	0x200002b9

08002854 <eq_CAN_Tx>:
void eq_CAN_Tx(CAN_HandleTypeDef* hcan, uint32_t id, uint8_t* data,uint8_t len) {
 8002854:	b480      	push	{r7}
 8002856:	b087      	sub	sp, #28
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
 8002860:	70fb      	strb	r3, [r7, #3]
    // Check if queue is full
    if ((queueHead + 1) % 10 == queueTail) {
 8002862:	4b2e      	ldr	r3, [pc, #184]	; (800291c <eq_CAN_Tx+0xc8>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	1c59      	adds	r1, r3, #1
 8002868:	4b2d      	ldr	r3, [pc, #180]	; (8002920 <eq_CAN_Tx+0xcc>)
 800286a:	fb83 2301 	smull	r2, r3, r3, r1
 800286e:	109a      	asrs	r2, r3, #2
 8002870:	17cb      	asrs	r3, r1, #31
 8002872:	1ad2      	subs	r2, r2, r3
 8002874:	4613      	mov	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	1aca      	subs	r2, r1, r3
 800287e:	4b29      	ldr	r3, [pc, #164]	; (8002924 <eq_CAN_Tx+0xd0>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d044      	beq.n	8002910 <eq_CAN_Tx+0xbc>
        // Queue is full, discard new message
        return;
    }

    // Enqueue message
    canMessageQueue[queueHead].id = id;
 8002886:	4b25      	ldr	r3, [pc, #148]	; (800291c <eq_CAN_Tx+0xc8>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	4619      	mov	r1, r3
 800288c:	4a26      	ldr	r2, [pc, #152]	; (8002928 <eq_CAN_Tx+0xd4>)
 800288e:	460b      	mov	r3, r1
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	440b      	add	r3, r1
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	3304      	adds	r3, #4
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < len; i++) {
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	e014      	b.n	80028ce <eq_CAN_Tx+0x7a>
        canMessageQueue[queueHead].data[i] = data[i];
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	4413      	add	r3, r2
 80028aa:	4a1c      	ldr	r2, [pc, #112]	; (800291c <eq_CAN_Tx+0xc8>)
 80028ac:	7812      	ldrb	r2, [r2, #0]
 80028ae:	4611      	mov	r1, r2
 80028b0:	7818      	ldrb	r0, [r3, #0]
 80028b2:	4a1d      	ldr	r2, [pc, #116]	; (8002928 <eq_CAN_Tx+0xd4>)
 80028b4:	460b      	mov	r3, r1
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	441a      	add	r2, r3
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	4413      	add	r3, r2
 80028c2:	3308      	adds	r3, #8
 80028c4:	4602      	mov	r2, r0
 80028c6:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < len; i++) {
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	3301      	adds	r3, #1
 80028cc:	617b      	str	r3, [r7, #20]
 80028ce:	78fb      	ldrb	r3, [r7, #3]
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	dbe6      	blt.n	80028a4 <eq_CAN_Tx+0x50>
    }
    canMessageQueue[queueHead].hcan = hcan;
 80028d6:	4b11      	ldr	r3, [pc, #68]	; (800291c <eq_CAN_Tx+0xc8>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	4619      	mov	r1, r3
 80028dc:	4a12      	ldr	r2, [pc, #72]	; (8002928 <eq_CAN_Tx+0xd4>)
 80028de:	460b      	mov	r3, r1
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	440b      	add	r3, r1
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	601a      	str	r2, [r3, #0]
    queueHead = (queueHead + 1) % 10;
 80028ec:	4b0b      	ldr	r3, [pc, #44]	; (800291c <eq_CAN_Tx+0xc8>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <eq_CAN_Tx+0xcc>)
 80028f4:	fb83 1302 	smull	r1, r3, r3, r2
 80028f8:	1099      	asrs	r1, r3, #2
 80028fa:	17d3      	asrs	r3, r2, #31
 80028fc:	1ac9      	subs	r1, r1, r3
 80028fe:	460b      	mov	r3, r1
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	440b      	add	r3, r1
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	1ad1      	subs	r1, r2, r3
 8002908:	b2ca      	uxtb	r2, r1
 800290a:	4b04      	ldr	r3, [pc, #16]	; (800291c <eq_CAN_Tx+0xc8>)
 800290c:	701a      	strb	r2, [r3, #0]
 800290e:	e000      	b.n	8002912 <eq_CAN_Tx+0xbe>
        return;
 8002910:	bf00      	nop
}
 8002912:	371c      	adds	r7, #28
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	200002b8 	.word	0x200002b8
 8002920:	66666667 	.word	0x66666667
 8002924:	200002b9 	.word	0x200002b9
 8002928:	200001f0 	.word	0x200001f0

0800292c <dq_CAN_Tx>:

void dq_CAN_Tx(void) {
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
    // Check if queue is empty
    if (queueHead == queueTail) {
 8002932:	4b17      	ldr	r3, [pc, #92]	; (8002990 <dq_CAN_Tx+0x64>)
 8002934:	781a      	ldrb	r2, [r3, #0]
 8002936:	4b17      	ldr	r3, [pc, #92]	; (8002994 <dq_CAN_Tx+0x68>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d024      	beq.n	8002988 <dq_CAN_Tx+0x5c>
        // Queue is empty, nothing to dequeue
        return;
    }

    // Transmit message at the head of the queue
    CanMessage* message = &canMessageQueue[queueTail];
 800293e:	4b15      	ldr	r3, [pc, #84]	; (8002994 <dq_CAN_Tx+0x68>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	461a      	mov	r2, r3
 8002944:	4613      	mov	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4a12      	ldr	r2, [pc, #72]	; (8002998 <dq_CAN_Tx+0x6c>)
 800294e:	4413      	add	r3, r2
 8002950:	607b      	str	r3, [r7, #4]

    CAN_Tx(message -> hcan,message->id,message->data);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6818      	ldr	r0, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6859      	ldr	r1, [r3, #4]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	3308      	adds	r3, #8
 800295e:	461a      	mov	r2, r3
 8002960:	f7ff fb20 	bl	8001fa4 <CAN_Tx>
    // Update queue tail
    queueTail = (queueTail + 1) % 10;
 8002964:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <dq_CAN_Tx+0x68>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	4b0c      	ldr	r3, [pc, #48]	; (800299c <dq_CAN_Tx+0x70>)
 800296c:	fb83 1302 	smull	r1, r3, r3, r2
 8002970:	1099      	asrs	r1, r3, #2
 8002972:	17d3      	asrs	r3, r2, #31
 8002974:	1ac9      	subs	r1, r1, r3
 8002976:	460b      	mov	r3, r1
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	440b      	add	r3, r1
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	1ad1      	subs	r1, r2, r3
 8002980:	b2ca      	uxtb	r2, r1
 8002982:	4b04      	ldr	r3, [pc, #16]	; (8002994 <dq_CAN_Tx+0x68>)
 8002984:	701a      	strb	r2, [r3, #0]
 8002986:	e000      	b.n	800298a <dq_CAN_Tx+0x5e>
        return;
 8002988:	bf00      	nop
}
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	200002b8 	.word	0x200002b8
 8002994:	200002b9 	.word	0x200002b9
 8002998:	200001f0 	.word	0x200001f0
 800299c:	66666667 	.word	0x66666667

080029a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029a4:	b672      	cpsid	i
}
 80029a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029a8:	e7fe      	b.n	80029a8 <Error_Handler+0x8>
	...

080029ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	607b      	str	r3, [r7, #4]
 80029b6:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <HAL_MspInit+0x4c>)
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	4a0f      	ldr	r2, [pc, #60]	; (80029f8 <HAL_MspInit+0x4c>)
 80029bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c0:	6453      	str	r3, [r2, #68]	; 0x44
 80029c2:	4b0d      	ldr	r3, [pc, #52]	; (80029f8 <HAL_MspInit+0x4c>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ca:	607b      	str	r3, [r7, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	603b      	str	r3, [r7, #0]
 80029d2:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <HAL_MspInit+0x4c>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	4a08      	ldr	r2, [pc, #32]	; (80029f8 <HAL_MspInit+0x4c>)
 80029d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029dc:	6413      	str	r3, [r2, #64]	; 0x40
 80029de:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <HAL_MspInit+0x4c>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e6:	603b      	str	r3, [r7, #0]
 80029e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	40023800 	.word	0x40023800

080029fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08c      	sub	sp, #48	; 0x30
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a04:	f107 031c 	add.w	r3, r7, #28
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a3b      	ldr	r2, [pc, #236]	; (8002b08 <HAL_ADC_MspInit+0x10c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d142      	bne.n	8002aa4 <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61bb      	str	r3, [r7, #24]
 8002a22:	4b3a      	ldr	r3, [pc, #232]	; (8002b0c <HAL_ADC_MspInit+0x110>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	4a39      	ldr	r2, [pc, #228]	; (8002b0c <HAL_ADC_MspInit+0x110>)
 8002a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a2e:	4b37      	ldr	r3, [pc, #220]	; (8002b0c <HAL_ADC_MspInit+0x110>)
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a36:	61bb      	str	r3, [r7, #24]
 8002a38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]
 8002a3e:	4b33      	ldr	r3, [pc, #204]	; (8002b0c <HAL_ADC_MspInit+0x110>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	4a32      	ldr	r2, [pc, #200]	; (8002b0c <HAL_ADC_MspInit+0x110>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4a:	4b30      	ldr	r3, [pc, #192]	; (8002b0c <HAL_ADC_MspInit+0x110>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	4b2c      	ldr	r3, [pc, #176]	; (8002b0c <HAL_ADC_MspInit+0x110>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	4a2b      	ldr	r2, [pc, #172]	; (8002b0c <HAL_ADC_MspInit+0x110>)
 8002a60:	f043 0302 	orr.w	r3, r3, #2
 8002a64:	6313      	str	r3, [r2, #48]	; 0x30
 8002a66:	4b29      	ldr	r3, [pc, #164]	; (8002b0c <HAL_ADC_MspInit+0x110>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	613b      	str	r3, [r7, #16]
 8002a70:	693b      	ldr	r3, [r7, #16]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SS1_Pin|BRK1_Pin|BRK2_Pin;
 8002a72:	23e0      	movs	r3, #224	; 0xe0
 8002a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a76:	2303      	movs	r3, #3
 8002a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a7e:	f107 031c 	add.w	r3, r7, #28
 8002a82:	4619      	mov	r1, r3
 8002a84:	4822      	ldr	r0, [pc, #136]	; (8002b10 <HAL_ADC_MspInit+0x114>)
 8002a86:	f001 fe6f 	bl	8004768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a96:	f107 031c 	add.w	r3, r7, #28
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	481d      	ldr	r0, [pc, #116]	; (8002b14 <HAL_ADC_MspInit+0x118>)
 8002a9e:	f001 fe63 	bl	8004768 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002aa2:	e02c      	b.n	8002afe <HAL_ADC_MspInit+0x102>
  else if(hadc->Instance==ADC3)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a1b      	ldr	r2, [pc, #108]	; (8002b18 <HAL_ADC_MspInit+0x11c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d127      	bne.n	8002afe <HAL_ADC_MspInit+0x102>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	4b16      	ldr	r3, [pc, #88]	; (8002b0c <HAL_ADC_MspInit+0x110>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab6:	4a15      	ldr	r2, [pc, #84]	; (8002b0c <HAL_ADC_MspInit+0x110>)
 8002ab8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002abc:	6453      	str	r3, [r2, #68]	; 0x44
 8002abe:	4b13      	ldr	r3, [pc, #76]	; (8002b0c <HAL_ADC_MspInit+0x110>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	60bb      	str	r3, [r7, #8]
 8002ace:	4b0f      	ldr	r3, [pc, #60]	; (8002b0c <HAL_ADC_MspInit+0x110>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	4a0e      	ldr	r2, [pc, #56]	; (8002b0c <HAL_ADC_MspInit+0x110>)
 8002ad4:	f043 0320 	orr.w	r3, r3, #32
 8002ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ada:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <HAL_ADC_MspInit+0x110>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	f003 0320 	and.w	r3, r3, #32
 8002ae2:	60bb      	str	r3, [r7, #8]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002ae6:	2338      	movs	r3, #56	; 0x38
 8002ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002aea:	2303      	movs	r3, #3
 8002aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002af2:	f107 031c 	add.w	r3, r7, #28
 8002af6:	4619      	mov	r1, r3
 8002af8:	4808      	ldr	r0, [pc, #32]	; (8002b1c <HAL_ADC_MspInit+0x120>)
 8002afa:	f001 fe35 	bl	8004768 <HAL_GPIO_Init>
}
 8002afe:	bf00      	nop
 8002b00:	3730      	adds	r7, #48	; 0x30
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40012000 	.word	0x40012000
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40020000 	.word	0x40020000
 8002b14:	40020400 	.word	0x40020400
 8002b18:	40012200 	.word	0x40012200
 8002b1c:	40021400 	.word	0x40021400

08002b20 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08c      	sub	sp, #48	; 0x30
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b28:	f107 031c 	add.w	r3, r7, #28
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	609a      	str	r2, [r3, #8]
 8002b34:	60da      	str	r2, [r3, #12]
 8002b36:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a57      	ldr	r2, [pc, #348]	; (8002c9c <HAL_CAN_MspInit+0x17c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d14e      	bne.n	8002be0 <HAL_CAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002b42:	4b57      	ldr	r3, [pc, #348]	; (8002ca0 <HAL_CAN_MspInit+0x180>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	3301      	adds	r3, #1
 8002b48:	4a55      	ldr	r2, [pc, #340]	; (8002ca0 <HAL_CAN_MspInit+0x180>)
 8002b4a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002b4c:	4b54      	ldr	r3, [pc, #336]	; (8002ca0 <HAL_CAN_MspInit+0x180>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d10d      	bne.n	8002b70 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002b54:	2300      	movs	r3, #0
 8002b56:	61bb      	str	r3, [r7, #24]
 8002b58:	4b52      	ldr	r3, [pc, #328]	; (8002ca4 <HAL_CAN_MspInit+0x184>)
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	4a51      	ldr	r2, [pc, #324]	; (8002ca4 <HAL_CAN_MspInit+0x184>)
 8002b5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b62:	6413      	str	r3, [r2, #64]	; 0x40
 8002b64:	4b4f      	ldr	r3, [pc, #316]	; (8002ca4 <HAL_CAN_MspInit+0x184>)
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6c:	61bb      	str	r3, [r7, #24]
 8002b6e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]
 8002b74:	4b4b      	ldr	r3, [pc, #300]	; (8002ca4 <HAL_CAN_MspInit+0x184>)
 8002b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b78:	4a4a      	ldr	r2, [pc, #296]	; (8002ca4 <HAL_CAN_MspInit+0x184>)
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b80:	4b48      	ldr	r3, [pc, #288]	; (8002ca4 <HAL_CAN_MspInit+0x184>)
 8002b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	617b      	str	r3, [r7, #20]
 8002b8a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002b8c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b92:	2302      	movs	r3, #2
 8002b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002b9e:	2309      	movs	r3, #9
 8002ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba2:	f107 031c 	add.w	r3, r7, #28
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	483f      	ldr	r0, [pc, #252]	; (8002ca8 <HAL_CAN_MspInit+0x188>)
 8002baa:	f001 fddd 	bl	8004768 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 8002bae:	2200      	movs	r2, #0
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	2014      	movs	r0, #20
 8002bb4:	f001 fda1 	bl	80046fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002bb8:	2014      	movs	r0, #20
 8002bba:	f001 fdba 	bl	8004732 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	2015      	movs	r0, #21
 8002bc4:	f001 fd99 	bl	80046fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002bc8:	2015      	movs	r0, #21
 8002bca:	f001 fdb2 	bl	8004732 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 1, 0);
 8002bce:	2200      	movs	r2, #0
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	2016      	movs	r0, #22
 8002bd4:	f001 fd91 	bl	80046fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8002bd8:	2016      	movs	r0, #22
 8002bda:	f001 fdaa 	bl	8004732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8002bde:	e058      	b.n	8002c92 <HAL_CAN_MspInit+0x172>
  else if(hcan->Instance==CAN2)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a31      	ldr	r2, [pc, #196]	; (8002cac <HAL_CAN_MspInit+0x18c>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d153      	bne.n	8002c92 <HAL_CAN_MspInit+0x172>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	613b      	str	r3, [r7, #16]
 8002bee:	4b2d      	ldr	r3, [pc, #180]	; (8002ca4 <HAL_CAN_MspInit+0x184>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	4a2c      	ldr	r2, [pc, #176]	; (8002ca4 <HAL_CAN_MspInit+0x184>)
 8002bf4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bfa:	4b2a      	ldr	r3, [pc, #168]	; (8002ca4 <HAL_CAN_MspInit+0x184>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c02:	613b      	str	r3, [r7, #16]
 8002c04:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002c06:	4b26      	ldr	r3, [pc, #152]	; (8002ca0 <HAL_CAN_MspInit+0x180>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	4a24      	ldr	r2, [pc, #144]	; (8002ca0 <HAL_CAN_MspInit+0x180>)
 8002c0e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002c10:	4b23      	ldr	r3, [pc, #140]	; (8002ca0 <HAL_CAN_MspInit+0x180>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d10d      	bne.n	8002c34 <HAL_CAN_MspInit+0x114>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	4b21      	ldr	r3, [pc, #132]	; (8002ca4 <HAL_CAN_MspInit+0x184>)
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	4a20      	ldr	r2, [pc, #128]	; (8002ca4 <HAL_CAN_MspInit+0x184>)
 8002c22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c26:	6413      	str	r3, [r2, #64]	; 0x40
 8002c28:	4b1e      	ldr	r3, [pc, #120]	; (8002ca4 <HAL_CAN_MspInit+0x184>)
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c34:	2300      	movs	r3, #0
 8002c36:	60bb      	str	r3, [r7, #8]
 8002c38:	4b1a      	ldr	r3, [pc, #104]	; (8002ca4 <HAL_CAN_MspInit+0x184>)
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	4a19      	ldr	r2, [pc, #100]	; (8002ca4 <HAL_CAN_MspInit+0x184>)
 8002c3e:	f043 0302 	orr.w	r3, r3, #2
 8002c42:	6313      	str	r3, [r2, #48]	; 0x30
 8002c44:	4b17      	ldr	r3, [pc, #92]	; (8002ca4 <HAL_CAN_MspInit+0x184>)
 8002c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	60bb      	str	r3, [r7, #8]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002c50:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c56:	2302      	movs	r3, #2
 8002c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002c62:	2309      	movs	r3, #9
 8002c64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c66:	f107 031c 	add.w	r3, r7, #28
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4810      	ldr	r0, [pc, #64]	; (8002cb0 <HAL_CAN_MspInit+0x190>)
 8002c6e:	f001 fd7b 	bl	8004768 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8002c72:	2200      	movs	r2, #0
 8002c74:	2100      	movs	r1, #0
 8002c76:	2040      	movs	r0, #64	; 0x40
 8002c78:	f001 fd3f 	bl	80046fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002c7c:	2040      	movs	r0, #64	; 0x40
 8002c7e:	f001 fd58 	bl	8004732 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8002c82:	2200      	movs	r2, #0
 8002c84:	2100      	movs	r1, #0
 8002c86:	2041      	movs	r0, #65	; 0x41
 8002c88:	f001 fd37 	bl	80046fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8002c8c:	2041      	movs	r0, #65	; 0x41
 8002c8e:	f001 fd50 	bl	8004732 <HAL_NVIC_EnableIRQ>
}
 8002c92:	bf00      	nop
 8002c94:	3730      	adds	r7, #48	; 0x30
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40006400 	.word	0x40006400
 8002ca0:	200003a4 	.word	0x200003a4
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	40020000 	.word	0x40020000
 8002cac:	40006800 	.word	0x40006800
 8002cb0:	40020400 	.word	0x40020400

08002cb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a2a      	ldr	r2, [pc, #168]	; (8002d6c <HAL_TIM_Base_MspInit+0xb8>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d116      	bne.n	8002cf4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	617b      	str	r3, [r7, #20]
 8002cca:	4b29      	ldr	r3, [pc, #164]	; (8002d70 <HAL_TIM_Base_MspInit+0xbc>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	4a28      	ldr	r2, [pc, #160]	; (8002d70 <HAL_TIM_Base_MspInit+0xbc>)
 8002cd0:	f043 0308 	orr.w	r3, r3, #8
 8002cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd6:	4b26      	ldr	r3, [pc, #152]	; (8002d70 <HAL_TIM_Base_MspInit+0xbc>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	697b      	ldr	r3, [r7, #20]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	2032      	movs	r0, #50	; 0x32
 8002ce8:	f001 fd07 	bl	80046fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002cec:	2032      	movs	r0, #50	; 0x32
 8002cee:	f001 fd20 	bl	8004732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002cf2:	e036      	b.n	8002d62 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM6)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a1e      	ldr	r2, [pc, #120]	; (8002d74 <HAL_TIM_Base_MspInit+0xc0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d116      	bne.n	8002d2c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	613b      	str	r3, [r7, #16]
 8002d02:	4b1b      	ldr	r3, [pc, #108]	; (8002d70 <HAL_TIM_Base_MspInit+0xbc>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	4a1a      	ldr	r2, [pc, #104]	; (8002d70 <HAL_TIM_Base_MspInit+0xbc>)
 8002d08:	f043 0310 	orr.w	r3, r3, #16
 8002d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d0e:	4b18      	ldr	r3, [pc, #96]	; (8002d70 <HAL_TIM_Base_MspInit+0xbc>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	f003 0310 	and.w	r3, r3, #16
 8002d16:	613b      	str	r3, [r7, #16]
 8002d18:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	2036      	movs	r0, #54	; 0x36
 8002d20:	f001 fceb 	bl	80046fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d24:	2036      	movs	r0, #54	; 0x36
 8002d26:	f001 fd04 	bl	8004732 <HAL_NVIC_EnableIRQ>
}
 8002d2a:	e01a      	b.n	8002d62 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM7)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a11      	ldr	r2, [pc, #68]	; (8002d78 <HAL_TIM_Base_MspInit+0xc4>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d115      	bne.n	8002d62 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	4b0d      	ldr	r3, [pc, #52]	; (8002d70 <HAL_TIM_Base_MspInit+0xbc>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	4a0c      	ldr	r2, [pc, #48]	; (8002d70 <HAL_TIM_Base_MspInit+0xbc>)
 8002d40:	f043 0320 	orr.w	r3, r3, #32
 8002d44:	6413      	str	r3, [r2, #64]	; 0x40
 8002d46:	4b0a      	ldr	r3, [pc, #40]	; (8002d70 <HAL_TIM_Base_MspInit+0xbc>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f003 0320 	and.w	r3, r3, #32
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002d52:	2200      	movs	r2, #0
 8002d54:	2100      	movs	r1, #0
 8002d56:	2037      	movs	r0, #55	; 0x37
 8002d58:	f001 fccf 	bl	80046fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002d5c:	2037      	movs	r0, #55	; 0x37
 8002d5e:	f001 fce8 	bl	8004732 <HAL_NVIC_EnableIRQ>
}
 8002d62:	bf00      	nop
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40000c00 	.word	0x40000c00
 8002d70:	40023800 	.word	0x40023800
 8002d74:	40001000 	.word	0x40001000
 8002d78:	40001400 	.word	0x40001400

08002d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d80:	e7fe      	b.n	8002d80 <NMI_Handler+0x4>

08002d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d82:	b480      	push	{r7}
 8002d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d86:	e7fe      	b.n	8002d86 <HardFault_Handler+0x4>

08002d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d8c:	e7fe      	b.n	8002d8c <MemManage_Handler+0x4>

08002d8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d92:	e7fe      	b.n	8002d92 <BusFault_Handler+0x4>

08002d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d98:	e7fe      	b.n	8002d98 <UsageFault_Handler+0x4>

08002d9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d9e:	bf00      	nop
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dac:	bf00      	nop
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002db6:	b480      	push	{r7}
 8002db8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dc8:	f000 f8f4 	bl	8002fb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dcc:	bf00      	nop
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INV_RST_EXTI3_Pin);
 8002dd4:	2008      	movs	r0, #8
 8002dd6:	f001 febf 	bl	8004b58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002dda:	bf00      	nop
 8002ddc:	bd80      	pop	{r7, pc}
	...

08002de0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002de4:	4802      	ldr	r0, [pc, #8]	; (8002df0 <CAN1_RX0_IRQHandler+0x10>)
 8002de6:	f001 f97d 	bl	80040e4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002dea:	bf00      	nop
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	200000c8 	.word	0x200000c8

08002df4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002df8:	4802      	ldr	r0, [pc, #8]	; (8002e04 <CAN1_RX1_IRQHandler+0x10>)
 8002dfa:	f001 f973 	bl	80040e4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	200000c8 	.word	0x200000c8

08002e08 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002e0c:	4802      	ldr	r0, [pc, #8]	; (8002e18 <CAN1_SCE_IRQHandler+0x10>)
 8002e0e:	f001 f969 	bl	80040e4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	200000c8 	.word	0x200000c8

08002e1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TV_EXTI_Pin);
 8002e20:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002e24:	f001 fe98 	bl	8004b58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(TV_BUTTON_EXTI13_Pin);
 8002e28:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002e2c:	f001 fe94 	bl	8004b58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e30:	bf00      	nop
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002e38:	4802      	ldr	r0, [pc, #8]	; (8002e44 <TIM5_IRQHandler+0x10>)
 8002e3a:	f002 fbb8 	bl	80055ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002e3e:	bf00      	nop
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20000118 	.word	0x20000118

08002e48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002e4c:	4802      	ldr	r0, [pc, #8]	; (8002e58 <TIM6_DAC_IRQHandler+0x10>)
 8002e4e:	f002 fbae 	bl	80055ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002e52:	bf00      	nop
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20000160 	.word	0x20000160

08002e5c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002e60:	4802      	ldr	r0, [pc, #8]	; (8002e6c <TIM7_IRQHandler+0x10>)
 8002e62:	f002 fba4 	bl	80055ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	200001a8 	.word	0x200001a8

08002e70 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002e74:	4802      	ldr	r0, [pc, #8]	; (8002e80 <CAN2_RX0_IRQHandler+0x10>)
 8002e76:	f001 f935 	bl	80040e4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	200000f0 	.word	0x200000f0

08002e84 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002e88:	4802      	ldr	r0, [pc, #8]	; (8002e94 <CAN2_RX1_IRQHandler+0x10>)
 8002e8a:	f001 f92b 	bl	80040e4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8002e8e:	bf00      	nop
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	200000f0 	.word	0x200000f0

08002e98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e9c:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <SystemInit+0x20>)
 8002e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea2:	4a05      	ldr	r2, [pc, #20]	; (8002eb8 <SystemInit+0x20>)
 8002ea4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ea8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002eac:	bf00      	nop
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	e000ed00 	.word	0xe000ed00

08002ebc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002ebc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ef4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ec0:	480d      	ldr	r0, [pc, #52]	; (8002ef8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ec2:	490e      	ldr	r1, [pc, #56]	; (8002efc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ec4:	4a0e      	ldr	r2, [pc, #56]	; (8002f00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ec6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ec8:	e002      	b.n	8002ed0 <LoopCopyDataInit>

08002eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ece:	3304      	adds	r3, #4

08002ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ed4:	d3f9      	bcc.n	8002eca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ed6:	4a0b      	ldr	r2, [pc, #44]	; (8002f04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ed8:	4c0b      	ldr	r4, [pc, #44]	; (8002f08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002edc:	e001      	b.n	8002ee2 <LoopFillZerobss>

08002ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ee0:	3204      	adds	r2, #4

08002ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ee4:	d3fb      	bcc.n	8002ede <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ee6:	f7ff ffd7 	bl	8002e98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eea:	f002 ff1b 	bl	8005d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eee:	f7fd ffef 	bl	8000ed0 <main>
  bx  lr    
 8002ef2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002ef4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002efc:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8002f00:	08005da4 	.word	0x08005da4
  ldr r2, =_sbss
 8002f04:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8002f08:	200003ac 	.word	0x200003ac

08002f0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f0c:	e7fe      	b.n	8002f0c <ADC_IRQHandler>
	...

08002f10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f14:	4b0e      	ldr	r3, [pc, #56]	; (8002f50 <HAL_Init+0x40>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a0d      	ldr	r2, [pc, #52]	; (8002f50 <HAL_Init+0x40>)
 8002f1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f20:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <HAL_Init+0x40>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a0a      	ldr	r2, [pc, #40]	; (8002f50 <HAL_Init+0x40>)
 8002f26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f2c:	4b08      	ldr	r3, [pc, #32]	; (8002f50 <HAL_Init+0x40>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a07      	ldr	r2, [pc, #28]	; (8002f50 <HAL_Init+0x40>)
 8002f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f38:	2003      	movs	r0, #3
 8002f3a:	f001 fbd3 	bl	80046e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f3e:	200f      	movs	r0, #15
 8002f40:	f000 f808 	bl	8002f54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f44:	f7ff fd32 	bl	80029ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40023c00 	.word	0x40023c00

08002f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f5c:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <HAL_InitTick+0x54>)
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	4b12      	ldr	r3, [pc, #72]	; (8002fac <HAL_InitTick+0x58>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	4619      	mov	r1, r3
 8002f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f72:	4618      	mov	r0, r3
 8002f74:	f001 fbeb 	bl	800474e <HAL_SYSTICK_Config>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e00e      	b.n	8002fa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b0f      	cmp	r3, #15
 8002f86:	d80a      	bhi.n	8002f9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f88:	2200      	movs	r2, #0
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f90:	f001 fbb3 	bl	80046fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f94:	4a06      	ldr	r2, [pc, #24]	; (8002fb0 <HAL_InitTick+0x5c>)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	e000      	b.n	8002fa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	20000010 	.word	0x20000010
 8002fac:	20000018 	.word	0x20000018
 8002fb0:	20000014 	.word	0x20000014

08002fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fb8:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <HAL_IncTick+0x20>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <HAL_IncTick+0x24>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	4a04      	ldr	r2, [pc, #16]	; (8002fd8 <HAL_IncTick+0x24>)
 8002fc6:	6013      	str	r3, [r2, #0]
}
 8002fc8:	bf00      	nop
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	20000018 	.word	0x20000018
 8002fd8:	200003a8 	.word	0x200003a8

08002fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  return uwTick;
 8002fe0:	4b03      	ldr	r3, [pc, #12]	; (8002ff0 <HAL_GetTick+0x14>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	200003a8 	.word	0x200003a8

08002ff4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e033      	b.n	8003072 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	2b00      	cmp	r3, #0
 8003010:	d109      	bne.n	8003026 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7ff fcf2 	bl	80029fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	f003 0310 	and.w	r3, r3, #16
 800302e:	2b00      	cmp	r3, #0
 8003030:	d118      	bne.n	8003064 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800303a:	f023 0302 	bic.w	r3, r3, #2
 800303e:	f043 0202 	orr.w	r2, r3, #2
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 fae8 	bl	800361c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	f023 0303 	bic.w	r3, r3, #3
 800305a:	f043 0201 	orr.w	r2, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	641a      	str	r2, [r3, #64]	; 0x40
 8003062:	e001      	b.n	8003068 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003070:	7bfb      	ldrb	r3, [r7, #15]
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
	...

0800307c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <HAL_ADC_Start+0x1a>
 8003092:	2302      	movs	r3, #2
 8003094:	e0b2      	b.n	80031fc <HAL_ADC_Start+0x180>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d018      	beq.n	80030de <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0201 	orr.w	r2, r2, #1
 80030ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80030bc:	4b52      	ldr	r3, [pc, #328]	; (8003208 <HAL_ADC_Start+0x18c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a52      	ldr	r2, [pc, #328]	; (800320c <HAL_ADC_Start+0x190>)
 80030c2:	fba2 2303 	umull	r2, r3, r2, r3
 80030c6:	0c9a      	lsrs	r2, r3, #18
 80030c8:	4613      	mov	r3, r2
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	4413      	add	r3, r2
 80030ce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80030d0:	e002      	b.n	80030d8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	3b01      	subs	r3, #1
 80030d6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1f9      	bne.n	80030d2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d17a      	bne.n	80031e2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80030f4:	f023 0301 	bic.w	r3, r3, #1
 80030f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800310a:	2b00      	cmp	r3, #0
 800310c:	d007      	beq.n	800311e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003116:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800312a:	d106      	bne.n	800313a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003130:	f023 0206 	bic.w	r2, r3, #6
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	645a      	str	r2, [r3, #68]	; 0x44
 8003138:	e002      	b.n	8003140 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003148:	4b31      	ldr	r3, [pc, #196]	; (8003210 <HAL_ADC_Start+0x194>)
 800314a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003154:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f003 031f 	and.w	r3, r3, #31
 800315e:	2b00      	cmp	r3, #0
 8003160:	d12a      	bne.n	80031b8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a2b      	ldr	r2, [pc, #172]	; (8003214 <HAL_ADC_Start+0x198>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d015      	beq.n	8003198 <HAL_ADC_Start+0x11c>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a29      	ldr	r2, [pc, #164]	; (8003218 <HAL_ADC_Start+0x19c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d105      	bne.n	8003182 <HAL_ADC_Start+0x106>
 8003176:	4b26      	ldr	r3, [pc, #152]	; (8003210 <HAL_ADC_Start+0x194>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f003 031f 	and.w	r3, r3, #31
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00a      	beq.n	8003198 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a25      	ldr	r2, [pc, #148]	; (800321c <HAL_ADC_Start+0x1a0>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d136      	bne.n	80031fa <HAL_ADC_Start+0x17e>
 800318c:	4b20      	ldr	r3, [pc, #128]	; (8003210 <HAL_ADC_Start+0x194>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 0310 	and.w	r3, r3, #16
 8003194:	2b00      	cmp	r3, #0
 8003196:	d130      	bne.n	80031fa <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d129      	bne.n	80031fa <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031b4:	609a      	str	r2, [r3, #8]
 80031b6:	e020      	b.n	80031fa <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a15      	ldr	r2, [pc, #84]	; (8003214 <HAL_ADC_Start+0x198>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d11b      	bne.n	80031fa <HAL_ADC_Start+0x17e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d114      	bne.n	80031fa <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031de:	609a      	str	r2, [r3, #8]
 80031e0:	e00b      	b.n	80031fa <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	f043 0210 	orr.w	r2, r3, #16
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f2:	f043 0201 	orr.w	r2, r3, #1
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	20000010 	.word	0x20000010
 800320c:	431bde83 	.word	0x431bde83
 8003210:	40012300 	.word	0x40012300
 8003214:	40012000 	.word	0x40012000
 8003218:	40012100 	.word	0x40012100
 800321c:	40012200 	.word	0x40012200

08003220 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_ADC_Stop+0x16>
 8003232:	2302      	movs	r3, #2
 8003234:	e021      	b.n	800327a <HAL_ADC_Stop+0x5a>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0201 	bic.w	r2, r2, #1
 800324c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d109      	bne.n	8003270 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003264:	f023 0301 	bic.w	r3, r3, #1
 8003268:	f043 0201 	orr.w	r2, r3, #1
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b084      	sub	sp, #16
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
 800328e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800329e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a2:	d113      	bne.n	80032cc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80032ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032b2:	d10b      	bne.n	80032cc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	f043 0220 	orr.w	r2, r3, #32
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e063      	b.n	8003394 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80032cc:	f7ff fe86 	bl	8002fdc <HAL_GetTick>
 80032d0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80032d2:	e021      	b.n	8003318 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032da:	d01d      	beq.n	8003318 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d007      	beq.n	80032f2 <HAL_ADC_PollForConversion+0x6c>
 80032e2:	f7ff fe7b 	bl	8002fdc <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d212      	bcs.n	8003318 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d00b      	beq.n	8003318 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	f043 0204 	orr.w	r2, r3, #4
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e03d      	b.n	8003394 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b02      	cmp	r3, #2
 8003324:	d1d6      	bne.n	80032d4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f06f 0212 	mvn.w	r2, #18
 800332e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003334:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d123      	bne.n	8003392 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800334e:	2b00      	cmp	r3, #0
 8003350:	d11f      	bne.n	8003392 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003358:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800335c:	2b00      	cmp	r3, #0
 800335e:	d006      	beq.n	800336e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800336a:	2b00      	cmp	r3, #0
 800336c:	d111      	bne.n	8003392 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d105      	bne.n	8003392 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	f043 0201 	orr.w	r2, r3, #1
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
	...

080033b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x1c>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e113      	b.n	80035fc <HAL_ADC_ConfigChannel+0x244>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2b09      	cmp	r3, #9
 80033e2:	d925      	bls.n	8003430 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68d9      	ldr	r1, [r3, #12]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	461a      	mov	r2, r3
 80033f2:	4613      	mov	r3, r2
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	4413      	add	r3, r2
 80033f8:	3b1e      	subs	r3, #30
 80033fa:	2207      	movs	r2, #7
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	43da      	mvns	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	400a      	ands	r2, r1
 8003408:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68d9      	ldr	r1, [r3, #12]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	b29b      	uxth	r3, r3
 800341a:	4618      	mov	r0, r3
 800341c:	4603      	mov	r3, r0
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	4403      	add	r3, r0
 8003422:	3b1e      	subs	r3, #30
 8003424:	409a      	lsls	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	430a      	orrs	r2, r1
 800342c:	60da      	str	r2, [r3, #12]
 800342e:	e022      	b.n	8003476 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6919      	ldr	r1, [r3, #16]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	b29b      	uxth	r3, r3
 800343c:	461a      	mov	r2, r3
 800343e:	4613      	mov	r3, r2
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	4413      	add	r3, r2
 8003444:	2207      	movs	r2, #7
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	43da      	mvns	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	400a      	ands	r2, r1
 8003452:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6919      	ldr	r1, [r3, #16]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	b29b      	uxth	r3, r3
 8003464:	4618      	mov	r0, r3
 8003466:	4603      	mov	r3, r0
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	4403      	add	r3, r0
 800346c:	409a      	lsls	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2b06      	cmp	r3, #6
 800347c:	d824      	bhi.n	80034c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	3b05      	subs	r3, #5
 8003490:	221f      	movs	r2, #31
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	43da      	mvns	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	400a      	ands	r2, r1
 800349e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	4618      	mov	r0, r3
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	3b05      	subs	r3, #5
 80034ba:	fa00 f203 	lsl.w	r2, r0, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	635a      	str	r2, [r3, #52]	; 0x34
 80034c6:	e04c      	b.n	8003562 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b0c      	cmp	r3, #12
 80034ce:	d824      	bhi.n	800351a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	4613      	mov	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	3b23      	subs	r3, #35	; 0x23
 80034e2:	221f      	movs	r2, #31
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	43da      	mvns	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	400a      	ands	r2, r1
 80034f0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	4618      	mov	r0, r3
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	3b23      	subs	r3, #35	; 0x23
 800350c:	fa00 f203 	lsl.w	r2, r0, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	631a      	str	r2, [r3, #48]	; 0x30
 8003518:	e023      	b.n	8003562 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	3b41      	subs	r3, #65	; 0x41
 800352c:	221f      	movs	r2, #31
 800352e:	fa02 f303 	lsl.w	r3, r2, r3
 8003532:	43da      	mvns	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	400a      	ands	r2, r1
 800353a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	b29b      	uxth	r3, r3
 8003548:	4618      	mov	r0, r3
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	4613      	mov	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	3b41      	subs	r3, #65	; 0x41
 8003556:	fa00 f203 	lsl.w	r2, r0, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003562:	4b29      	ldr	r3, [pc, #164]	; (8003608 <HAL_ADC_ConfigChannel+0x250>)
 8003564:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a28      	ldr	r2, [pc, #160]	; (800360c <HAL_ADC_ConfigChannel+0x254>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d10f      	bne.n	8003590 <HAL_ADC_ConfigChannel+0x1d8>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b12      	cmp	r3, #18
 8003576:	d10b      	bne.n	8003590 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a1d      	ldr	r2, [pc, #116]	; (800360c <HAL_ADC_ConfigChannel+0x254>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d12b      	bne.n	80035f2 <HAL_ADC_ConfigChannel+0x23a>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1c      	ldr	r2, [pc, #112]	; (8003610 <HAL_ADC_ConfigChannel+0x258>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d003      	beq.n	80035ac <HAL_ADC_ConfigChannel+0x1f4>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b11      	cmp	r3, #17
 80035aa:	d122      	bne.n	80035f2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a11      	ldr	r2, [pc, #68]	; (8003610 <HAL_ADC_ConfigChannel+0x258>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d111      	bne.n	80035f2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035ce:	4b11      	ldr	r3, [pc, #68]	; (8003614 <HAL_ADC_ConfigChannel+0x25c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a11      	ldr	r2, [pc, #68]	; (8003618 <HAL_ADC_ConfigChannel+0x260>)
 80035d4:	fba2 2303 	umull	r2, r3, r2, r3
 80035d8:	0c9a      	lsrs	r2, r3, #18
 80035da:	4613      	mov	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035e4:	e002      	b.n	80035ec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	3b01      	subs	r3, #1
 80035ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1f9      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	40012300 	.word	0x40012300
 800360c:	40012000 	.word	0x40012000
 8003610:	10000012 	.word	0x10000012
 8003614:	20000010 	.word	0x20000010
 8003618:	431bde83 	.word	0x431bde83

0800361c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003624:	4b79      	ldr	r3, [pc, #484]	; (800380c <ADC_Init+0x1f0>)
 8003626:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	431a      	orrs	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003650:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6859      	ldr	r1, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	021a      	lsls	r2, r3, #8
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003674:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6859      	ldr	r1, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689a      	ldr	r2, [r3, #8]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003696:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6899      	ldr	r1, [r3, #8]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ae:	4a58      	ldr	r2, [pc, #352]	; (8003810 <ADC_Init+0x1f4>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d022      	beq.n	80036fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6899      	ldr	r1, [r3, #8]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6899      	ldr	r1, [r3, #8]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	609a      	str	r2, [r3, #8]
 80036f8:	e00f      	b.n	800371a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003708:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003718:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0202 	bic.w	r2, r2, #2
 8003728:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6899      	ldr	r1, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	7e1b      	ldrb	r3, [r3, #24]
 8003734:	005a      	lsls	r2, r3, #1
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d01b      	beq.n	8003780 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003756:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003766:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6859      	ldr	r1, [r3, #4]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	3b01      	subs	r3, #1
 8003774:	035a      	lsls	r2, r3, #13
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	605a      	str	r2, [r3, #4]
 800377e:	e007      	b.n	8003790 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800378e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800379e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	051a      	lsls	r2, r3, #20
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6899      	ldr	r1, [r3, #8]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037d2:	025a      	lsls	r2, r3, #9
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6899      	ldr	r1, [r3, #8]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	029a      	lsls	r2, r3, #10
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	609a      	str	r2, [r3, #8]
}
 8003800:	bf00      	nop
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	40012300 	.word	0x40012300
 8003810:	0f000001 	.word	0x0f000001

08003814 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e0ed      	b.n	8003a02 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 3020 	ldrb.w	r3, [r3, #32]
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d102      	bne.n	8003838 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7ff f974 	bl	8002b20 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0201 	orr.w	r2, r2, #1
 8003846:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003848:	f7ff fbc8 	bl	8002fdc <HAL_GetTick>
 800384c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800384e:	e012      	b.n	8003876 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003850:	f7ff fbc4 	bl	8002fdc <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b0a      	cmp	r3, #10
 800385c:	d90b      	bls.n	8003876 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2205      	movs	r2, #5
 800386e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e0c5      	b.n	8003a02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0e5      	beq.n	8003850 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0202 	bic.w	r2, r2, #2
 8003892:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003894:	f7ff fba2 	bl	8002fdc <HAL_GetTick>
 8003898:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800389a:	e012      	b.n	80038c2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800389c:	f7ff fb9e 	bl	8002fdc <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b0a      	cmp	r3, #10
 80038a8:	d90b      	bls.n	80038c2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2205      	movs	r2, #5
 80038ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e09f      	b.n	8003a02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1e5      	bne.n	800389c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	7e1b      	ldrb	r3, [r3, #24]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d108      	bne.n	80038ea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	e007      	b.n	80038fa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	7e5b      	ldrb	r3, [r3, #25]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d108      	bne.n	8003914 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	e007      	b.n	8003924 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003922:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	7e9b      	ldrb	r3, [r3, #26]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d108      	bne.n	800393e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0220 	orr.w	r2, r2, #32
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	e007      	b.n	800394e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 0220 	bic.w	r2, r2, #32
 800394c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	7edb      	ldrb	r3, [r3, #27]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d108      	bne.n	8003968 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0210 	bic.w	r2, r2, #16
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	e007      	b.n	8003978 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0210 	orr.w	r2, r2, #16
 8003976:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	7f1b      	ldrb	r3, [r3, #28]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d108      	bne.n	8003992 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 0208 	orr.w	r2, r2, #8
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	e007      	b.n	80039a2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0208 	bic.w	r2, r2, #8
 80039a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	7f5b      	ldrb	r3, [r3, #29]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d108      	bne.n	80039bc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f042 0204 	orr.w	r2, r2, #4
 80039b8:	601a      	str	r2, [r3, #0]
 80039ba:	e007      	b.n	80039cc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0204 	bic.w	r2, r2, #4
 80039ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	431a      	orrs	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	ea42 0103 	orr.w	r1, r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	1e5a      	subs	r2, r3, #1
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a22:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003a24:	7cfb      	ldrb	r3, [r7, #19]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d003      	beq.n	8003a32 <HAL_CAN_ConfigFilter+0x26>
 8003a2a:	7cfb      	ldrb	r3, [r7, #19]
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	f040 80be 	bne.w	8003bae <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003a32:	4b65      	ldr	r3, [pc, #404]	; (8003bc8 <HAL_CAN_ConfigFilter+0x1bc>)
 8003a34:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003a3c:	f043 0201 	orr.w	r2, r3, #1
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003a4c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	021b      	lsls	r3, r3, #8
 8003a62:	431a      	orrs	r2, r3
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	f003 031f 	and.w	r3, r3, #31
 8003a72:	2201      	movs	r2, #1
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	43db      	mvns	r3, r3
 8003a84:	401a      	ands	r2, r3
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d123      	bne.n	8003adc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	401a      	ands	r2, r3
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003ab6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	3248      	adds	r2, #72	; 0x48
 8003abc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003ad0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003ad2:	6979      	ldr	r1, [r7, #20]
 8003ad4:	3348      	adds	r3, #72	; 0x48
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	440b      	add	r3, r1
 8003ada:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d122      	bne.n	8003b2a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	431a      	orrs	r2, r3
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003b04:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	3248      	adds	r2, #72	; 0x48
 8003b0a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003b1e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003b20:	6979      	ldr	r1, [r7, #20]
 8003b22:	3348      	adds	r3, #72	; 0x48
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	440b      	add	r3, r1
 8003b28:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d109      	bne.n	8003b46 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	401a      	ands	r2, r3
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003b44:	e007      	b.n	8003b56 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d109      	bne.n	8003b72 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	43db      	mvns	r3, r3
 8003b68:	401a      	ands	r2, r3
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003b70:	e007      	b.n	8003b82 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d107      	bne.n	8003b9a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	431a      	orrs	r2, r3
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003ba0:	f023 0201 	bic.w	r2, r3, #1
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003baa:	2300      	movs	r3, #0
 8003bac:	e006      	b.n	8003bbc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
  }
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	371c      	adds	r7, #28
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	40006400 	.word	0x40006400

08003bcc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d12e      	bne.n	8003c3e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2202      	movs	r2, #2
 8003be4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0201 	bic.w	r2, r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003bf8:	f7ff f9f0 	bl	8002fdc <HAL_GetTick>
 8003bfc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003bfe:	e012      	b.n	8003c26 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c00:	f7ff f9ec 	bl	8002fdc <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b0a      	cmp	r3, #10
 8003c0c:	d90b      	bls.n	8003c26 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c12:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2205      	movs	r2, #5
 8003c1e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e012      	b.n	8003c4c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1e5      	bne.n	8003c00 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	e006      	b.n	8003c4c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
  }
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b089      	sub	sp, #36	; 0x24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
 8003c60:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c68:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c72:	7ffb      	ldrb	r3, [r7, #31]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d003      	beq.n	8003c80 <HAL_CAN_AddTxMessage+0x2c>
 8003c78:	7ffb      	ldrb	r3, [r7, #31]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	f040 80b8 	bne.w	8003df0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10a      	bne.n	8003ca0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d105      	bne.n	8003ca0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 80a0 	beq.w	8003de0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	0e1b      	lsrs	r3, r3, #24
 8003ca4:	f003 0303 	and.w	r3, r3, #3
 8003ca8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d907      	bls.n	8003cc0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e09e      	b.n	8003dfe <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	409a      	lsls	r2, r3
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10d      	bne.n	8003cee <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003cdc:	68f9      	ldr	r1, [r7, #12]
 8003cde:	6809      	ldr	r1, [r1, #0]
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	3318      	adds	r3, #24
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	440b      	add	r3, r1
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	e00f      	b.n	8003d0e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003cf8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003cfe:	68f9      	ldr	r1, [r7, #12]
 8003d00:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003d02:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	3318      	adds	r3, #24
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	440b      	add	r3, r1
 8003d0c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6819      	ldr	r1, [r3, #0]
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	691a      	ldr	r2, [r3, #16]
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	3318      	adds	r3, #24
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	440b      	add	r3, r1
 8003d1e:	3304      	adds	r3, #4
 8003d20:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	7d1b      	ldrb	r3, [r3, #20]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d111      	bne.n	8003d4e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	3318      	adds	r3, #24
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	4413      	add	r3, r2
 8003d36:	3304      	adds	r3, #4
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	6811      	ldr	r1, [r2, #0]
 8003d3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	3318      	adds	r3, #24
 8003d46:	011b      	lsls	r3, r3, #4
 8003d48:	440b      	add	r3, r1
 8003d4a:	3304      	adds	r3, #4
 8003d4c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3307      	adds	r3, #7
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	061a      	lsls	r2, r3, #24
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	3306      	adds	r3, #6
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	041b      	lsls	r3, r3, #16
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3305      	adds	r3, #5
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	021b      	lsls	r3, r3, #8
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	3204      	adds	r2, #4
 8003d6e:	7812      	ldrb	r2, [r2, #0]
 8003d70:	4610      	mov	r0, r2
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	6811      	ldr	r1, [r2, #0]
 8003d76:	ea43 0200 	orr.w	r2, r3, r0
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	440b      	add	r3, r1
 8003d80:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003d84:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	3303      	adds	r3, #3
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	061a      	lsls	r2, r3, #24
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	3302      	adds	r3, #2
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	041b      	lsls	r3, r3, #16
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	021b      	lsls	r3, r3, #8
 8003da0:	4313      	orrs	r3, r2
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	7812      	ldrb	r2, [r2, #0]
 8003da6:	4610      	mov	r0, r2
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	6811      	ldr	r1, [r2, #0]
 8003dac:	ea43 0200 	orr.w	r2, r3, r0
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	011b      	lsls	r3, r3, #4
 8003db4:	440b      	add	r3, r1
 8003db6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003dba:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	3318      	adds	r3, #24
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	4413      	add	r3, r2
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	6811      	ldr	r1, [r2, #0]
 8003dce:	f043 0201 	orr.w	r2, r3, #1
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	3318      	adds	r3, #24
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	440b      	add	r3, r1
 8003dda:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	e00e      	b.n	8003dfe <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e006      	b.n	8003dfe <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
  }
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3724      	adds	r7, #36	; 0x24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b085      	sub	sp, #20
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e1c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003e1e:	7afb      	ldrb	r3, [r7, #11]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d002      	beq.n	8003e2a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003e24:	7afb      	ldrb	r3, [r7, #11]
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d11d      	bne.n	8003e66 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d002      	beq.n	8003e3e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d002      	beq.n	8003e66 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	3301      	adds	r3, #1
 8003e64:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003e66:	68fb      	ldr	r3, [r7, #12]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003e74:	b480      	push	{r7}
 8003e76:	b087      	sub	sp, #28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
 8003e80:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e88:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003e8a:	7dfb      	ldrb	r3, [r7, #23]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d003      	beq.n	8003e98 <HAL_CAN_GetRxMessage+0x24>
 8003e90:	7dfb      	ldrb	r3, [r7, #23]
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	f040 80f3 	bne.w	800407e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10e      	bne.n	8003ebc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	f003 0303 	and.w	r3, r3, #3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d116      	bne.n	8003eda <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e0e7      	b.n	800408c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f003 0303 	and.w	r3, r3, #3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d107      	bne.n	8003eda <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e0d8      	b.n	800408c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	331b      	adds	r3, #27
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	4413      	add	r3, r2
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0204 	and.w	r2, r3, #4
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10c      	bne.n	8003f12 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	331b      	adds	r3, #27
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	4413      	add	r3, r2
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	0d5b      	lsrs	r3, r3, #21
 8003f08:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	e00b      	b.n	8003f2a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	331b      	adds	r3, #27
 8003f1a:	011b      	lsls	r3, r3, #4
 8003f1c:	4413      	add	r3, r2
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	08db      	lsrs	r3, r3, #3
 8003f22:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	331b      	adds	r3, #27
 8003f32:	011b      	lsls	r3, r3, #4
 8003f34:	4413      	add	r3, r2
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0202 	and.w	r2, r3, #2
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	331b      	adds	r3, #27
 8003f48:	011b      	lsls	r3, r3, #4
 8003f4a:	4413      	add	r3, r2
 8003f4c:	3304      	adds	r3, #4
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 020f 	and.w	r2, r3, #15
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	331b      	adds	r3, #27
 8003f60:	011b      	lsls	r3, r3, #4
 8003f62:	4413      	add	r3, r2
 8003f64:	3304      	adds	r3, #4
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	0a1b      	lsrs	r3, r3, #8
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	331b      	adds	r3, #27
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	4413      	add	r3, r2
 8003f7c:	3304      	adds	r3, #4
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	0c1b      	lsrs	r3, r3, #16
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	4413      	add	r3, r2
 8003f92:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	0a1a      	lsrs	r2, r3, #8
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	b2d2      	uxtb	r2, r2
 8003fb6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	011b      	lsls	r3, r3, #4
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	0c1a      	lsrs	r2, r3, #16
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	3302      	adds	r3, #2
 8003fce:	b2d2      	uxtb	r2, r2
 8003fd0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	011b      	lsls	r3, r3, #4
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	0e1a      	lsrs	r2, r3, #24
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	3303      	adds	r3, #3
 8003fe8:	b2d2      	uxtb	r2, r2
 8003fea:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	011b      	lsls	r3, r3, #4
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	3304      	adds	r3, #4
 8004000:	b2d2      	uxtb	r2, r2
 8004002:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	011b      	lsls	r3, r3, #4
 800400c:	4413      	add	r3, r2
 800400e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	0a1a      	lsrs	r2, r3, #8
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	3305      	adds	r3, #5
 800401a:	b2d2      	uxtb	r2, r2
 800401c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	011b      	lsls	r3, r3, #4
 8004026:	4413      	add	r3, r2
 8004028:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	0c1a      	lsrs	r2, r3, #16
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	3306      	adds	r3, #6
 8004034:	b2d2      	uxtb	r2, r2
 8004036:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	011b      	lsls	r3, r3, #4
 8004040:	4413      	add	r3, r2
 8004042:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	0e1a      	lsrs	r2, r3, #24
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	3307      	adds	r3, #7
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d108      	bne.n	800406a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0220 	orr.w	r2, r2, #32
 8004066:	60da      	str	r2, [r3, #12]
 8004068:	e007      	b.n	800407a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	691a      	ldr	r2, [r3, #16]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f042 0220 	orr.w	r2, r2, #32
 8004078:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800407a:	2300      	movs	r3, #0
 800407c:	e006      	b.n	800408c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
  }
}
 800408c:	4618      	mov	r0, r3
 800408e:	371c      	adds	r7, #28
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040a8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80040aa:	7bfb      	ldrb	r3, [r7, #15]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d002      	beq.n	80040b6 <HAL_CAN_ActivateNotification+0x1e>
 80040b0:	7bfb      	ldrb	r3, [r7, #15]
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d109      	bne.n	80040ca <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6959      	ldr	r1, [r3, #20]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	e006      	b.n	80040d8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
  }
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3714      	adds	r7, #20
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b08a      	sub	sp, #40	; 0x28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80040ec:	2300      	movs	r3, #0
 80040ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004120:	6a3b      	ldr	r3, [r7, #32]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d07c      	beq.n	8004224 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b00      	cmp	r3, #0
 8004132:	d023      	beq.n	800417c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2201      	movs	r2, #1
 800413a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f983 	bl	8004452 <HAL_CAN_TxMailbox0CompleteCallback>
 800414c:	e016      	b.n	800417c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	2b00      	cmp	r3, #0
 8004156:	d004      	beq.n	8004162 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800415e:	627b      	str	r3, [r7, #36]	; 0x24
 8004160:	e00c      	b.n	800417c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	f003 0308 	and.w	r3, r3, #8
 8004168:	2b00      	cmp	r3, #0
 800416a:	d004      	beq.n	8004176 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004172:	627b      	str	r3, [r7, #36]	; 0x24
 8004174:	e002      	b.n	800417c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f989 	bl	800448e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004182:	2b00      	cmp	r3, #0
 8004184:	d024      	beq.n	80041d0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800418e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004196:	2b00      	cmp	r3, #0
 8004198:	d003      	beq.n	80041a2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f963 	bl	8004466 <HAL_CAN_TxMailbox1CompleteCallback>
 80041a0:	e016      	b.n	80041d0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d004      	beq.n	80041b6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80041b2:	627b      	str	r3, [r7, #36]	; 0x24
 80041b4:	e00c      	b.n	80041d0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d004      	beq.n	80041ca <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041c6:	627b      	str	r3, [r7, #36]	; 0x24
 80041c8:	e002      	b.n	80041d0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f969 	bl	80044a2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d024      	beq.n	8004224 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80041e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f943 	bl	800447a <HAL_CAN_TxMailbox2CompleteCallback>
 80041f4:	e016      	b.n	8004224 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d004      	beq.n	800420a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004206:	627b      	str	r3, [r7, #36]	; 0x24
 8004208:	e00c      	b.n	8004224 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d004      	beq.n	800421e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800421a:	627b      	str	r3, [r7, #36]	; 0x24
 800421c:	e002      	b.n	8004224 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f949 	bl	80044b6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00c      	beq.n	8004248 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f003 0310 	and.w	r3, r3, #16
 8004234:	2b00      	cmp	r3, #0
 8004236:	d007      	beq.n	8004248 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800423e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2210      	movs	r2, #16
 8004246:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004248:	6a3b      	ldr	r3, [r7, #32]
 800424a:	f003 0304 	and.w	r3, r3, #4
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00b      	beq.n	800426a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	f003 0308 	and.w	r3, r3, #8
 8004258:	2b00      	cmp	r3, #0
 800425a:	d006      	beq.n	800426a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2208      	movs	r2, #8
 8004262:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f930 	bl	80044ca <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d009      	beq.n	8004288 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7fd febc 	bl	8002000 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00c      	beq.n	80042ac <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	f003 0310 	and.w	r3, r3, #16
 8004298:	2b00      	cmp	r3, #0
 800429a:	d007      	beq.n	80042ac <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2210      	movs	r2, #16
 80042aa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	f003 0320 	and.w	r3, r3, #32
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00b      	beq.n	80042ce <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f003 0308 	and.w	r3, r3, #8
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d006      	beq.n	80042ce <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2208      	movs	r2, #8
 80042c6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 f912 	bl	80044f2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	f003 0310 	and.w	r3, r3, #16
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d009      	beq.n	80042ec <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d002      	beq.n	80042ec <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f8f9 	bl	80044de <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00b      	beq.n	800430e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	f003 0310 	and.w	r3, r3, #16
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d006      	beq.n	800430e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2210      	movs	r2, #16
 8004306:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f8fc 	bl	8004506 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800430e:	6a3b      	ldr	r3, [r7, #32]
 8004310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00b      	beq.n	8004330 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	f003 0308 	and.w	r3, r3, #8
 800431e:	2b00      	cmp	r3, #0
 8004320:	d006      	beq.n	8004330 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2208      	movs	r2, #8
 8004328:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f8f5 	bl	800451a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d07b      	beq.n	8004432 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b00      	cmp	r3, #0
 8004342:	d072      	beq.n	800442a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434a:	2b00      	cmp	r3, #0
 800434c:	d008      	beq.n	8004360 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435a:	f043 0301 	orr.w	r3, r3, #1
 800435e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004366:	2b00      	cmp	r3, #0
 8004368:	d008      	beq.n	800437c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004370:	2b00      	cmp	r3, #0
 8004372:	d003      	beq.n	800437c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	f043 0302 	orr.w	r3, r3, #2
 800437a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004382:	2b00      	cmp	r3, #0
 8004384:	d008      	beq.n	8004398 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800438c:	2b00      	cmp	r3, #0
 800438e:	d003      	beq.n	8004398 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	f043 0304 	orr.w	r3, r3, #4
 8004396:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d043      	beq.n	800442a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d03e      	beq.n	800442a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043b2:	2b60      	cmp	r3, #96	; 0x60
 80043b4:	d02b      	beq.n	800440e <HAL_CAN_IRQHandler+0x32a>
 80043b6:	2b60      	cmp	r3, #96	; 0x60
 80043b8:	d82e      	bhi.n	8004418 <HAL_CAN_IRQHandler+0x334>
 80043ba:	2b50      	cmp	r3, #80	; 0x50
 80043bc:	d022      	beq.n	8004404 <HAL_CAN_IRQHandler+0x320>
 80043be:	2b50      	cmp	r3, #80	; 0x50
 80043c0:	d82a      	bhi.n	8004418 <HAL_CAN_IRQHandler+0x334>
 80043c2:	2b40      	cmp	r3, #64	; 0x40
 80043c4:	d019      	beq.n	80043fa <HAL_CAN_IRQHandler+0x316>
 80043c6:	2b40      	cmp	r3, #64	; 0x40
 80043c8:	d826      	bhi.n	8004418 <HAL_CAN_IRQHandler+0x334>
 80043ca:	2b30      	cmp	r3, #48	; 0x30
 80043cc:	d010      	beq.n	80043f0 <HAL_CAN_IRQHandler+0x30c>
 80043ce:	2b30      	cmp	r3, #48	; 0x30
 80043d0:	d822      	bhi.n	8004418 <HAL_CAN_IRQHandler+0x334>
 80043d2:	2b10      	cmp	r3, #16
 80043d4:	d002      	beq.n	80043dc <HAL_CAN_IRQHandler+0x2f8>
 80043d6:	2b20      	cmp	r3, #32
 80043d8:	d005      	beq.n	80043e6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80043da:	e01d      	b.n	8004418 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80043dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043de:	f043 0308 	orr.w	r3, r3, #8
 80043e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80043e4:	e019      	b.n	800441a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	f043 0310 	orr.w	r3, r3, #16
 80043ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80043ee:	e014      	b.n	800441a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	f043 0320 	orr.w	r3, r3, #32
 80043f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80043f8:	e00f      	b.n	800441a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004400:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004402:	e00a      	b.n	800441a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800440a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800440c:	e005      	b.n	800441a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004414:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004416:	e000      	b.n	800441a <HAL_CAN_IRQHandler+0x336>
            break;
 8004418:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	699a      	ldr	r2, [r3, #24]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004428:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2204      	movs	r2, #4
 8004430:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	2b00      	cmp	r3, #0
 8004436:	d008      	beq.n	800444a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 f872 	bl	800452e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800444a:	bf00      	nop
 800444c:	3728      	adds	r7, #40	; 0x28
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800445a:	bf00      	nop
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800446e:	bf00      	nop
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004482:	bf00      	nop
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800448e:	b480      	push	{r7}
 8004490:	b083      	sub	sp, #12
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004496:	bf00      	nop
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80044be:	bf00      	nop
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800451a:	b480      	push	{r7}
 800451c:	b083      	sub	sp, #12
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004522:	bf00      	nop
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
	...

08004544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f003 0307 	and.w	r3, r3, #7
 8004552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004554:	4b0c      	ldr	r3, [pc, #48]	; (8004588 <__NVIC_SetPriorityGrouping+0x44>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004560:	4013      	ands	r3, r2
 8004562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800456c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004576:	4a04      	ldr	r2, [pc, #16]	; (8004588 <__NVIC_SetPriorityGrouping+0x44>)
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	60d3      	str	r3, [r2, #12]
}
 800457c:	bf00      	nop
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr
 8004588:	e000ed00 	.word	0xe000ed00

0800458c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004590:	4b04      	ldr	r3, [pc, #16]	; (80045a4 <__NVIC_GetPriorityGrouping+0x18>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	0a1b      	lsrs	r3, r3, #8
 8004596:	f003 0307 	and.w	r3, r3, #7
}
 800459a:	4618      	mov	r0, r3
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	e000ed00 	.word	0xe000ed00

080045a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	4603      	mov	r3, r0
 80045b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	db0b      	blt.n	80045d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045ba:	79fb      	ldrb	r3, [r7, #7]
 80045bc:	f003 021f 	and.w	r2, r3, #31
 80045c0:	4907      	ldr	r1, [pc, #28]	; (80045e0 <__NVIC_EnableIRQ+0x38>)
 80045c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045c6:	095b      	lsrs	r3, r3, #5
 80045c8:	2001      	movs	r0, #1
 80045ca:	fa00 f202 	lsl.w	r2, r0, r2
 80045ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	e000e100 	.word	0xe000e100

080045e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	4603      	mov	r3, r0
 80045ec:	6039      	str	r1, [r7, #0]
 80045ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	db0a      	blt.n	800460e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	b2da      	uxtb	r2, r3
 80045fc:	490c      	ldr	r1, [pc, #48]	; (8004630 <__NVIC_SetPriority+0x4c>)
 80045fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004602:	0112      	lsls	r2, r2, #4
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	440b      	add	r3, r1
 8004608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800460c:	e00a      	b.n	8004624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	b2da      	uxtb	r2, r3
 8004612:	4908      	ldr	r1, [pc, #32]	; (8004634 <__NVIC_SetPriority+0x50>)
 8004614:	79fb      	ldrb	r3, [r7, #7]
 8004616:	f003 030f 	and.w	r3, r3, #15
 800461a:	3b04      	subs	r3, #4
 800461c:	0112      	lsls	r2, r2, #4
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	440b      	add	r3, r1
 8004622:	761a      	strb	r2, [r3, #24]
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	e000e100 	.word	0xe000e100
 8004634:	e000ed00 	.word	0xe000ed00

08004638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004638:	b480      	push	{r7}
 800463a:	b089      	sub	sp, #36	; 0x24
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f003 0307 	and.w	r3, r3, #7
 800464a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	f1c3 0307 	rsb	r3, r3, #7
 8004652:	2b04      	cmp	r3, #4
 8004654:	bf28      	it	cs
 8004656:	2304      	movcs	r3, #4
 8004658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	3304      	adds	r3, #4
 800465e:	2b06      	cmp	r3, #6
 8004660:	d902      	bls.n	8004668 <NVIC_EncodePriority+0x30>
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	3b03      	subs	r3, #3
 8004666:	e000      	b.n	800466a <NVIC_EncodePriority+0x32>
 8004668:	2300      	movs	r3, #0
 800466a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800466c:	f04f 32ff 	mov.w	r2, #4294967295
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	fa02 f303 	lsl.w	r3, r2, r3
 8004676:	43da      	mvns	r2, r3
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	401a      	ands	r2, r3
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004680:	f04f 31ff 	mov.w	r1, #4294967295
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	fa01 f303 	lsl.w	r3, r1, r3
 800468a:	43d9      	mvns	r1, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004690:	4313      	orrs	r3, r2
         );
}
 8004692:	4618      	mov	r0, r3
 8004694:	3724      	adds	r7, #36	; 0x24
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
	...

080046a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046b0:	d301      	bcc.n	80046b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046b2:	2301      	movs	r3, #1
 80046b4:	e00f      	b.n	80046d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046b6:	4a0a      	ldr	r2, [pc, #40]	; (80046e0 <SysTick_Config+0x40>)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3b01      	subs	r3, #1
 80046bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046be:	210f      	movs	r1, #15
 80046c0:	f04f 30ff 	mov.w	r0, #4294967295
 80046c4:	f7ff ff8e 	bl	80045e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046c8:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <SysTick_Config+0x40>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046ce:	4b04      	ldr	r3, [pc, #16]	; (80046e0 <SysTick_Config+0x40>)
 80046d0:	2207      	movs	r2, #7
 80046d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	e000e010 	.word	0xe000e010

080046e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f7ff ff29 	bl	8004544 <__NVIC_SetPriorityGrouping>
}
 80046f2:	bf00      	nop
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b086      	sub	sp, #24
 80046fe:	af00      	add	r7, sp, #0
 8004700:	4603      	mov	r3, r0
 8004702:	60b9      	str	r1, [r7, #8]
 8004704:	607a      	str	r2, [r7, #4]
 8004706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004708:	2300      	movs	r3, #0
 800470a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800470c:	f7ff ff3e 	bl	800458c <__NVIC_GetPriorityGrouping>
 8004710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	68b9      	ldr	r1, [r7, #8]
 8004716:	6978      	ldr	r0, [r7, #20]
 8004718:	f7ff ff8e 	bl	8004638 <NVIC_EncodePriority>
 800471c:	4602      	mov	r2, r0
 800471e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004722:	4611      	mov	r1, r2
 8004724:	4618      	mov	r0, r3
 8004726:	f7ff ff5d 	bl	80045e4 <__NVIC_SetPriority>
}
 800472a:	bf00      	nop
 800472c:	3718      	adds	r7, #24
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b082      	sub	sp, #8
 8004736:	af00      	add	r7, sp, #0
 8004738:	4603      	mov	r3, r0
 800473a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800473c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004740:	4618      	mov	r0, r3
 8004742:	f7ff ff31 	bl	80045a8 <__NVIC_EnableIRQ>
}
 8004746:	bf00      	nop
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b082      	sub	sp, #8
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7ff ffa2 	bl	80046a0 <SysTick_Config>
 800475c:	4603      	mov	r3, r0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
	...

08004768 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004768:	b480      	push	{r7}
 800476a:	b089      	sub	sp, #36	; 0x24
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004772:	2300      	movs	r3, #0
 8004774:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004776:	2300      	movs	r3, #0
 8004778:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800477a:	2300      	movs	r3, #0
 800477c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800477e:	2300      	movs	r3, #0
 8004780:	61fb      	str	r3, [r7, #28]
 8004782:	e177      	b.n	8004a74 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004784:	2201      	movs	r2, #1
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	4013      	ands	r3, r2
 8004796:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	429a      	cmp	r2, r3
 800479e:	f040 8166 	bne.w	8004a6e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f003 0303 	and.w	r3, r3, #3
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d005      	beq.n	80047ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d130      	bne.n	800481c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	2203      	movs	r2, #3
 80047c6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ca:	43db      	mvns	r3, r3
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	4013      	ands	r3, r2
 80047d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	68da      	ldr	r2, [r3, #12]
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	fa02 f303 	lsl.w	r3, r2, r3
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047f0:	2201      	movs	r2, #1
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	43db      	mvns	r3, r3
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	4013      	ands	r3, r2
 80047fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	091b      	lsrs	r3, r3, #4
 8004806:	f003 0201 	and.w	r2, r3, #1
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	4313      	orrs	r3, r2
 8004814:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f003 0303 	and.w	r3, r3, #3
 8004824:	2b03      	cmp	r3, #3
 8004826:	d017      	beq.n	8004858 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	2203      	movs	r2, #3
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	43db      	mvns	r3, r3
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	4013      	ands	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	689a      	ldr	r2, [r3, #8]
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	4313      	orrs	r3, r2
 8004850:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f003 0303 	and.w	r3, r3, #3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d123      	bne.n	80048ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	08da      	lsrs	r2, r3, #3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	3208      	adds	r2, #8
 800486c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004870:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	f003 0307 	and.w	r3, r3, #7
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	220f      	movs	r2, #15
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	43db      	mvns	r3, r3
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	4013      	ands	r3, r2
 8004886:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	691a      	ldr	r2, [r3, #16]
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	f003 0307 	and.w	r3, r3, #7
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	4313      	orrs	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	08da      	lsrs	r2, r3, #3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	3208      	adds	r2, #8
 80048a6:	69b9      	ldr	r1, [r7, #24]
 80048a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	2203      	movs	r2, #3
 80048b8:	fa02 f303 	lsl.w	r3, r2, r3
 80048bc:	43db      	mvns	r3, r3
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	4013      	ands	r3, r2
 80048c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f003 0203 	and.w	r2, r3, #3
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	fa02 f303 	lsl.w	r3, r2, r3
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 80c0 	beq.w	8004a6e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048ee:	2300      	movs	r3, #0
 80048f0:	60fb      	str	r3, [r7, #12]
 80048f2:	4b66      	ldr	r3, [pc, #408]	; (8004a8c <HAL_GPIO_Init+0x324>)
 80048f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f6:	4a65      	ldr	r2, [pc, #404]	; (8004a8c <HAL_GPIO_Init+0x324>)
 80048f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048fc:	6453      	str	r3, [r2, #68]	; 0x44
 80048fe:	4b63      	ldr	r3, [pc, #396]	; (8004a8c <HAL_GPIO_Init+0x324>)
 8004900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800490a:	4a61      	ldr	r2, [pc, #388]	; (8004a90 <HAL_GPIO_Init+0x328>)
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	089b      	lsrs	r3, r3, #2
 8004910:	3302      	adds	r3, #2
 8004912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004916:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	220f      	movs	r2, #15
 8004922:	fa02 f303 	lsl.w	r3, r2, r3
 8004926:	43db      	mvns	r3, r3
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	4013      	ands	r3, r2
 800492c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a58      	ldr	r2, [pc, #352]	; (8004a94 <HAL_GPIO_Init+0x32c>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d037      	beq.n	80049a6 <HAL_GPIO_Init+0x23e>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a57      	ldr	r2, [pc, #348]	; (8004a98 <HAL_GPIO_Init+0x330>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d031      	beq.n	80049a2 <HAL_GPIO_Init+0x23a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a56      	ldr	r2, [pc, #344]	; (8004a9c <HAL_GPIO_Init+0x334>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d02b      	beq.n	800499e <HAL_GPIO_Init+0x236>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a55      	ldr	r2, [pc, #340]	; (8004aa0 <HAL_GPIO_Init+0x338>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d025      	beq.n	800499a <HAL_GPIO_Init+0x232>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a54      	ldr	r2, [pc, #336]	; (8004aa4 <HAL_GPIO_Init+0x33c>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d01f      	beq.n	8004996 <HAL_GPIO_Init+0x22e>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a53      	ldr	r2, [pc, #332]	; (8004aa8 <HAL_GPIO_Init+0x340>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d019      	beq.n	8004992 <HAL_GPIO_Init+0x22a>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a52      	ldr	r2, [pc, #328]	; (8004aac <HAL_GPIO_Init+0x344>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d013      	beq.n	800498e <HAL_GPIO_Init+0x226>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a51      	ldr	r2, [pc, #324]	; (8004ab0 <HAL_GPIO_Init+0x348>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d00d      	beq.n	800498a <HAL_GPIO_Init+0x222>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a50      	ldr	r2, [pc, #320]	; (8004ab4 <HAL_GPIO_Init+0x34c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d007      	beq.n	8004986 <HAL_GPIO_Init+0x21e>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a4f      	ldr	r2, [pc, #316]	; (8004ab8 <HAL_GPIO_Init+0x350>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d101      	bne.n	8004982 <HAL_GPIO_Init+0x21a>
 800497e:	2309      	movs	r3, #9
 8004980:	e012      	b.n	80049a8 <HAL_GPIO_Init+0x240>
 8004982:	230a      	movs	r3, #10
 8004984:	e010      	b.n	80049a8 <HAL_GPIO_Init+0x240>
 8004986:	2308      	movs	r3, #8
 8004988:	e00e      	b.n	80049a8 <HAL_GPIO_Init+0x240>
 800498a:	2307      	movs	r3, #7
 800498c:	e00c      	b.n	80049a8 <HAL_GPIO_Init+0x240>
 800498e:	2306      	movs	r3, #6
 8004990:	e00a      	b.n	80049a8 <HAL_GPIO_Init+0x240>
 8004992:	2305      	movs	r3, #5
 8004994:	e008      	b.n	80049a8 <HAL_GPIO_Init+0x240>
 8004996:	2304      	movs	r3, #4
 8004998:	e006      	b.n	80049a8 <HAL_GPIO_Init+0x240>
 800499a:	2303      	movs	r3, #3
 800499c:	e004      	b.n	80049a8 <HAL_GPIO_Init+0x240>
 800499e:	2302      	movs	r3, #2
 80049a0:	e002      	b.n	80049a8 <HAL_GPIO_Init+0x240>
 80049a2:	2301      	movs	r3, #1
 80049a4:	e000      	b.n	80049a8 <HAL_GPIO_Init+0x240>
 80049a6:	2300      	movs	r3, #0
 80049a8:	69fa      	ldr	r2, [r7, #28]
 80049aa:	f002 0203 	and.w	r2, r2, #3
 80049ae:	0092      	lsls	r2, r2, #2
 80049b0:	4093      	lsls	r3, r2
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049b8:	4935      	ldr	r1, [pc, #212]	; (8004a90 <HAL_GPIO_Init+0x328>)
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	089b      	lsrs	r3, r3, #2
 80049be:	3302      	adds	r3, #2
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049c6:	4b3d      	ldr	r3, [pc, #244]	; (8004abc <HAL_GPIO_Init+0x354>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	43db      	mvns	r3, r3
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	4013      	ands	r3, r2
 80049d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049ea:	4a34      	ldr	r2, [pc, #208]	; (8004abc <HAL_GPIO_Init+0x354>)
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049f0:	4b32      	ldr	r3, [pc, #200]	; (8004abc <HAL_GPIO_Init+0x354>)
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	43db      	mvns	r3, r3
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	4013      	ands	r3, r2
 80049fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d003      	beq.n	8004a14 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a14:	4a29      	ldr	r2, [pc, #164]	; (8004abc <HAL_GPIO_Init+0x354>)
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a1a:	4b28      	ldr	r3, [pc, #160]	; (8004abc <HAL_GPIO_Init+0x354>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	43db      	mvns	r3, r3
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	4013      	ands	r3, r2
 8004a28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d003      	beq.n	8004a3e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a3e:	4a1f      	ldr	r2, [pc, #124]	; (8004abc <HAL_GPIO_Init+0x354>)
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a44:	4b1d      	ldr	r3, [pc, #116]	; (8004abc <HAL_GPIO_Init+0x354>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	43db      	mvns	r3, r3
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	4013      	ands	r3, r2
 8004a52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d003      	beq.n	8004a68 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a68:	4a14      	ldr	r2, [pc, #80]	; (8004abc <HAL_GPIO_Init+0x354>)
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	3301      	adds	r3, #1
 8004a72:	61fb      	str	r3, [r7, #28]
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	2b0f      	cmp	r3, #15
 8004a78:	f67f ae84 	bls.w	8004784 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a7c:	bf00      	nop
 8004a7e:	bf00      	nop
 8004a80:	3724      	adds	r7, #36	; 0x24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	40023800 	.word	0x40023800
 8004a90:	40013800 	.word	0x40013800
 8004a94:	40020000 	.word	0x40020000
 8004a98:	40020400 	.word	0x40020400
 8004a9c:	40020800 	.word	0x40020800
 8004aa0:	40020c00 	.word	0x40020c00
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	40021400 	.word	0x40021400
 8004aac:	40021800 	.word	0x40021800
 8004ab0:	40021c00 	.word	0x40021c00
 8004ab4:	40022000 	.word	0x40022000
 8004ab8:	40022400 	.word	0x40022400
 8004abc:	40013c00 	.word	0x40013c00

08004ac0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	460b      	mov	r3, r1
 8004aca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	691a      	ldr	r2, [r3, #16]
 8004ad0:	887b      	ldrh	r3, [r7, #2]
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d002      	beq.n	8004ade <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	73fb      	strb	r3, [r7, #15]
 8004adc:	e001      	b.n	8004ae2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	460b      	mov	r3, r1
 8004afa:	807b      	strh	r3, [r7, #2]
 8004afc:	4613      	mov	r3, r2
 8004afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b00:	787b      	ldrb	r3, [r7, #1]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b06:	887a      	ldrh	r2, [r7, #2]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b0c:	e003      	b.n	8004b16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b0e:	887b      	ldrh	r3, [r7, #2]
 8004b10:	041a      	lsls	r2, r3, #16
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	619a      	str	r2, [r3, #24]
}
 8004b16:	bf00      	nop
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b085      	sub	sp, #20
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b34:	887a      	ldrh	r2, [r7, #2]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	041a      	lsls	r2, r3, #16
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	43d9      	mvns	r1, r3
 8004b40:	887b      	ldrh	r3, [r7, #2]
 8004b42:	400b      	ands	r3, r1
 8004b44:	431a      	orrs	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	619a      	str	r2, [r3, #24]
}
 8004b4a:	bf00      	nop
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
	...

08004b58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	4603      	mov	r3, r0
 8004b60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004b62:	4b08      	ldr	r3, [pc, #32]	; (8004b84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b64:	695a      	ldr	r2, [r3, #20]
 8004b66:	88fb      	ldrh	r3, [r7, #6]
 8004b68:	4013      	ands	r3, r2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d006      	beq.n	8004b7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b6e:	4a05      	ldr	r2, [pc, #20]	; (8004b84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b70:	88fb      	ldrh	r3, [r7, #6]
 8004b72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b74:	88fb      	ldrh	r3, [r7, #6]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fd fb9a 	bl	80022b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b7c:	bf00      	nop
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	40013c00 	.word	0x40013c00

08004b88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e267      	b.n	800506a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d075      	beq.n	8004c92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ba6:	4b88      	ldr	r3, [pc, #544]	; (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f003 030c 	and.w	r3, r3, #12
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d00c      	beq.n	8004bcc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bb2:	4b85      	ldr	r3, [pc, #532]	; (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bba:	2b08      	cmp	r3, #8
 8004bbc:	d112      	bne.n	8004be4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bbe:	4b82      	ldr	r3, [pc, #520]	; (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bca:	d10b      	bne.n	8004be4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bcc:	4b7e      	ldr	r3, [pc, #504]	; (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d05b      	beq.n	8004c90 <HAL_RCC_OscConfig+0x108>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d157      	bne.n	8004c90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e242      	b.n	800506a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bec:	d106      	bne.n	8004bfc <HAL_RCC_OscConfig+0x74>
 8004bee:	4b76      	ldr	r3, [pc, #472]	; (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a75      	ldr	r2, [pc, #468]	; (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf8:	6013      	str	r3, [r2, #0]
 8004bfa:	e01d      	b.n	8004c38 <HAL_RCC_OscConfig+0xb0>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c04:	d10c      	bne.n	8004c20 <HAL_RCC_OscConfig+0x98>
 8004c06:	4b70      	ldr	r3, [pc, #448]	; (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a6f      	ldr	r2, [pc, #444]	; (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	4b6d      	ldr	r3, [pc, #436]	; (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a6c      	ldr	r2, [pc, #432]	; (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	e00b      	b.n	8004c38 <HAL_RCC_OscConfig+0xb0>
 8004c20:	4b69      	ldr	r3, [pc, #420]	; (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a68      	ldr	r2, [pc, #416]	; (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c2a:	6013      	str	r3, [r2, #0]
 8004c2c:	4b66      	ldr	r3, [pc, #408]	; (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a65      	ldr	r2, [pc, #404]	; (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d013      	beq.n	8004c68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c40:	f7fe f9cc 	bl	8002fdc <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c48:	f7fe f9c8 	bl	8002fdc <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b64      	cmp	r3, #100	; 0x64
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e207      	b.n	800506a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c5a:	4b5b      	ldr	r3, [pc, #364]	; (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d0f0      	beq.n	8004c48 <HAL_RCC_OscConfig+0xc0>
 8004c66:	e014      	b.n	8004c92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c68:	f7fe f9b8 	bl	8002fdc <HAL_GetTick>
 8004c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c6e:	e008      	b.n	8004c82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c70:	f7fe f9b4 	bl	8002fdc <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b64      	cmp	r3, #100	; 0x64
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e1f3      	b.n	800506a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c82:	4b51      	ldr	r3, [pc, #324]	; (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1f0      	bne.n	8004c70 <HAL_RCC_OscConfig+0xe8>
 8004c8e:	e000      	b.n	8004c92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d063      	beq.n	8004d66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c9e:	4b4a      	ldr	r3, [pc, #296]	; (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f003 030c 	and.w	r3, r3, #12
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00b      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004caa:	4b47      	ldr	r3, [pc, #284]	; (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cb2:	2b08      	cmp	r3, #8
 8004cb4:	d11c      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cb6:	4b44      	ldr	r3, [pc, #272]	; (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d116      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cc2:	4b41      	ldr	r3, [pc, #260]	; (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d005      	beq.n	8004cda <HAL_RCC_OscConfig+0x152>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d001      	beq.n	8004cda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e1c7      	b.n	800506a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cda:	4b3b      	ldr	r3, [pc, #236]	; (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	4937      	ldr	r1, [pc, #220]	; (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cee:	e03a      	b.n	8004d66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d020      	beq.n	8004d3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cf8:	4b34      	ldr	r3, [pc, #208]	; (8004dcc <HAL_RCC_OscConfig+0x244>)
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfe:	f7fe f96d 	bl	8002fdc <HAL_GetTick>
 8004d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d04:	e008      	b.n	8004d18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d06:	f7fe f969 	bl	8002fdc <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e1a8      	b.n	800506a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d18:	4b2b      	ldr	r3, [pc, #172]	; (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0f0      	beq.n	8004d06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d24:	4b28      	ldr	r3, [pc, #160]	; (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	4925      	ldr	r1, [pc, #148]	; (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	600b      	str	r3, [r1, #0]
 8004d38:	e015      	b.n	8004d66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d3a:	4b24      	ldr	r3, [pc, #144]	; (8004dcc <HAL_RCC_OscConfig+0x244>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d40:	f7fe f94c 	bl	8002fdc <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d48:	f7fe f948 	bl	8002fdc <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e187      	b.n	800506a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d5a:	4b1b      	ldr	r3, [pc, #108]	; (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1f0      	bne.n	8004d48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0308 	and.w	r3, r3, #8
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d036      	beq.n	8004de0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d016      	beq.n	8004da8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d7a:	4b15      	ldr	r3, [pc, #84]	; (8004dd0 <HAL_RCC_OscConfig+0x248>)
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d80:	f7fe f92c 	bl	8002fdc <HAL_GetTick>
 8004d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d86:	e008      	b.n	8004d9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d88:	f7fe f928 	bl	8002fdc <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e167      	b.n	800506a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d9a:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d0f0      	beq.n	8004d88 <HAL_RCC_OscConfig+0x200>
 8004da6:	e01b      	b.n	8004de0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004da8:	4b09      	ldr	r3, [pc, #36]	; (8004dd0 <HAL_RCC_OscConfig+0x248>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dae:	f7fe f915 	bl	8002fdc <HAL_GetTick>
 8004db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004db4:	e00e      	b.n	8004dd4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004db6:	f7fe f911 	bl	8002fdc <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d907      	bls.n	8004dd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e150      	b.n	800506a <HAL_RCC_OscConfig+0x4e2>
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	42470000 	.word	0x42470000
 8004dd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dd4:	4b88      	ldr	r3, [pc, #544]	; (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1ea      	bne.n	8004db6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 8097 	beq.w	8004f1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dee:	2300      	movs	r3, #0
 8004df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004df2:	4b81      	ldr	r3, [pc, #516]	; (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10f      	bne.n	8004e1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60bb      	str	r3, [r7, #8]
 8004e02:	4b7d      	ldr	r3, [pc, #500]	; (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	4a7c      	ldr	r2, [pc, #496]	; (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e0e:	4b7a      	ldr	r3, [pc, #488]	; (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e16:	60bb      	str	r3, [r7, #8]
 8004e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e1e:	4b77      	ldr	r3, [pc, #476]	; (8004ffc <HAL_RCC_OscConfig+0x474>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d118      	bne.n	8004e5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e2a:	4b74      	ldr	r3, [pc, #464]	; (8004ffc <HAL_RCC_OscConfig+0x474>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a73      	ldr	r2, [pc, #460]	; (8004ffc <HAL_RCC_OscConfig+0x474>)
 8004e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e36:	f7fe f8d1 	bl	8002fdc <HAL_GetTick>
 8004e3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e3c:	e008      	b.n	8004e50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e3e:	f7fe f8cd 	bl	8002fdc <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e10c      	b.n	800506a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e50:	4b6a      	ldr	r3, [pc, #424]	; (8004ffc <HAL_RCC_OscConfig+0x474>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0f0      	beq.n	8004e3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d106      	bne.n	8004e72 <HAL_RCC_OscConfig+0x2ea>
 8004e64:	4b64      	ldr	r3, [pc, #400]	; (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e68:	4a63      	ldr	r2, [pc, #396]	; (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004e6a:	f043 0301 	orr.w	r3, r3, #1
 8004e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e70:	e01c      	b.n	8004eac <HAL_RCC_OscConfig+0x324>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	2b05      	cmp	r3, #5
 8004e78:	d10c      	bne.n	8004e94 <HAL_RCC_OscConfig+0x30c>
 8004e7a:	4b5f      	ldr	r3, [pc, #380]	; (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7e:	4a5e      	ldr	r2, [pc, #376]	; (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004e80:	f043 0304 	orr.w	r3, r3, #4
 8004e84:	6713      	str	r3, [r2, #112]	; 0x70
 8004e86:	4b5c      	ldr	r3, [pc, #368]	; (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8a:	4a5b      	ldr	r2, [pc, #364]	; (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004e8c:	f043 0301 	orr.w	r3, r3, #1
 8004e90:	6713      	str	r3, [r2, #112]	; 0x70
 8004e92:	e00b      	b.n	8004eac <HAL_RCC_OscConfig+0x324>
 8004e94:	4b58      	ldr	r3, [pc, #352]	; (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e98:	4a57      	ldr	r2, [pc, #348]	; (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004e9a:	f023 0301 	bic.w	r3, r3, #1
 8004e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004ea0:	4b55      	ldr	r3, [pc, #340]	; (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea4:	4a54      	ldr	r2, [pc, #336]	; (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004ea6:	f023 0304 	bic.w	r3, r3, #4
 8004eaa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d015      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb4:	f7fe f892 	bl	8002fdc <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eba:	e00a      	b.n	8004ed2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ebc:	f7fe f88e 	bl	8002fdc <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e0cb      	b.n	800506a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed2:	4b49      	ldr	r3, [pc, #292]	; (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d0ee      	beq.n	8004ebc <HAL_RCC_OscConfig+0x334>
 8004ede:	e014      	b.n	8004f0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ee0:	f7fe f87c 	bl	8002fdc <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ee6:	e00a      	b.n	8004efe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ee8:	f7fe f878 	bl	8002fdc <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e0b5      	b.n	800506a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004efe:	4b3e      	ldr	r3, [pc, #248]	; (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1ee      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f0a:	7dfb      	ldrb	r3, [r7, #23]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d105      	bne.n	8004f1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f10:	4b39      	ldr	r3, [pc, #228]	; (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f14:	4a38      	ldr	r2, [pc, #224]	; (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004f16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 80a1 	beq.w	8005068 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f26:	4b34      	ldr	r3, [pc, #208]	; (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 030c 	and.w	r3, r3, #12
 8004f2e:	2b08      	cmp	r3, #8
 8004f30:	d05c      	beq.n	8004fec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d141      	bne.n	8004fbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f3a:	4b31      	ldr	r3, [pc, #196]	; (8005000 <HAL_RCC_OscConfig+0x478>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f40:	f7fe f84c 	bl	8002fdc <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f48:	f7fe f848 	bl	8002fdc <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e087      	b.n	800506a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f5a:	4b27      	ldr	r3, [pc, #156]	; (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1f0      	bne.n	8004f48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	69da      	ldr	r2, [r3, #28]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f74:	019b      	lsls	r3, r3, #6
 8004f76:	431a      	orrs	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7c:	085b      	lsrs	r3, r3, #1
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	041b      	lsls	r3, r3, #16
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f88:	061b      	lsls	r3, r3, #24
 8004f8a:	491b      	ldr	r1, [pc, #108]	; (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f90:	4b1b      	ldr	r3, [pc, #108]	; (8005000 <HAL_RCC_OscConfig+0x478>)
 8004f92:	2201      	movs	r2, #1
 8004f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f96:	f7fe f821 	bl	8002fdc <HAL_GetTick>
 8004f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f9c:	e008      	b.n	8004fb0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f9e:	f7fe f81d 	bl	8002fdc <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d901      	bls.n	8004fb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e05c      	b.n	800506a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fb0:	4b11      	ldr	r3, [pc, #68]	; (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d0f0      	beq.n	8004f9e <HAL_RCC_OscConfig+0x416>
 8004fbc:	e054      	b.n	8005068 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fbe:	4b10      	ldr	r3, [pc, #64]	; (8005000 <HAL_RCC_OscConfig+0x478>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc4:	f7fe f80a 	bl	8002fdc <HAL_GetTick>
 8004fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fcc:	f7fe f806 	bl	8002fdc <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e045      	b.n	800506a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fde:	4b06      	ldr	r3, [pc, #24]	; (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1f0      	bne.n	8004fcc <HAL_RCC_OscConfig+0x444>
 8004fea:	e03d      	b.n	8005068 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d107      	bne.n	8005004 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e038      	b.n	800506a <HAL_RCC_OscConfig+0x4e2>
 8004ff8:	40023800 	.word	0x40023800
 8004ffc:	40007000 	.word	0x40007000
 8005000:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005004:	4b1b      	ldr	r3, [pc, #108]	; (8005074 <HAL_RCC_OscConfig+0x4ec>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d028      	beq.n	8005064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800501c:	429a      	cmp	r2, r3
 800501e:	d121      	bne.n	8005064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800502a:	429a      	cmp	r2, r3
 800502c:	d11a      	bne.n	8005064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005034:	4013      	ands	r3, r2
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800503a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800503c:	4293      	cmp	r3, r2
 800503e:	d111      	bne.n	8005064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504a:	085b      	lsrs	r3, r3, #1
 800504c:	3b01      	subs	r3, #1
 800504e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005050:	429a      	cmp	r2, r3
 8005052:	d107      	bne.n	8005064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005060:	429a      	cmp	r2, r3
 8005062:	d001      	beq.n	8005068 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e000      	b.n	800506a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3718      	adds	r7, #24
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	40023800 	.word	0x40023800

08005078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e0cc      	b.n	8005226 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800508c:	4b68      	ldr	r3, [pc, #416]	; (8005230 <HAL_RCC_ClockConfig+0x1b8>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 030f 	and.w	r3, r3, #15
 8005094:	683a      	ldr	r2, [r7, #0]
 8005096:	429a      	cmp	r2, r3
 8005098:	d90c      	bls.n	80050b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800509a:	4b65      	ldr	r3, [pc, #404]	; (8005230 <HAL_RCC_ClockConfig+0x1b8>)
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	b2d2      	uxtb	r2, r2
 80050a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050a2:	4b63      	ldr	r3, [pc, #396]	; (8005230 <HAL_RCC_ClockConfig+0x1b8>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 030f 	and.w	r3, r3, #15
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d001      	beq.n	80050b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e0b8      	b.n	8005226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d020      	beq.n	8005102 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0304 	and.w	r3, r3, #4
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d005      	beq.n	80050d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050cc:	4b59      	ldr	r3, [pc, #356]	; (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	4a58      	ldr	r2, [pc, #352]	; (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 80050d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0308 	and.w	r3, r3, #8
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d005      	beq.n	80050f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050e4:	4b53      	ldr	r3, [pc, #332]	; (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	4a52      	ldr	r2, [pc, #328]	; (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 80050ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80050ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050f0:	4b50      	ldr	r3, [pc, #320]	; (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	494d      	ldr	r1, [pc, #308]	; (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b00      	cmp	r3, #0
 800510c:	d044      	beq.n	8005198 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d107      	bne.n	8005126 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005116:	4b47      	ldr	r3, [pc, #284]	; (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d119      	bne.n	8005156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e07f      	b.n	8005226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	2b02      	cmp	r3, #2
 800512c:	d003      	beq.n	8005136 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005132:	2b03      	cmp	r3, #3
 8005134:	d107      	bne.n	8005146 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005136:	4b3f      	ldr	r3, [pc, #252]	; (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d109      	bne.n	8005156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e06f      	b.n	8005226 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005146:	4b3b      	ldr	r3, [pc, #236]	; (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e067      	b.n	8005226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005156:	4b37      	ldr	r3, [pc, #220]	; (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f023 0203 	bic.w	r2, r3, #3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	4934      	ldr	r1, [pc, #208]	; (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 8005164:	4313      	orrs	r3, r2
 8005166:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005168:	f7fd ff38 	bl	8002fdc <HAL_GetTick>
 800516c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800516e:	e00a      	b.n	8005186 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005170:	f7fd ff34 	bl	8002fdc <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	f241 3288 	movw	r2, #5000	; 0x1388
 800517e:	4293      	cmp	r3, r2
 8005180:	d901      	bls.n	8005186 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e04f      	b.n	8005226 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005186:	4b2b      	ldr	r3, [pc, #172]	; (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f003 020c 	and.w	r2, r3, #12
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	429a      	cmp	r2, r3
 8005196:	d1eb      	bne.n	8005170 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005198:	4b25      	ldr	r3, [pc, #148]	; (8005230 <HAL_RCC_ClockConfig+0x1b8>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 030f 	and.w	r3, r3, #15
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d20c      	bcs.n	80051c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051a6:	4b22      	ldr	r3, [pc, #136]	; (8005230 <HAL_RCC_ClockConfig+0x1b8>)
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	b2d2      	uxtb	r2, r2
 80051ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ae:	4b20      	ldr	r3, [pc, #128]	; (8005230 <HAL_RCC_ClockConfig+0x1b8>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 030f 	and.w	r3, r3, #15
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d001      	beq.n	80051c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e032      	b.n	8005226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0304 	and.w	r3, r3, #4
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d008      	beq.n	80051de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051cc:	4b19      	ldr	r3, [pc, #100]	; (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	4916      	ldr	r1, [pc, #88]	; (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0308 	and.w	r3, r3, #8
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d009      	beq.n	80051fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051ea:	4b12      	ldr	r3, [pc, #72]	; (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	00db      	lsls	r3, r3, #3
 80051f8:	490e      	ldr	r1, [pc, #56]	; (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051fe:	f000 f821 	bl	8005244 <HAL_RCC_GetSysClockFreq>
 8005202:	4602      	mov	r2, r0
 8005204:	4b0b      	ldr	r3, [pc, #44]	; (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	091b      	lsrs	r3, r3, #4
 800520a:	f003 030f 	and.w	r3, r3, #15
 800520e:	490a      	ldr	r1, [pc, #40]	; (8005238 <HAL_RCC_ClockConfig+0x1c0>)
 8005210:	5ccb      	ldrb	r3, [r1, r3]
 8005212:	fa22 f303 	lsr.w	r3, r2, r3
 8005216:	4a09      	ldr	r2, [pc, #36]	; (800523c <HAL_RCC_ClockConfig+0x1c4>)
 8005218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800521a:	4b09      	ldr	r3, [pc, #36]	; (8005240 <HAL_RCC_ClockConfig+0x1c8>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4618      	mov	r0, r3
 8005220:	f7fd fe98 	bl	8002f54 <HAL_InitTick>

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	40023c00 	.word	0x40023c00
 8005234:	40023800 	.word	0x40023800
 8005238:	08005d84 	.word	0x08005d84
 800523c:	20000010 	.word	0x20000010
 8005240:	20000014 	.word	0x20000014

08005244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005244:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005248:	b090      	sub	sp, #64	; 0x40
 800524a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	637b      	str	r3, [r7, #52]	; 0x34
 8005250:	2300      	movs	r3, #0
 8005252:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005254:	2300      	movs	r3, #0
 8005256:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800525c:	4b59      	ldr	r3, [pc, #356]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f003 030c 	and.w	r3, r3, #12
 8005264:	2b08      	cmp	r3, #8
 8005266:	d00d      	beq.n	8005284 <HAL_RCC_GetSysClockFreq+0x40>
 8005268:	2b08      	cmp	r3, #8
 800526a:	f200 80a1 	bhi.w	80053b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800526e:	2b00      	cmp	r3, #0
 8005270:	d002      	beq.n	8005278 <HAL_RCC_GetSysClockFreq+0x34>
 8005272:	2b04      	cmp	r3, #4
 8005274:	d003      	beq.n	800527e <HAL_RCC_GetSysClockFreq+0x3a>
 8005276:	e09b      	b.n	80053b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005278:	4b53      	ldr	r3, [pc, #332]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800527a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800527c:	e09b      	b.n	80053b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800527e:	4b53      	ldr	r3, [pc, #332]	; (80053cc <HAL_RCC_GetSysClockFreq+0x188>)
 8005280:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005282:	e098      	b.n	80053b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005284:	4b4f      	ldr	r3, [pc, #316]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800528c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800528e:	4b4d      	ldr	r3, [pc, #308]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d028      	beq.n	80052ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800529a:	4b4a      	ldr	r3, [pc, #296]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	099b      	lsrs	r3, r3, #6
 80052a0:	2200      	movs	r2, #0
 80052a2:	623b      	str	r3, [r7, #32]
 80052a4:	627a      	str	r2, [r7, #36]	; 0x24
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80052ac:	2100      	movs	r1, #0
 80052ae:	4b47      	ldr	r3, [pc, #284]	; (80053cc <HAL_RCC_GetSysClockFreq+0x188>)
 80052b0:	fb03 f201 	mul.w	r2, r3, r1
 80052b4:	2300      	movs	r3, #0
 80052b6:	fb00 f303 	mul.w	r3, r0, r3
 80052ba:	4413      	add	r3, r2
 80052bc:	4a43      	ldr	r2, [pc, #268]	; (80053cc <HAL_RCC_GetSysClockFreq+0x188>)
 80052be:	fba0 1202 	umull	r1, r2, r0, r2
 80052c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052c4:	460a      	mov	r2, r1
 80052c6:	62ba      	str	r2, [r7, #40]	; 0x28
 80052c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052ca:	4413      	add	r3, r2
 80052cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d0:	2200      	movs	r2, #0
 80052d2:	61bb      	str	r3, [r7, #24]
 80052d4:	61fa      	str	r2, [r7, #28]
 80052d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80052de:	f7fb fc4d 	bl	8000b7c <__aeabi_uldivmod>
 80052e2:	4602      	mov	r2, r0
 80052e4:	460b      	mov	r3, r1
 80052e6:	4613      	mov	r3, r2
 80052e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052ea:	e053      	b.n	8005394 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052ec:	4b35      	ldr	r3, [pc, #212]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	099b      	lsrs	r3, r3, #6
 80052f2:	2200      	movs	r2, #0
 80052f4:	613b      	str	r3, [r7, #16]
 80052f6:	617a      	str	r2, [r7, #20]
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80052fe:	f04f 0b00 	mov.w	fp, #0
 8005302:	4652      	mov	r2, sl
 8005304:	465b      	mov	r3, fp
 8005306:	f04f 0000 	mov.w	r0, #0
 800530a:	f04f 0100 	mov.w	r1, #0
 800530e:	0159      	lsls	r1, r3, #5
 8005310:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005314:	0150      	lsls	r0, r2, #5
 8005316:	4602      	mov	r2, r0
 8005318:	460b      	mov	r3, r1
 800531a:	ebb2 080a 	subs.w	r8, r2, sl
 800531e:	eb63 090b 	sbc.w	r9, r3, fp
 8005322:	f04f 0200 	mov.w	r2, #0
 8005326:	f04f 0300 	mov.w	r3, #0
 800532a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800532e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005332:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005336:	ebb2 0408 	subs.w	r4, r2, r8
 800533a:	eb63 0509 	sbc.w	r5, r3, r9
 800533e:	f04f 0200 	mov.w	r2, #0
 8005342:	f04f 0300 	mov.w	r3, #0
 8005346:	00eb      	lsls	r3, r5, #3
 8005348:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800534c:	00e2      	lsls	r2, r4, #3
 800534e:	4614      	mov	r4, r2
 8005350:	461d      	mov	r5, r3
 8005352:	eb14 030a 	adds.w	r3, r4, sl
 8005356:	603b      	str	r3, [r7, #0]
 8005358:	eb45 030b 	adc.w	r3, r5, fp
 800535c:	607b      	str	r3, [r7, #4]
 800535e:	f04f 0200 	mov.w	r2, #0
 8005362:	f04f 0300 	mov.w	r3, #0
 8005366:	e9d7 4500 	ldrd	r4, r5, [r7]
 800536a:	4629      	mov	r1, r5
 800536c:	028b      	lsls	r3, r1, #10
 800536e:	4621      	mov	r1, r4
 8005370:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005374:	4621      	mov	r1, r4
 8005376:	028a      	lsls	r2, r1, #10
 8005378:	4610      	mov	r0, r2
 800537a:	4619      	mov	r1, r3
 800537c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800537e:	2200      	movs	r2, #0
 8005380:	60bb      	str	r3, [r7, #8]
 8005382:	60fa      	str	r2, [r7, #12]
 8005384:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005388:	f7fb fbf8 	bl	8000b7c <__aeabi_uldivmod>
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	4613      	mov	r3, r2
 8005392:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005394:	4b0b      	ldr	r3, [pc, #44]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	0c1b      	lsrs	r3, r3, #16
 800539a:	f003 0303 	and.w	r3, r3, #3
 800539e:	3301      	adds	r3, #1
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80053a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80053a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80053ae:	e002      	b.n	80053b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053b0:	4b05      	ldr	r3, [pc, #20]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80053b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80053b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3740      	adds	r7, #64	; 0x40
 80053bc:	46bd      	mov	sp, r7
 80053be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053c2:	bf00      	nop
 80053c4:	40023800 	.word	0x40023800
 80053c8:	00f42400 	.word	0x00f42400
 80053cc:	017d7840 	.word	0x017d7840

080053d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e041      	b.n	8005466 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d106      	bne.n	80053fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7fd fc5c 	bl	8002cb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	3304      	adds	r3, #4
 800540c:	4619      	mov	r1, r3
 800540e:	4610      	mov	r0, r2
 8005410:	f000 fa40 	bl	8005894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3708      	adds	r7, #8
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
	...

08005470 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b01      	cmp	r3, #1
 8005482:	d001      	beq.n	8005488 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e04e      	b.n	8005526 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68da      	ldr	r2, [r3, #12]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f042 0201 	orr.w	r2, r2, #1
 800549e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a23      	ldr	r2, [pc, #140]	; (8005534 <HAL_TIM_Base_Start_IT+0xc4>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d022      	beq.n	80054f0 <HAL_TIM_Base_Start_IT+0x80>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b2:	d01d      	beq.n	80054f0 <HAL_TIM_Base_Start_IT+0x80>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a1f      	ldr	r2, [pc, #124]	; (8005538 <HAL_TIM_Base_Start_IT+0xc8>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d018      	beq.n	80054f0 <HAL_TIM_Base_Start_IT+0x80>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a1e      	ldr	r2, [pc, #120]	; (800553c <HAL_TIM_Base_Start_IT+0xcc>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d013      	beq.n	80054f0 <HAL_TIM_Base_Start_IT+0x80>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a1c      	ldr	r2, [pc, #112]	; (8005540 <HAL_TIM_Base_Start_IT+0xd0>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d00e      	beq.n	80054f0 <HAL_TIM_Base_Start_IT+0x80>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a1b      	ldr	r2, [pc, #108]	; (8005544 <HAL_TIM_Base_Start_IT+0xd4>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d009      	beq.n	80054f0 <HAL_TIM_Base_Start_IT+0x80>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a19      	ldr	r2, [pc, #100]	; (8005548 <HAL_TIM_Base_Start_IT+0xd8>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d004      	beq.n	80054f0 <HAL_TIM_Base_Start_IT+0x80>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a18      	ldr	r2, [pc, #96]	; (800554c <HAL_TIM_Base_Start_IT+0xdc>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d111      	bne.n	8005514 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f003 0307 	and.w	r3, r3, #7
 80054fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2b06      	cmp	r3, #6
 8005500:	d010      	beq.n	8005524 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f042 0201 	orr.w	r2, r2, #1
 8005510:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005512:	e007      	b.n	8005524 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f042 0201 	orr.w	r2, r2, #1
 8005522:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	40010000 	.word	0x40010000
 8005538:	40000400 	.word	0x40000400
 800553c:	40000800 	.word	0x40000800
 8005540:	40000c00 	.word	0x40000c00
 8005544:	40010400 	.word	0x40010400
 8005548:	40014000 	.word	0x40014000
 800554c:	40001800 	.word	0x40001800

08005550 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68da      	ldr	r2, [r3, #12]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 0201 	bic.w	r2, r2, #1
 8005566:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6a1a      	ldr	r2, [r3, #32]
 800556e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005572:	4013      	ands	r3, r2
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10f      	bne.n	8005598 <HAL_TIM_Base_Stop_IT+0x48>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6a1a      	ldr	r2, [r3, #32]
 800557e:	f240 4344 	movw	r3, #1092	; 0x444
 8005582:	4013      	ands	r3, r2
 8005584:	2b00      	cmp	r3, #0
 8005586:	d107      	bne.n	8005598 <HAL_TIM_Base_Stop_IT+0x48>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0201 	bic.w	r2, r2, #1
 8005596:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b082      	sub	sp, #8
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	f003 0302 	and.w	r3, r3, #2
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d122      	bne.n	800560a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d11b      	bne.n	800560a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f06f 0202 	mvn.w	r2, #2
 80055da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	f003 0303 	and.w	r3, r3, #3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d003      	beq.n	80055f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 f930 	bl	8005856 <HAL_TIM_IC_CaptureCallback>
 80055f6:	e005      	b.n	8005604 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f922 	bl	8005842 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f933 	bl	800586a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	f003 0304 	and.w	r3, r3, #4
 8005614:	2b04      	cmp	r3, #4
 8005616:	d122      	bne.n	800565e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	f003 0304 	and.w	r3, r3, #4
 8005622:	2b04      	cmp	r3, #4
 8005624:	d11b      	bne.n	800565e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f06f 0204 	mvn.w	r2, #4
 800562e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2202      	movs	r2, #2
 8005634:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005640:	2b00      	cmp	r3, #0
 8005642:	d003      	beq.n	800564c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 f906 	bl	8005856 <HAL_TIM_IC_CaptureCallback>
 800564a:	e005      	b.n	8005658 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 f8f8 	bl	8005842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f909 	bl	800586a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	f003 0308 	and.w	r3, r3, #8
 8005668:	2b08      	cmp	r3, #8
 800566a:	d122      	bne.n	80056b2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	f003 0308 	and.w	r3, r3, #8
 8005676:	2b08      	cmp	r3, #8
 8005678:	d11b      	bne.n	80056b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f06f 0208 	mvn.w	r2, #8
 8005682:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2204      	movs	r2, #4
 8005688:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	f003 0303 	and.w	r3, r3, #3
 8005694:	2b00      	cmp	r3, #0
 8005696:	d003      	beq.n	80056a0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 f8dc 	bl	8005856 <HAL_TIM_IC_CaptureCallback>
 800569e:	e005      	b.n	80056ac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 f8ce 	bl	8005842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f8df 	bl	800586a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	f003 0310 	and.w	r3, r3, #16
 80056bc:	2b10      	cmp	r3, #16
 80056be:	d122      	bne.n	8005706 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	f003 0310 	and.w	r3, r3, #16
 80056ca:	2b10      	cmp	r3, #16
 80056cc:	d11b      	bne.n	8005706 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f06f 0210 	mvn.w	r2, #16
 80056d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2208      	movs	r2, #8
 80056dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	69db      	ldr	r3, [r3, #28]
 80056e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d003      	beq.n	80056f4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 f8b2 	bl	8005856 <HAL_TIM_IC_CaptureCallback>
 80056f2:	e005      	b.n	8005700 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 f8a4 	bl	8005842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f8b5 	bl	800586a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	2b01      	cmp	r3, #1
 8005712:	d10e      	bne.n	8005732 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b01      	cmp	r3, #1
 8005720:	d107      	bne.n	8005732 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f06f 0201 	mvn.w	r2, #1
 800572a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f7fc fe05 	bl	800233c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800573c:	2b80      	cmp	r3, #128	; 0x80
 800573e:	d10e      	bne.n	800575e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800574a:	2b80      	cmp	r3, #128	; 0x80
 800574c:	d107      	bne.n	800575e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 fad1 	bl	8005d00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005768:	2b40      	cmp	r3, #64	; 0x40
 800576a:	d10e      	bne.n	800578a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005776:	2b40      	cmp	r3, #64	; 0x40
 8005778:	d107      	bne.n	800578a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 f87a 	bl	800587e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	f003 0320 	and.w	r3, r3, #32
 8005794:	2b20      	cmp	r3, #32
 8005796:	d10e      	bne.n	80057b6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	f003 0320 	and.w	r3, r3, #32
 80057a2:	2b20      	cmp	r3, #32
 80057a4:	d107      	bne.n	80057b6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f06f 0220 	mvn.w	r2, #32
 80057ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 fa9b 	bl	8005cec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057b6:	bf00      	nop
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b082      	sub	sp, #8
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
 80057c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d101      	bne.n	80057d6 <HAL_TIM_SlaveConfigSynchro+0x18>
 80057d2:	2302      	movs	r3, #2
 80057d4:	e031      	b.n	800583a <HAL_TIM_SlaveConfigSynchro+0x7c>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2202      	movs	r2, #2
 80057e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80057e6:	6839      	ldr	r1, [r7, #0]
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 f8f3 	bl	80059d4 <TIM_SlaveTimer_SetConfig>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d009      	beq.n	8005808 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e018      	b.n	800583a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68da      	ldr	r2, [r3, #12]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005816:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68da      	ldr	r2, [r3, #12]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005826:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005842:	b480      	push	{r7}
 8005844:	b083      	sub	sp, #12
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800584a:	bf00      	nop
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005856:	b480      	push	{r7}
 8005858:	b083      	sub	sp, #12
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800585e:	bf00      	nop
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800586a:	b480      	push	{r7}
 800586c:	b083      	sub	sp, #12
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005872:	bf00      	nop
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800587e:	b480      	push	{r7}
 8005880:	b083      	sub	sp, #12
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005886:	bf00      	nop
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
	...

08005894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a40      	ldr	r2, [pc, #256]	; (80059a8 <TIM_Base_SetConfig+0x114>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d013      	beq.n	80058d4 <TIM_Base_SetConfig+0x40>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b2:	d00f      	beq.n	80058d4 <TIM_Base_SetConfig+0x40>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a3d      	ldr	r2, [pc, #244]	; (80059ac <TIM_Base_SetConfig+0x118>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d00b      	beq.n	80058d4 <TIM_Base_SetConfig+0x40>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a3c      	ldr	r2, [pc, #240]	; (80059b0 <TIM_Base_SetConfig+0x11c>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d007      	beq.n	80058d4 <TIM_Base_SetConfig+0x40>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a3b      	ldr	r2, [pc, #236]	; (80059b4 <TIM_Base_SetConfig+0x120>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d003      	beq.n	80058d4 <TIM_Base_SetConfig+0x40>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a3a      	ldr	r2, [pc, #232]	; (80059b8 <TIM_Base_SetConfig+0x124>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d108      	bne.n	80058e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a2f      	ldr	r2, [pc, #188]	; (80059a8 <TIM_Base_SetConfig+0x114>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d02b      	beq.n	8005946 <TIM_Base_SetConfig+0xb2>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058f4:	d027      	beq.n	8005946 <TIM_Base_SetConfig+0xb2>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a2c      	ldr	r2, [pc, #176]	; (80059ac <TIM_Base_SetConfig+0x118>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d023      	beq.n	8005946 <TIM_Base_SetConfig+0xb2>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a2b      	ldr	r2, [pc, #172]	; (80059b0 <TIM_Base_SetConfig+0x11c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d01f      	beq.n	8005946 <TIM_Base_SetConfig+0xb2>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a2a      	ldr	r2, [pc, #168]	; (80059b4 <TIM_Base_SetConfig+0x120>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d01b      	beq.n	8005946 <TIM_Base_SetConfig+0xb2>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a29      	ldr	r2, [pc, #164]	; (80059b8 <TIM_Base_SetConfig+0x124>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d017      	beq.n	8005946 <TIM_Base_SetConfig+0xb2>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a28      	ldr	r2, [pc, #160]	; (80059bc <TIM_Base_SetConfig+0x128>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d013      	beq.n	8005946 <TIM_Base_SetConfig+0xb2>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a27      	ldr	r2, [pc, #156]	; (80059c0 <TIM_Base_SetConfig+0x12c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d00f      	beq.n	8005946 <TIM_Base_SetConfig+0xb2>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a26      	ldr	r2, [pc, #152]	; (80059c4 <TIM_Base_SetConfig+0x130>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d00b      	beq.n	8005946 <TIM_Base_SetConfig+0xb2>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a25      	ldr	r2, [pc, #148]	; (80059c8 <TIM_Base_SetConfig+0x134>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d007      	beq.n	8005946 <TIM_Base_SetConfig+0xb2>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a24      	ldr	r2, [pc, #144]	; (80059cc <TIM_Base_SetConfig+0x138>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d003      	beq.n	8005946 <TIM_Base_SetConfig+0xb2>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a23      	ldr	r2, [pc, #140]	; (80059d0 <TIM_Base_SetConfig+0x13c>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d108      	bne.n	8005958 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800594c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	4313      	orrs	r3, r2
 8005956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	689a      	ldr	r2, [r3, #8]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a0a      	ldr	r2, [pc, #40]	; (80059a8 <TIM_Base_SetConfig+0x114>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d003      	beq.n	800598c <TIM_Base_SetConfig+0xf8>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a0c      	ldr	r2, [pc, #48]	; (80059b8 <TIM_Base_SetConfig+0x124>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d103      	bne.n	8005994 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	691a      	ldr	r2, [r3, #16]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	615a      	str	r2, [r3, #20]
}
 800599a:	bf00      	nop
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	40010000 	.word	0x40010000
 80059ac:	40000400 	.word	0x40000400
 80059b0:	40000800 	.word	0x40000800
 80059b4:	40000c00 	.word	0x40000c00
 80059b8:	40010400 	.word	0x40010400
 80059bc:	40014000 	.word	0x40014000
 80059c0:	40014400 	.word	0x40014400
 80059c4:	40014800 	.word	0x40014800
 80059c8:	40001800 	.word	0x40001800
 80059cc:	40001c00 	.word	0x40001c00
 80059d0:	40002000 	.word	0x40002000

080059d4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059de:	2300      	movs	r3, #0
 80059e0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	f023 0307 	bic.w	r3, r3, #7
 8005a02:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	2b70      	cmp	r3, #112	; 0x70
 8005a1c:	d01a      	beq.n	8005a54 <TIM_SlaveTimer_SetConfig+0x80>
 8005a1e:	2b70      	cmp	r3, #112	; 0x70
 8005a20:	d860      	bhi.n	8005ae4 <TIM_SlaveTimer_SetConfig+0x110>
 8005a22:	2b60      	cmp	r3, #96	; 0x60
 8005a24:	d054      	beq.n	8005ad0 <TIM_SlaveTimer_SetConfig+0xfc>
 8005a26:	2b60      	cmp	r3, #96	; 0x60
 8005a28:	d85c      	bhi.n	8005ae4 <TIM_SlaveTimer_SetConfig+0x110>
 8005a2a:	2b50      	cmp	r3, #80	; 0x50
 8005a2c:	d046      	beq.n	8005abc <TIM_SlaveTimer_SetConfig+0xe8>
 8005a2e:	2b50      	cmp	r3, #80	; 0x50
 8005a30:	d858      	bhi.n	8005ae4 <TIM_SlaveTimer_SetConfig+0x110>
 8005a32:	2b40      	cmp	r3, #64	; 0x40
 8005a34:	d019      	beq.n	8005a6a <TIM_SlaveTimer_SetConfig+0x96>
 8005a36:	2b40      	cmp	r3, #64	; 0x40
 8005a38:	d854      	bhi.n	8005ae4 <TIM_SlaveTimer_SetConfig+0x110>
 8005a3a:	2b30      	cmp	r3, #48	; 0x30
 8005a3c:	d055      	beq.n	8005aea <TIM_SlaveTimer_SetConfig+0x116>
 8005a3e:	2b30      	cmp	r3, #48	; 0x30
 8005a40:	d850      	bhi.n	8005ae4 <TIM_SlaveTimer_SetConfig+0x110>
 8005a42:	2b20      	cmp	r3, #32
 8005a44:	d051      	beq.n	8005aea <TIM_SlaveTimer_SetConfig+0x116>
 8005a46:	2b20      	cmp	r3, #32
 8005a48:	d84c      	bhi.n	8005ae4 <TIM_SlaveTimer_SetConfig+0x110>
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d04d      	beq.n	8005aea <TIM_SlaveTimer_SetConfig+0x116>
 8005a4e:	2b10      	cmp	r3, #16
 8005a50:	d04b      	beq.n	8005aea <TIM_SlaveTimer_SetConfig+0x116>
 8005a52:	e047      	b.n	8005ae4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6818      	ldr	r0, [r3, #0]
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	68d9      	ldr	r1, [r3, #12]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	689a      	ldr	r2, [r3, #8]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	f000 f8a6 	bl	8005bb4 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8005a68:	e040      	b.n	8005aec <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b05      	cmp	r3, #5
 8005a70:	d101      	bne.n	8005a76 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e03b      	b.n	8005aee <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
 8005a7c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6a1a      	ldr	r2, [r3, #32]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 0201 	bic.w	r2, r2, #1
 8005a8c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a9c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	011b      	lsls	r3, r3, #4
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	621a      	str	r2, [r3, #32]
      break;
 8005aba:	e017      	b.n	8005aec <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6818      	ldr	r0, [r3, #0]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	6899      	ldr	r1, [r3, #8]
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	461a      	mov	r2, r3
 8005aca:	f000 f814 	bl	8005af6 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005ace:	e00d      	b.n	8005aec <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6818      	ldr	r0, [r3, #0]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	6899      	ldr	r1, [r3, #8]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	461a      	mov	r2, r3
 8005ade:	f000 f839 	bl	8005b54 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005ae2:	e003      	b.n	8005aec <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ae8:	e000      	b.n	8005aec <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005aea:	bf00      	nop
  }

  return status;
 8005aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b087      	sub	sp, #28
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	60f8      	str	r0, [r7, #12]
 8005afe:	60b9      	str	r1, [r7, #8]
 8005b00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6a1b      	ldr	r3, [r3, #32]
 8005b0c:	f023 0201 	bic.w	r2, r3, #1
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	011b      	lsls	r3, r3, #4
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f023 030a 	bic.w	r3, r3, #10
 8005b32:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	621a      	str	r2, [r3, #32]
}
 8005b48:	bf00      	nop
 8005b4a:	371c      	adds	r7, #28
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b087      	sub	sp, #28
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	f023 0210 	bic.w	r2, r3, #16
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b7e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	031b      	lsls	r3, r3, #12
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b90:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	011b      	lsls	r3, r3, #4
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	621a      	str	r2, [r3, #32]
}
 8005ba8:	bf00      	nop
 8005baa:	371c      	adds	r7, #28
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b087      	sub	sp, #28
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
 8005bc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	021a      	lsls	r2, r3, #8
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	609a      	str	r2, [r3, #8]
}
 8005be8:	bf00      	nop
 8005bea:	371c      	adds	r7, #28
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d101      	bne.n	8005c0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c08:	2302      	movs	r3, #2
 8005c0a:	e05a      	b.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2202      	movs	r2, #2
 8005c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a21      	ldr	r2, [pc, #132]	; (8005cd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d022      	beq.n	8005c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c58:	d01d      	beq.n	8005c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a1d      	ldr	r2, [pc, #116]	; (8005cd4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d018      	beq.n	8005c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a1b      	ldr	r2, [pc, #108]	; (8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d013      	beq.n	8005c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a1a      	ldr	r2, [pc, #104]	; (8005cdc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d00e      	beq.n	8005c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a18      	ldr	r2, [pc, #96]	; (8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d009      	beq.n	8005c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a17      	ldr	r2, [pc, #92]	; (8005ce4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d004      	beq.n	8005c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a15      	ldr	r2, [pc, #84]	; (8005ce8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d10c      	bne.n	8005cb0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	40010000 	.word	0x40010000
 8005cd4:	40000400 	.word	0x40000400
 8005cd8:	40000800 	.word	0x40000800
 8005cdc:	40000c00 	.word	0x40000c00
 8005ce0:	40010400 	.word	0x40010400
 8005ce4:	40014000 	.word	0x40014000
 8005ce8:	40001800 	.word	0x40001800

08005cec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <memset>:
 8005d14:	4402      	add	r2, r0
 8005d16:	4603      	mov	r3, r0
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d100      	bne.n	8005d1e <memset+0xa>
 8005d1c:	4770      	bx	lr
 8005d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d22:	e7f9      	b.n	8005d18 <memset+0x4>

08005d24 <__libc_init_array>:
 8005d24:	b570      	push	{r4, r5, r6, lr}
 8005d26:	4d0d      	ldr	r5, [pc, #52]	; (8005d5c <__libc_init_array+0x38>)
 8005d28:	4c0d      	ldr	r4, [pc, #52]	; (8005d60 <__libc_init_array+0x3c>)
 8005d2a:	1b64      	subs	r4, r4, r5
 8005d2c:	10a4      	asrs	r4, r4, #2
 8005d2e:	2600      	movs	r6, #0
 8005d30:	42a6      	cmp	r6, r4
 8005d32:	d109      	bne.n	8005d48 <__libc_init_array+0x24>
 8005d34:	4d0b      	ldr	r5, [pc, #44]	; (8005d64 <__libc_init_array+0x40>)
 8005d36:	4c0c      	ldr	r4, [pc, #48]	; (8005d68 <__libc_init_array+0x44>)
 8005d38:	f000 f818 	bl	8005d6c <_init>
 8005d3c:	1b64      	subs	r4, r4, r5
 8005d3e:	10a4      	asrs	r4, r4, #2
 8005d40:	2600      	movs	r6, #0
 8005d42:	42a6      	cmp	r6, r4
 8005d44:	d105      	bne.n	8005d52 <__libc_init_array+0x2e>
 8005d46:	bd70      	pop	{r4, r5, r6, pc}
 8005d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d4c:	4798      	blx	r3
 8005d4e:	3601      	adds	r6, #1
 8005d50:	e7ee      	b.n	8005d30 <__libc_init_array+0xc>
 8005d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d56:	4798      	blx	r3
 8005d58:	3601      	adds	r6, #1
 8005d5a:	e7f2      	b.n	8005d42 <__libc_init_array+0x1e>
 8005d5c:	08005d9c 	.word	0x08005d9c
 8005d60:	08005d9c 	.word	0x08005d9c
 8005d64:	08005d9c 	.word	0x08005d9c
 8005d68:	08005da0 	.word	0x08005da0

08005d6c <_init>:
 8005d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d6e:	bf00      	nop
 8005d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d72:	bc08      	pop	{r3}
 8005d74:	469e      	mov	lr, r3
 8005d76:	4770      	bx	lr

08005d78 <_fini>:
 8005d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d7a:	bf00      	nop
 8005d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d7e:	bc08      	pop	{r3}
 8005d80:	469e      	mov	lr, r3
 8005d82:	4770      	bx	lr
