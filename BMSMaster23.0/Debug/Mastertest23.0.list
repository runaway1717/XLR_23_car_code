
Mastertest23.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056cc  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800587c  0800587c  0001587c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800588c  0800588c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  0800588c  0800588c  0001588c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005894  08005894  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005894  08005894  00015894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005898  08005898  00015898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800589c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00000b14  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b30  20000b30  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c9be  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001bf1  00000000  00000000  0002ca4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c80  00000000  00000000  0002e640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009af  00000000  00000000  0002f2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002481e  00000000  00000000  0002fc6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d97d  00000000  00000000  0005448d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e6559  00000000  00000000  00061e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000035ec  00000000  00000000  00148364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0014b950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005864 	.word	0x08005864

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000020 	.word	0x20000020
 80001ec:	08005864 	.word	0x08005864

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2f>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000994:	bf24      	itt	cs
 8000996:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800099a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800099e:	d90d      	bls.n	80009bc <__aeabi_d2f+0x30>
 80009a0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009b4:	bf08      	it	eq
 80009b6:	f020 0001 	biceq.w	r0, r0, #1
 80009ba:	4770      	bx	lr
 80009bc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009c0:	d121      	bne.n	8000a06 <__aeabi_d2f+0x7a>
 80009c2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009c6:	bfbc      	itt	lt
 80009c8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009cc:	4770      	bxlt	lr
 80009ce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009d6:	f1c2 0218 	rsb	r2, r2, #24
 80009da:	f1c2 0c20 	rsb	ip, r2, #32
 80009de:	fa10 f30c 	lsls.w	r3, r0, ip
 80009e2:	fa20 f002 	lsr.w	r0, r0, r2
 80009e6:	bf18      	it	ne
 80009e8:	f040 0001 	orrne.w	r0, r0, #1
 80009ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f8:	ea40 000c 	orr.w	r0, r0, ip
 80009fc:	fa23 f302 	lsr.w	r3, r3, r2
 8000a00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a04:	e7cc      	b.n	80009a0 <__aeabi_d2f+0x14>
 8000a06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a0a:	d107      	bne.n	8000a1c <__aeabi_d2f+0x90>
 8000a0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a10:	bf1e      	ittt	ne
 8000a12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a1a:	4770      	bxne	lr
 8000a1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop

08000a2c <__aeabi_uldivmod>:
 8000a2c:	b953      	cbnz	r3, 8000a44 <__aeabi_uldivmod+0x18>
 8000a2e:	b94a      	cbnz	r2, 8000a44 <__aeabi_uldivmod+0x18>
 8000a30:	2900      	cmp	r1, #0
 8000a32:	bf08      	it	eq
 8000a34:	2800      	cmpeq	r0, #0
 8000a36:	bf1c      	itt	ne
 8000a38:	f04f 31ff 	movne.w	r1, #4294967295
 8000a3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a40:	f000 b970 	b.w	8000d24 <__aeabi_idiv0>
 8000a44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a4c:	f000 f806 	bl	8000a5c <__udivmoddi4>
 8000a50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a58:	b004      	add	sp, #16
 8000a5a:	4770      	bx	lr

08000a5c <__udivmoddi4>:
 8000a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a60:	9e08      	ldr	r6, [sp, #32]
 8000a62:	460d      	mov	r5, r1
 8000a64:	4604      	mov	r4, r0
 8000a66:	460f      	mov	r7, r1
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d14a      	bne.n	8000b02 <__udivmoddi4+0xa6>
 8000a6c:	428a      	cmp	r2, r1
 8000a6e:	4694      	mov	ip, r2
 8000a70:	d965      	bls.n	8000b3e <__udivmoddi4+0xe2>
 8000a72:	fab2 f382 	clz	r3, r2
 8000a76:	b143      	cbz	r3, 8000a8a <__udivmoddi4+0x2e>
 8000a78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a7c:	f1c3 0220 	rsb	r2, r3, #32
 8000a80:	409f      	lsls	r7, r3
 8000a82:	fa20 f202 	lsr.w	r2, r0, r2
 8000a86:	4317      	orrs	r7, r2
 8000a88:	409c      	lsls	r4, r3
 8000a8a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a8e:	fa1f f58c 	uxth.w	r5, ip
 8000a92:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a96:	0c22      	lsrs	r2, r4, #16
 8000a98:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a9c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000aa0:	fb01 f005 	mul.w	r0, r1, r5
 8000aa4:	4290      	cmp	r0, r2
 8000aa6:	d90a      	bls.n	8000abe <__udivmoddi4+0x62>
 8000aa8:	eb1c 0202 	adds.w	r2, ip, r2
 8000aac:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ab0:	f080 811c 	bcs.w	8000cec <__udivmoddi4+0x290>
 8000ab4:	4290      	cmp	r0, r2
 8000ab6:	f240 8119 	bls.w	8000cec <__udivmoddi4+0x290>
 8000aba:	3902      	subs	r1, #2
 8000abc:	4462      	add	r2, ip
 8000abe:	1a12      	subs	r2, r2, r0
 8000ac0:	b2a4      	uxth	r4, r4
 8000ac2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ac6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ace:	fb00 f505 	mul.w	r5, r0, r5
 8000ad2:	42a5      	cmp	r5, r4
 8000ad4:	d90a      	bls.n	8000aec <__udivmoddi4+0x90>
 8000ad6:	eb1c 0404 	adds.w	r4, ip, r4
 8000ada:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ade:	f080 8107 	bcs.w	8000cf0 <__udivmoddi4+0x294>
 8000ae2:	42a5      	cmp	r5, r4
 8000ae4:	f240 8104 	bls.w	8000cf0 <__udivmoddi4+0x294>
 8000ae8:	4464      	add	r4, ip
 8000aea:	3802      	subs	r0, #2
 8000aec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000af0:	1b64      	subs	r4, r4, r5
 8000af2:	2100      	movs	r1, #0
 8000af4:	b11e      	cbz	r6, 8000afe <__udivmoddi4+0xa2>
 8000af6:	40dc      	lsrs	r4, r3
 8000af8:	2300      	movs	r3, #0
 8000afa:	e9c6 4300 	strd	r4, r3, [r6]
 8000afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b02:	428b      	cmp	r3, r1
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0xbc>
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	f000 80ed 	beq.w	8000ce6 <__udivmoddi4+0x28a>
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b12:	4608      	mov	r0, r1
 8000b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b18:	fab3 f183 	clz	r1, r3
 8000b1c:	2900      	cmp	r1, #0
 8000b1e:	d149      	bne.n	8000bb4 <__udivmoddi4+0x158>
 8000b20:	42ab      	cmp	r3, r5
 8000b22:	d302      	bcc.n	8000b2a <__udivmoddi4+0xce>
 8000b24:	4282      	cmp	r2, r0
 8000b26:	f200 80f8 	bhi.w	8000d1a <__udivmoddi4+0x2be>
 8000b2a:	1a84      	subs	r4, r0, r2
 8000b2c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b30:	2001      	movs	r0, #1
 8000b32:	4617      	mov	r7, r2
 8000b34:	2e00      	cmp	r6, #0
 8000b36:	d0e2      	beq.n	8000afe <__udivmoddi4+0xa2>
 8000b38:	e9c6 4700 	strd	r4, r7, [r6]
 8000b3c:	e7df      	b.n	8000afe <__udivmoddi4+0xa2>
 8000b3e:	b902      	cbnz	r2, 8000b42 <__udivmoddi4+0xe6>
 8000b40:	deff      	udf	#255	; 0xff
 8000b42:	fab2 f382 	clz	r3, r2
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f040 8090 	bne.w	8000c6c <__udivmoddi4+0x210>
 8000b4c:	1a8a      	subs	r2, r1, r2
 8000b4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b52:	fa1f fe8c 	uxth.w	lr, ip
 8000b56:	2101      	movs	r1, #1
 8000b58:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b5c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b60:	0c22      	lsrs	r2, r4, #16
 8000b62:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b66:	fb0e f005 	mul.w	r0, lr, r5
 8000b6a:	4290      	cmp	r0, r2
 8000b6c:	d908      	bls.n	8000b80 <__udivmoddi4+0x124>
 8000b6e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b72:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x122>
 8000b78:	4290      	cmp	r0, r2
 8000b7a:	f200 80cb 	bhi.w	8000d14 <__udivmoddi4+0x2b8>
 8000b7e:	4645      	mov	r5, r8
 8000b80:	1a12      	subs	r2, r2, r0
 8000b82:	b2a4      	uxth	r4, r4
 8000b84:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b88:	fb07 2210 	mls	r2, r7, r0, r2
 8000b8c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b90:	fb0e fe00 	mul.w	lr, lr, r0
 8000b94:	45a6      	cmp	lr, r4
 8000b96:	d908      	bls.n	8000baa <__udivmoddi4+0x14e>
 8000b98:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ba0:	d202      	bcs.n	8000ba8 <__udivmoddi4+0x14c>
 8000ba2:	45a6      	cmp	lr, r4
 8000ba4:	f200 80bb 	bhi.w	8000d1e <__udivmoddi4+0x2c2>
 8000ba8:	4610      	mov	r0, r2
 8000baa:	eba4 040e 	sub.w	r4, r4, lr
 8000bae:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bb2:	e79f      	b.n	8000af4 <__udivmoddi4+0x98>
 8000bb4:	f1c1 0720 	rsb	r7, r1, #32
 8000bb8:	408b      	lsls	r3, r1
 8000bba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bbe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bc2:	fa05 f401 	lsl.w	r4, r5, r1
 8000bc6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bca:	40fd      	lsrs	r5, r7
 8000bcc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bd0:	4323      	orrs	r3, r4
 8000bd2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bd6:	fa1f fe8c 	uxth.w	lr, ip
 8000bda:	fb09 5518 	mls	r5, r9, r8, r5
 8000bde:	0c1c      	lsrs	r4, r3, #16
 8000be0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000be4:	fb08 f50e 	mul.w	r5, r8, lr
 8000be8:	42a5      	cmp	r5, r4
 8000bea:	fa02 f201 	lsl.w	r2, r2, r1
 8000bee:	fa00 f001 	lsl.w	r0, r0, r1
 8000bf2:	d90b      	bls.n	8000c0c <__udivmoddi4+0x1b0>
 8000bf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bfc:	f080 8088 	bcs.w	8000d10 <__udivmoddi4+0x2b4>
 8000c00:	42a5      	cmp	r5, r4
 8000c02:	f240 8085 	bls.w	8000d10 <__udivmoddi4+0x2b4>
 8000c06:	f1a8 0802 	sub.w	r8, r8, #2
 8000c0a:	4464      	add	r4, ip
 8000c0c:	1b64      	subs	r4, r4, r5
 8000c0e:	b29d      	uxth	r5, r3
 8000c10:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c14:	fb09 4413 	mls	r4, r9, r3, r4
 8000c18:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c1c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c20:	45a6      	cmp	lr, r4
 8000c22:	d908      	bls.n	8000c36 <__udivmoddi4+0x1da>
 8000c24:	eb1c 0404 	adds.w	r4, ip, r4
 8000c28:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c2c:	d26c      	bcs.n	8000d08 <__udivmoddi4+0x2ac>
 8000c2e:	45a6      	cmp	lr, r4
 8000c30:	d96a      	bls.n	8000d08 <__udivmoddi4+0x2ac>
 8000c32:	3b02      	subs	r3, #2
 8000c34:	4464      	add	r4, ip
 8000c36:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c3e:	eba4 040e 	sub.w	r4, r4, lr
 8000c42:	42ac      	cmp	r4, r5
 8000c44:	46c8      	mov	r8, r9
 8000c46:	46ae      	mov	lr, r5
 8000c48:	d356      	bcc.n	8000cf8 <__udivmoddi4+0x29c>
 8000c4a:	d053      	beq.n	8000cf4 <__udivmoddi4+0x298>
 8000c4c:	b156      	cbz	r6, 8000c64 <__udivmoddi4+0x208>
 8000c4e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c52:	eb64 040e 	sbc.w	r4, r4, lr
 8000c56:	fa04 f707 	lsl.w	r7, r4, r7
 8000c5a:	40ca      	lsrs	r2, r1
 8000c5c:	40cc      	lsrs	r4, r1
 8000c5e:	4317      	orrs	r7, r2
 8000c60:	e9c6 7400 	strd	r7, r4, [r6]
 8000c64:	4618      	mov	r0, r3
 8000c66:	2100      	movs	r1, #0
 8000c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6c:	f1c3 0120 	rsb	r1, r3, #32
 8000c70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c74:	fa20 f201 	lsr.w	r2, r0, r1
 8000c78:	fa25 f101 	lsr.w	r1, r5, r1
 8000c7c:	409d      	lsls	r5, r3
 8000c7e:	432a      	orrs	r2, r5
 8000c80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c84:	fa1f fe8c 	uxth.w	lr, ip
 8000c88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c8c:	fb07 1510 	mls	r5, r7, r0, r1
 8000c90:	0c11      	lsrs	r1, r2, #16
 8000c92:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c96:	fb00 f50e 	mul.w	r5, r0, lr
 8000c9a:	428d      	cmp	r5, r1
 8000c9c:	fa04 f403 	lsl.w	r4, r4, r3
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x258>
 8000ca2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000caa:	d22f      	bcs.n	8000d0c <__udivmoddi4+0x2b0>
 8000cac:	428d      	cmp	r5, r1
 8000cae:	d92d      	bls.n	8000d0c <__udivmoddi4+0x2b0>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	4461      	add	r1, ip
 8000cb4:	1b49      	subs	r1, r1, r5
 8000cb6:	b292      	uxth	r2, r2
 8000cb8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cbc:	fb07 1115 	mls	r1, r7, r5, r1
 8000cc0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cc4:	fb05 f10e 	mul.w	r1, r5, lr
 8000cc8:	4291      	cmp	r1, r2
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x282>
 8000ccc:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cd4:	d216      	bcs.n	8000d04 <__udivmoddi4+0x2a8>
 8000cd6:	4291      	cmp	r1, r2
 8000cd8:	d914      	bls.n	8000d04 <__udivmoddi4+0x2a8>
 8000cda:	3d02      	subs	r5, #2
 8000cdc:	4462      	add	r2, ip
 8000cde:	1a52      	subs	r2, r2, r1
 8000ce0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ce4:	e738      	b.n	8000b58 <__udivmoddi4+0xfc>
 8000ce6:	4631      	mov	r1, r6
 8000ce8:	4630      	mov	r0, r6
 8000cea:	e708      	b.n	8000afe <__udivmoddi4+0xa2>
 8000cec:	4639      	mov	r1, r7
 8000cee:	e6e6      	b.n	8000abe <__udivmoddi4+0x62>
 8000cf0:	4610      	mov	r0, r2
 8000cf2:	e6fb      	b.n	8000aec <__udivmoddi4+0x90>
 8000cf4:	4548      	cmp	r0, r9
 8000cf6:	d2a9      	bcs.n	8000c4c <__udivmoddi4+0x1f0>
 8000cf8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cfc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d00:	3b01      	subs	r3, #1
 8000d02:	e7a3      	b.n	8000c4c <__udivmoddi4+0x1f0>
 8000d04:	4645      	mov	r5, r8
 8000d06:	e7ea      	b.n	8000cde <__udivmoddi4+0x282>
 8000d08:	462b      	mov	r3, r5
 8000d0a:	e794      	b.n	8000c36 <__udivmoddi4+0x1da>
 8000d0c:	4640      	mov	r0, r8
 8000d0e:	e7d1      	b.n	8000cb4 <__udivmoddi4+0x258>
 8000d10:	46d0      	mov	r8, sl
 8000d12:	e77b      	b.n	8000c0c <__udivmoddi4+0x1b0>
 8000d14:	3d02      	subs	r5, #2
 8000d16:	4462      	add	r2, ip
 8000d18:	e732      	b.n	8000b80 <__udivmoddi4+0x124>
 8000d1a:	4608      	mov	r0, r1
 8000d1c:	e70a      	b.n	8000b34 <__udivmoddi4+0xd8>
 8000d1e:	4464      	add	r4, ip
 8000d20:	3802      	subs	r0, #2
 8000d22:	e742      	b.n	8000baa <__udivmoddi4+0x14e>

08000d24 <__aeabi_idiv0>:
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d2c:	f001 fea4 	bl	8002a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d30:	f000 f82a 	bl	8000d88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d34:	f000 faa4 	bl	8001280 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000d38:	f000 f92a 	bl	8000f90 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000d3c:	f000 f95e 	bl	8000ffc <MX_CAN2_Init>
  MX_ADC3_Init();
 8000d40:	f000 f8d4 	bl	8000eec <MX_ADC3_Init>
  MX_TIM2_Init();
 8000d44:	f000 f990 	bl	8001068 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d48:	f000 f9da 	bl	8001100 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d4c:	f000 fa26 	bl	800119c <MX_TIM4_Init>
  MX_ADC1_Init();
 8000d50:	f000 f87a 	bl	8000e48 <MX_ADC1_Init>
  MX_TIM10_Init();
 8000d54:	f000 fa70 	bl	8001238 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  CANStart();
 8000d58:	f000 fb20 	bl	800139c <CANStart>


  HAL_TIM_Base_Start_IT(&htim2);
 8000d5c:	4806      	ldr	r0, [pc, #24]	; (8000d78 <main+0x50>)
 8000d5e:	f004 f923 	bl	8004fa8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000d62:	4806      	ldr	r0, [pc, #24]	; (8000d7c <main+0x54>)
 8000d64:	f004 f920 	bl	8004fa8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000d68:	4805      	ldr	r0, [pc, #20]	; (8000d80 <main+0x58>)
 8000d6a:	f004 f91d 	bl	8004fa8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <main+0x5c>)
 8000d70:	f004 f91a 	bl	8004fa8 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <main+0x4c>
 8000d76:	bf00      	nop
 8000d78:	20000118 	.word	0x20000118
 8000d7c:	20000160 	.word	0x20000160
 8000d80:	200001a8 	.word	0x200001a8
 8000d84:	200001f0 	.word	0x200001f0

08000d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b094      	sub	sp, #80	; 0x50
 8000d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8e:	f107 0320 	add.w	r3, r7, #32
 8000d92:	2230      	movs	r2, #48	; 0x30
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f004 fd38 	bl	800580c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d9c:	f107 030c 	add.w	r3, r7, #12
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dac:	2300      	movs	r3, #0
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	4b23      	ldr	r3, [pc, #140]	; (8000e40 <SystemClock_Config+0xb8>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db4:	4a22      	ldr	r2, [pc, #136]	; (8000e40 <SystemClock_Config+0xb8>)
 8000db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dba:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbc:	4b20      	ldr	r3, [pc, #128]	; (8000e40 <SystemClock_Config+0xb8>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000dc8:	2300      	movs	r3, #0
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <SystemClock_Config+0xbc>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dd4:	4a1b      	ldr	r2, [pc, #108]	; (8000e44 <SystemClock_Config+0xbc>)
 8000dd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dda:	6013      	str	r3, [r2, #0]
 8000ddc:	4b19      	ldr	r3, [pc, #100]	; (8000e44 <SystemClock_Config+0xbc>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000de8:	2302      	movs	r3, #2
 8000dea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dec:	2301      	movs	r3, #1
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000df0:	2310      	movs	r3, #16
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000df4:	2300      	movs	r3, #0
 8000df6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df8:	f107 0320 	add.w	r3, r7, #32
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f003 fc5f 	bl	80046c0 <HAL_RCC_OscConfig>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000e08:	f001 fb4b 	bl	80024a2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e10:	2300      	movs	r3, #0
 8000e12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f003 fec2 	bl	8004bb0 <HAL_RCC_ClockConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e32:	f001 fb36 	bl	80024a2 <Error_Handler>
  }
}
 8000e36:	bf00      	nop
 8000e38:	3750      	adds	r7, #80	; 0x50
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40007000 	.word	0x40007000

08000e48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e4e:	463b      	mov	r3, r7
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e5a:	4b21      	ldr	r3, [pc, #132]	; (8000ee0 <MX_ADC1_Init+0x98>)
 8000e5c:	4a21      	ldr	r2, [pc, #132]	; (8000ee4 <MX_ADC1_Init+0x9c>)
 8000e5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e60:	4b1f      	ldr	r3, [pc, #124]	; (8000ee0 <MX_ADC1_Init+0x98>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e66:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <MX_ADC1_Init+0x98>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <MX_ADC1_Init+0x98>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e72:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <MX_ADC1_Init+0x98>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e78:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <MX_ADC1_Init+0x98>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e80:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <MX_ADC1_Init+0x98>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e86:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <MX_ADC1_Init+0x98>)
 8000e88:	4a17      	ldr	r2, [pc, #92]	; (8000ee8 <MX_ADC1_Init+0xa0>)
 8000e8a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e8c:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <MX_ADC1_Init+0x98>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e92:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <MX_ADC1_Init+0x98>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <MX_ADC1_Init+0x98>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <MX_ADC1_Init+0x98>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ea6:	480e      	ldr	r0, [pc, #56]	; (8000ee0 <MX_ADC1_Init+0x98>)
 8000ea8:	f001 fe58 	bl	8002b5c <HAL_ADC_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000eb2:	f001 faf6 	bl	80024a2 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000eb6:	230c      	movs	r3, #12
 8000eb8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4806      	ldr	r0, [pc, #24]	; (8000ee0 <MX_ADC1_Init+0x98>)
 8000ec8:	f002 f82a 	bl	8002f20 <HAL_ADC_ConfigChannel>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000ed2:	f001 fae6 	bl	80024a2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000038 	.word	0x20000038
 8000ee4:	40012000 	.word	0x40012000
 8000ee8:	0f000001 	.word	0x0f000001

08000eec <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000efe:	4b21      	ldr	r3, [pc, #132]	; (8000f84 <MX_ADC3_Init+0x98>)
 8000f00:	4a21      	ldr	r2, [pc, #132]	; (8000f88 <MX_ADC3_Init+0x9c>)
 8000f02:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f04:	4b1f      	ldr	r3, [pc, #124]	; (8000f84 <MX_ADC3_Init+0x98>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000f0a:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <MX_ADC3_Init+0x98>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000f10:	4b1c      	ldr	r3, [pc, #112]	; (8000f84 <MX_ADC3_Init+0x98>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000f16:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <MX_ADC3_Init+0x98>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000f1c:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <MX_ADC3_Init+0x98>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f24:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <MX_ADC3_Init+0x98>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f2a:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <MX_ADC3_Init+0x98>)
 8000f2c:	4a17      	ldr	r2, [pc, #92]	; (8000f8c <MX_ADC3_Init+0xa0>)
 8000f2e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f30:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <MX_ADC3_Init+0x98>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000f36:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <MX_ADC3_Init+0x98>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <MX_ADC3_Init+0x98>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f44:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <MX_ADC3_Init+0x98>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000f4a:	480e      	ldr	r0, [pc, #56]	; (8000f84 <MX_ADC3_Init+0x98>)
 8000f4c:	f001 fe06 	bl	8002b5c <HAL_ADC_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8000f56:	f001 faa4 	bl	80024a2 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000f5a:	230e      	movs	r3, #14
 8000f5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f66:	463b      	mov	r3, r7
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4806      	ldr	r0, [pc, #24]	; (8000f84 <MX_ADC3_Init+0x98>)
 8000f6c:	f001 ffd8 	bl	8002f20 <HAL_ADC_ConfigChannel>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8000f76:	f001 fa94 	bl	80024a2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000f7a:	bf00      	nop
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000080 	.word	0x20000080
 8000f88:	40012200 	.word	0x40012200
 8000f8c:	0f000001 	.word	0x0f000001

08000f90 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000f94:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000f96:	4a18      	ldr	r2, [pc, #96]	; (8000ff8 <MX_CAN1_Init+0x68>)
 8000f98:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 8000f9a:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000f9c:	2208      	movs	r2, #8
 8000f9e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000fa0:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fa6:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fb2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fe0:	f002 f9cc 	bl	800337c <HAL_CAN_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000fea:	f001 fa5a 	bl	80024a2 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200000c8 	.word	0x200000c8
 8000ff8:	40006400 	.word	0x40006400

08000ffc <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001000:	4b17      	ldr	r3, [pc, #92]	; (8001060 <MX_CAN2_Init+0x64>)
 8001002:	4a18      	ldr	r2, [pc, #96]	; (8001064 <MX_CAN2_Init+0x68>)
 8001004:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 8001006:	4b16      	ldr	r3, [pc, #88]	; (8001060 <MX_CAN2_Init+0x64>)
 8001008:	2204      	movs	r2, #4
 800100a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <MX_CAN2_Init+0x64>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001012:	4b13      	ldr	r3, [pc, #76]	; (8001060 <MX_CAN2_Init+0x64>)
 8001014:	2200      	movs	r2, #0
 8001016:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <MX_CAN2_Init+0x64>)
 800101a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800101e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <MX_CAN2_Init+0x64>)
 8001022:	2200      	movs	r2, #0
 8001024:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <MX_CAN2_Init+0x64>)
 8001028:	2200      	movs	r2, #0
 800102a:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <MX_CAN2_Init+0x64>)
 800102e:	2200      	movs	r2, #0
 8001030:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <MX_CAN2_Init+0x64>)
 8001034:	2200      	movs	r2, #0
 8001036:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <MX_CAN2_Init+0x64>)
 800103a:	2200      	movs	r2, #0
 800103c:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <MX_CAN2_Init+0x64>)
 8001040:	2200      	movs	r2, #0
 8001042:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <MX_CAN2_Init+0x64>)
 8001046:	2200      	movs	r2, #0
 8001048:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <MX_CAN2_Init+0x64>)
 800104c:	f002 f996 	bl	800337c <HAL_CAN_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8001056:	f001 fa24 	bl	80024a2 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200000f0 	.word	0x200000f0
 8001064:	40006800 	.word	0x40006800

08001068 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800106e:	f107 0308 	add.w	r3, r7, #8
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800107c:	463b      	mov	r3, r7
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001084:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <MX_TIM2_Init+0x94>)
 8001086:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800108a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 800108c:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <MX_TIM2_Init+0x94>)
 800108e:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001092:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001094:	4b19      	ldr	r3, [pc, #100]	; (80010fc <MX_TIM2_Init+0x94>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60;
 800109a:	4b18      	ldr	r3, [pc, #96]	; (80010fc <MX_TIM2_Init+0x94>)
 800109c:	223c      	movs	r2, #60	; 0x3c
 800109e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a0:	4b16      	ldr	r3, [pc, #88]	; (80010fc <MX_TIM2_Init+0x94>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <MX_TIM2_Init+0x94>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010ac:	4813      	ldr	r0, [pc, #76]	; (80010fc <MX_TIM2_Init+0x94>)
 80010ae:	f003 ff2b 	bl	8004f08 <HAL_TIM_Base_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010b8:	f001 f9f3 	bl	80024a2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010c2:	f107 0308 	add.w	r3, r7, #8
 80010c6:	4619      	mov	r1, r3
 80010c8:	480c      	ldr	r0, [pc, #48]	; (80010fc <MX_TIM2_Init+0x94>)
 80010ca:	f004 f8e5 	bl	8005298 <HAL_TIM_ConfigClockSource>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010d4:	f001 f9e5 	bl	80024a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d8:	2300      	movs	r3, #0
 80010da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010dc:	2300      	movs	r3, #0
 80010de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010e0:	463b      	mov	r3, r7
 80010e2:	4619      	mov	r1, r3
 80010e4:	4805      	ldr	r0, [pc, #20]	; (80010fc <MX_TIM2_Init+0x94>)
 80010e6:	f004 fb01 	bl	80056ec <HAL_TIMEx_MasterConfigSynchronization>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010f0:	f001 f9d7 	bl	80024a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010f4:	bf00      	nop
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000118 	.word	0x20000118

08001100 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001106:	f107 0308 	add.w	r3, r7, #8
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001114:	463b      	mov	r3, r7
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800111c:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <MX_TIM3_Init+0x94>)
 800111e:	4a1e      	ldr	r2, [pc, #120]	; (8001198 <MX_TIM3_Init+0x98>)
 8001120:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15999;
 8001122:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <MX_TIM3_Init+0x94>)
 8001124:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001128:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112a:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <MX_TIM3_Init+0x94>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001130:	4b18      	ldr	r3, [pc, #96]	; (8001194 <MX_TIM3_Init+0x94>)
 8001132:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001136:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001138:	4b16      	ldr	r3, [pc, #88]	; (8001194 <MX_TIM3_Init+0x94>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <MX_TIM3_Init+0x94>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001144:	4813      	ldr	r0, [pc, #76]	; (8001194 <MX_TIM3_Init+0x94>)
 8001146:	f003 fedf 	bl	8004f08 <HAL_TIM_Base_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001150:	f001 f9a7 	bl	80024a2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001154:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001158:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	4619      	mov	r1, r3
 8001160:	480c      	ldr	r0, [pc, #48]	; (8001194 <MX_TIM3_Init+0x94>)
 8001162:	f004 f899 	bl	8005298 <HAL_TIM_ConfigClockSource>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800116c:	f001 f999 	bl	80024a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001170:	2300      	movs	r3, #0
 8001172:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001174:	2300      	movs	r3, #0
 8001176:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001178:	463b      	mov	r3, r7
 800117a:	4619      	mov	r1, r3
 800117c:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_TIM3_Init+0x94>)
 800117e:	f004 fab5 	bl	80056ec <HAL_TIMEx_MasterConfigSynchronization>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001188:	f001 f98b 	bl	80024a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000160 	.word	0x20000160
 8001198:	40000400 	.word	0x40000400

0800119c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a2:	f107 0308 	add.w	r3, r7, #8
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b0:	463b      	mov	r3, r7
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011b8:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <MX_TIM4_Init+0x94>)
 80011ba:	4a1e      	ldr	r2, [pc, #120]	; (8001234 <MX_TIM4_Init+0x98>)
 80011bc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15999;
 80011be:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <MX_TIM4_Init+0x94>)
 80011c0:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80011c4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <MX_TIM4_Init+0x94>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 249;
 80011cc:	4b18      	ldr	r3, [pc, #96]	; (8001230 <MX_TIM4_Init+0x94>)
 80011ce:	22f9      	movs	r2, #249	; 0xf9
 80011d0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d2:	4b17      	ldr	r3, [pc, #92]	; (8001230 <MX_TIM4_Init+0x94>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <MX_TIM4_Init+0x94>)
 80011da:	2200      	movs	r2, #0
 80011dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011de:	4814      	ldr	r0, [pc, #80]	; (8001230 <MX_TIM4_Init+0x94>)
 80011e0:	f003 fe92 	bl	8004f08 <HAL_TIM_Base_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80011ea:	f001 f95a 	bl	80024a2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80011f4:	f107 0308 	add.w	r3, r7, #8
 80011f8:	4619      	mov	r1, r3
 80011fa:	480d      	ldr	r0, [pc, #52]	; (8001230 <MX_TIM4_Init+0x94>)
 80011fc:	f004 f84c 	bl	8005298 <HAL_TIM_ConfigClockSource>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001206:	f001 f94c 	bl	80024a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120a:	2300      	movs	r3, #0
 800120c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120e:	2300      	movs	r3, #0
 8001210:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001212:	463b      	mov	r3, r7
 8001214:	4619      	mov	r1, r3
 8001216:	4806      	ldr	r0, [pc, #24]	; (8001230 <MX_TIM4_Init+0x94>)
 8001218:	f004 fa68 	bl	80056ec <HAL_TIMEx_MasterConfigSynchronization>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001222:	f001 f93e 	bl	80024a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200001a8 	.word	0x200001a8
 8001234:	40000800 	.word	0x40000800

08001238 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800123c:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <MX_TIM10_Init+0x40>)
 800123e:	4a0f      	ldr	r2, [pc, #60]	; (800127c <MX_TIM10_Init+0x44>)
 8001240:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 15999;
 8001242:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <MX_TIM10_Init+0x40>)
 8001244:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001248:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <MX_TIM10_Init+0x40>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 249;
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MX_TIM10_Init+0x40>)
 8001252:	22f9      	movs	r2, #249	; 0xf9
 8001254:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <MX_TIM10_Init+0x40>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <MX_TIM10_Init+0x40>)
 800125e:	2280      	movs	r2, #128	; 0x80
 8001260:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001262:	4805      	ldr	r0, [pc, #20]	; (8001278 <MX_TIM10_Init+0x40>)
 8001264:	f003 fe50 	bl	8004f08 <HAL_TIM_Base_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800126e:	f001 f918 	bl	80024a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200001f0 	.word	0x200001f0
 800127c:	40014400 	.word	0x40014400

08001280 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	4b3d      	ldr	r3, [pc, #244]	; (8001390 <MX_GPIO_Init+0x110>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a3c      	ldr	r2, [pc, #240]	; (8001390 <MX_GPIO_Init+0x110>)
 80012a0:	f043 0320 	orr.w	r3, r3, #32
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b3a      	ldr	r3, [pc, #232]	; (8001390 <MX_GPIO_Init+0x110>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0320 	and.w	r3, r3, #32
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	4b36      	ldr	r3, [pc, #216]	; (8001390 <MX_GPIO_Init+0x110>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a35      	ldr	r2, [pc, #212]	; (8001390 <MX_GPIO_Init+0x110>)
 80012bc:	f043 0304 	orr.w	r3, r3, #4
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b33      	ldr	r3, [pc, #204]	; (8001390 <MX_GPIO_Init+0x110>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0304 	and.w	r3, r3, #4
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	4b2f      	ldr	r3, [pc, #188]	; (8001390 <MX_GPIO_Init+0x110>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a2e      	ldr	r2, [pc, #184]	; (8001390 <MX_GPIO_Init+0x110>)
 80012d8:	f043 0302 	orr.w	r3, r3, #2
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b2c      	ldr	r3, [pc, #176]	; (8001390 <MX_GPIO_Init+0x110>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	607b      	str	r3, [r7, #4]
 80012ee:	4b28      	ldr	r3, [pc, #160]	; (8001390 <MX_GPIO_Init+0x110>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a27      	ldr	r2, [pc, #156]	; (8001390 <MX_GPIO_Init+0x110>)
 80012f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b25      	ldr	r3, [pc, #148]	; (8001390 <MX_GPIO_Init+0x110>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	603b      	str	r3, [r7, #0]
 800130a:	4b21      	ldr	r3, [pc, #132]	; (8001390 <MX_GPIO_Init+0x110>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a20      	ldr	r2, [pc, #128]	; (8001390 <MX_GPIO_Init+0x110>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b1e      	ldr	r3, [pc, #120]	; (8001390 <MX_GPIO_Init+0x110>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	603b      	str	r3, [r7, #0]
 8001320:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, comm_led_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	2130      	movs	r1, #48	; 0x30
 8001326:	481b      	ldr	r0, [pc, #108]	; (8001394 <MX_GPIO_Init+0x114>)
 8001328:	f003 f996 	bl	8004658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMS_Latch_GPIO_Port, BMS_Latch_Pin, GPIO_PIN_RESET);
 800132c:	2200      	movs	r2, #0
 800132e:	2120      	movs	r1, #32
 8001330:	4819      	ldr	r0, [pc, #100]	; (8001398 <MX_GPIO_Init+0x118>)
 8001332:	f003 f991 	bl	8004658 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : comm_led_Pin PG5 */
  GPIO_InitStruct.Pin = comm_led_Pin|GPIO_PIN_5;
 8001336:	2330      	movs	r3, #48	; 0x30
 8001338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133a:	2301      	movs	r3, #1
 800133c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2300      	movs	r3, #0
 8001344:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	4811      	ldr	r0, [pc, #68]	; (8001394 <MX_GPIO_Init+0x114>)
 800134e:	f002 ffbf 	bl	80042d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : tsms_Pin */
  GPIO_InitStruct.Pin = tsms_Pin;
 8001352:	2380      	movs	r3, #128	; 0x80
 8001354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001356:	2300      	movs	r3, #0
 8001358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(tsms_GPIO_Port, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	480b      	ldr	r0, [pc, #44]	; (8001394 <MX_GPIO_Init+0x114>)
 8001366:	f002 ffb3 	bl	80042d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BMS_Latch_Pin */
  GPIO_InitStruct.Pin = BMS_Latch_Pin;
 800136a:	2320      	movs	r3, #32
 800136c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	2301      	movs	r3, #1
 8001370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BMS_Latch_GPIO_Port, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	4805      	ldr	r0, [pc, #20]	; (8001398 <MX_GPIO_Init+0x118>)
 8001382:	f002 ffa5 	bl	80042d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001386:	bf00      	nop
 8001388:	3728      	adds	r7, #40	; 0x28
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800
 8001394:	40021800 	.word	0x40021800
 8001398:	40020400 	.word	0x40020400

0800139c <CANStart>:

/* USER CODE BEGIN 4 */

void CANStart()
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	; 0x28
 80013a0:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef filter;
  filter.FilterActivation = ENABLE;
 80013a2:	2301      	movs	r3, #1
 80013a4:	623b      	str	r3, [r7, #32]
  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]

  // Allow two IDs per entry
  filter.FilterScale = CAN_FILTERSCALE_16BIT;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
  filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61bb      	str	r3, [r7, #24]
  filter.FilterMaskIdHigh = 0x0000;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60bb      	str	r3, [r7, #8]
  filter.FilterMaskIdLow = 0x0000;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
  filter.FilterIdLow = 0x0000;
 80013ba:	2300      	movs	r3, #0
 80013bc:	607b      	str	r3, [r7, #4]
  filter.FilterIdHigh = 0x0000;
 80013be:	2300      	movs	r3, #0
 80013c0:	603b      	str	r3, [r7, #0]
  filter.FilterBank = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]

  if (HAL_CAN_ConfigFilter(&hcan1, &filter) != HAL_OK)
 80013c6:	463b      	mov	r3, r7
 80013c8:	4619      	mov	r1, r3
 80013ca:	481d      	ldr	r0, [pc, #116]	; (8001440 <CANStart+0xa4>)
 80013cc:	f002 f8d2 	bl	8003574 <HAL_CAN_ConfigFilter>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <CANStart+0x3e>
  {
    Error_Handler();
 80013d6:	f001 f864 	bl	80024a2 <Error_Handler>
  }
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80013da:	4819      	ldr	r0, [pc, #100]	; (8001440 <CANStart+0xa4>)
 80013dc:	f002 f9aa 	bl	8003734 <HAL_CAN_Start>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <CANStart+0x4e>
  {
    Error_Handler();
 80013e6:	f001 f85c 	bl	80024a2 <Error_Handler>
  }
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL | CAN_IT_RX_FIFO0_OVERRUN) != HAL_OK)
 80013ea:	210e      	movs	r1, #14
 80013ec:	4814      	ldr	r0, [pc, #80]	; (8001440 <CANStart+0xa4>)
 80013ee:	f002 fc07 	bl	8003c00 <HAL_CAN_ActivateNotification>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <CANStart+0x60>
  {
    Error_Handler();
 80013f8:	f001 f853 	bl	80024a2 <Error_Handler>
  }
  filter.FilterBank = 1;
 80013fc:	2301      	movs	r3, #1
 80013fe:	617b      	str	r3, [r7, #20]
  if (HAL_CAN_ConfigFilter(&hcan2, &filter) != HAL_OK)
 8001400:	463b      	mov	r3, r7
 8001402:	4619      	mov	r1, r3
 8001404:	480f      	ldr	r0, [pc, #60]	; (8001444 <CANStart+0xa8>)
 8001406:	f002 f8b5 	bl	8003574 <HAL_CAN_ConfigFilter>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <CANStart+0x78>
  {
    Error_Handler();
 8001410:	f001 f847 	bl	80024a2 <Error_Handler>
  }
  if (HAL_CAN_Start(&hcan2) != HAL_OK)
 8001414:	480b      	ldr	r0, [pc, #44]	; (8001444 <CANStart+0xa8>)
 8001416:	f002 f98d 	bl	8003734 <HAL_CAN_Start>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <CANStart+0x88>
  {
    Error_Handler();
 8001420:	f001 f83f 	bl	80024a2 <Error_Handler>
  }
  if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL | CAN_IT_RX_FIFO0_OVERRUN) != HAL_OK)
 8001424:	210e      	movs	r1, #14
 8001426:	4807      	ldr	r0, [pc, #28]	; (8001444 <CANStart+0xa8>)
 8001428:	f002 fbea 	bl	8003c00 <HAL_CAN_ActivateNotification>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <CANStart+0x9a>
  {
    Error_Handler();
 8001432:	f001 f836 	bl	80024a2 <Error_Handler>
  }
}
 8001436:	bf00      	nop
 8001438:	3728      	adds	r7, #40	; 0x28
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200000c8 	.word	0x200000c8
 8001444:	200000f0 	.word	0x200000f0

08001448 <CAN_Transmit>:

HAL_StatusTypeDef CAN_Transmit(CAN_HandleTypeDef hcan, uint32_t id, uint32_t DLC, uint8_t *data)
{
 8001448:	b084      	sub	sp, #16
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	f107 0c10 	add.w	ip, r7, #16
 8001454:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint32_t mailbox;
  txHeader.IDE = CAN_ID_STD;
 8001458:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <CAN_Transmit+0x48>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  txHeader.RTR = CAN_RTR_DATA;
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <CAN_Transmit+0x48>)
 8001460:	2200      	movs	r2, #0
 8001462:	60da      	str	r2, [r3, #12]
  txHeader.StdId = id;
 8001464:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <CAN_Transmit+0x48>)
 8001466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001468:	6013      	str	r3, [r2, #0]
  txHeader.DLC = DLC;
 800146a:	4a09      	ldr	r2, [pc, #36]	; (8001490 <CAN_Transmit+0x48>)
 800146c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800146e:	6113      	str	r3, [r2, #16]

  return HAL_CAN_AddTxMessage(&hcan, &txHeader, data, &mailbox);
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001474:	4906      	ldr	r1, [pc, #24]	; (8001490 <CAN_Transmit+0x48>)
 8001476:	f107 0010 	add.w	r0, r7, #16
 800147a:	f002 f99f 	bl	80037bc <HAL_CAN_AddTxMessage>
 800147e:	4603      	mov	r3, r0
}
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800148a:	b004      	add	sp, #16
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000aec 	.word	0x20000aec

08001494 <HAL_TIM_PeriodElapsedCallback>:
//		HAL_GPIO_TogglePin (GPIOD, GPIO_PIN_9);
//
// }

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001496:	b093      	sub	sp, #76	; 0x4c
 8001498:	af0a      	add	r7, sp, #40	; 0x28
 800149a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) // data collection from slaves in each 50 ms
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014a4:	d15e      	bne.n	8001564 <HAL_TIM_PeriodElapsedCallback+0xd0>
  {
    // HAL_GPIO_TogglePin(indication1_led_GPIO_Port, indication1_led_Pin);
    TxData4[0] = 5;
 80014a6:	4b80      	ldr	r3, [pc, #512]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80014a8:	2205      	movs	r2, #5
 80014aa:	701a      	strb	r2, [r3, #0]
    TxData4[1] = 5;
 80014ac:	4b7e      	ldr	r3, [pc, #504]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80014ae:	2205      	movs	r2, #5
 80014b0:	705a      	strb	r2, [r3, #1]
    TxData4[2] = 5;
 80014b2:	4b7d      	ldr	r3, [pc, #500]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80014b4:	2205      	movs	r2, #5
 80014b6:	709a      	strb	r2, [r3, #2]
    TxData4[3] = 5;
 80014b8:	4b7b      	ldr	r3, [pc, #492]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80014ba:	2205      	movs	r2, #5
 80014bc:	70da      	strb	r2, [r3, #3]
    TxData4[4] = 5;
 80014be:	4b7a      	ldr	r3, [pc, #488]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80014c0:	2205      	movs	r2, #5
 80014c2:	711a      	strb	r2, [r3, #4]
    TxData4[5] = 5;
 80014c4:	4b78      	ldr	r3, [pc, #480]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80014c6:	2205      	movs	r2, #5
 80014c8:	715a      	strb	r2, [r3, #5]
    TxData4[6] = 5;
 80014ca:	4b77      	ldr	r3, [pc, #476]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80014cc:	2205      	movs	r2, #5
 80014ce:	719a      	strb	r2, [r3, #6]
    TxData4[7] = 5;
 80014d0:	4b75      	ldr	r3, [pc, #468]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80014d2:	2205      	movs	r2, #5
 80014d4:	71da      	strb	r2, [r3, #7]

    // CAN_Transmit(hcan2, 100, 8,TxData4);

    if (CAN_Slave_no < 9)
 80014d6:	4b75      	ldr	r3, [pc, #468]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x218>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b08      	cmp	r3, #8
 80014dc:	d83f      	bhi.n	800155e <HAL_TIM_PeriodElapsedCallback+0xca>
    {
      CAN_Slave_ID = CAN_Slave_no * 100;
 80014de:	4b73      	ldr	r3, [pc, #460]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x218>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2264      	movs	r2, #100	; 0x64
 80014e4:	fb02 f303 	mul.w	r3, r2, r3
 80014e8:	4a71      	ldr	r2, [pc, #452]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80014ea:	6013      	str	r3, [r2, #0]
      if (CAN_Transmit(hcan2, CAN_Slave_ID, 1, &request_to_slave) == HAL_OK)
 80014ec:	4b70      	ldr	r3, [pc, #448]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4e70      	ldr	r6, [pc, #448]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80014f2:	4a71      	ldr	r2, [pc, #452]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80014f4:	9208      	str	r2, [sp, #32]
 80014f6:	2201      	movs	r2, #1
 80014f8:	9207      	str	r2, [sp, #28]
 80014fa:	9306      	str	r3, [sp, #24]
 80014fc:	466d      	mov	r5, sp
 80014fe:	f106 0410 	add.w	r4, r6, #16
 8001502:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001504:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001506:	e894 0003 	ldmia.w	r4, {r0, r1}
 800150a:	e885 0003 	stmia.w	r5, {r0, r1}
 800150e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001512:	f7ff ff99 	bl	8001448 <CAN_Transmit>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d103      	bne.n	8001524 <HAL_TIM_PeriodElapsedCallback+0x90>
      {
        HAL_GPIO_TogglePin(comm_led_GPIO_Port, comm_led_Pin);
 800151c:	2110      	movs	r1, #16
 800151e:	4867      	ldr	r0, [pc, #412]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001520:	f003 f8b3 	bl	800468a <HAL_GPIO_TogglePin>
      }
//      /Incrementing the value in the can health monitoring array as we ask the question/
      canHealthMonitoringArray[CAN_Slave_no - 1]++;
 8001524:	4b61      	ldr	r3, [pc, #388]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	3b01      	subs	r3, #1
 800152a:	4a65      	ldr	r2, [pc, #404]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800152c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001530:	3201      	adds	r2, #1
 8001532:	4963      	ldr	r1, [pc, #396]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      if (canHealthMonitoringArray[CAN_Slave_no - 1] > canHealthMonitoringThreshold)
 8001538:	4b5c      	ldr	r3, [pc, #368]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x218>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	3b01      	subs	r3, #1
 800153e:	4a60      	ldr	r2, [pc, #384]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001540:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001544:	4b5f      	ldr	r3, [pc, #380]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	429a      	cmp	r2, r3
 800154a:	d902      	bls.n	8001552 <HAL_TIM_PeriodElapsedCallback+0xbe>
      {
//        /This implies that we have encountered an error and we need to tell the BMS latch circuit/
        slaveCanErrorFlag = SET;
 800154c:	4b5e      	ldr	r3, [pc, #376]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800154e:	2201      	movs	r2, #1
 8001550:	701a      	strb	r2, [r3, #0]
      }
      CAN_Slave_no++;
 8001552:	4b56      	ldr	r3, [pc, #344]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	3301      	adds	r3, #1
 8001558:	4a54      	ldr	r2, [pc, #336]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x218>)
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	e002      	b.n	8001564 <HAL_TIM_PeriodElapsedCallback+0xd0>
    }
    else
    {
      CAN_Slave_no = 1;
 800155e:	4b53      	ldr	r3, [pc, #332]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001560:	2201      	movs	r2, #1
 8001562:	601a      	str	r2, [r3, #0]
  //			TxData[4]=1;
  //			Charger_CANTransmit(0x1806E5F4,1,0,8,(uint8_t *) TxData);
  //		}
  //	}

  if (htim->Instance == TIM3)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a58      	ldr	r2, [pc, #352]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x238>)
 800156a:	4293      	cmp	r3, r2
 800156c:	f040 8179 	bne.w	8001862 <HAL_TIM_PeriodElapsedCallback+0x3ce>
  {
//    /Perform the charger related tasks/
    voltage_fd = Ch_fd[0] * 256 + Ch_fd[1];
 8001570:	4b57      	ldr	r3, [pc, #348]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	b29b      	uxth	r3, r3
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	b29a      	uxth	r2, r3
 800157a:	4b55      	ldr	r3, [pc, #340]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800157c:	785b      	ldrb	r3, [r3, #1]
 800157e:	b29b      	uxth	r3, r3
 8001580:	4413      	add	r3, r2
 8001582:	b29a      	uxth	r2, r3
 8001584:	4b53      	ldr	r3, [pc, #332]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001586:	801a      	strh	r2, [r3, #0]
    current_fd = Ch_fd[2] * 256 + Ch_fd[3];
 8001588:	4b51      	ldr	r3, [pc, #324]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800158a:	789b      	ldrb	r3, [r3, #2]
 800158c:	b29b      	uxth	r3, r3
 800158e:	021b      	lsls	r3, r3, #8
 8001590:	b29a      	uxth	r2, r3
 8001592:	4b4f      	ldr	r3, [pc, #316]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001594:	78db      	ldrb	r3, [r3, #3]
 8001596:	b29b      	uxth	r3, r3
 8001598:	4413      	add	r3, r2
 800159a:	b29a      	uxth	r2, r3
 800159c:	4b4e      	ldr	r3, [pc, #312]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800159e:	801a      	strh	r2, [r3, #0]
    curr_act = current_fd / 10;
 80015a0:	4b4d      	ldr	r3, [pc, #308]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	4a4d      	ldr	r2, [pc, #308]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x248>)
 80015a6:	fba2 2303 	umull	r2, r3, r2, r3
 80015aa:	08db      	lsrs	r3, r3, #3
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	4b4c      	ldr	r3, [pc, #304]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80015b0:	801a      	strh	r2, [r3, #0]

//    tsms = ADC_Read(ADC_CHANNEL_15);

    if(HAL_GPIO_ReadPin(tsms_GPIO_Port, tsms_Pin) == 1)
 80015b2:	2180      	movs	r1, #128	; 0x80
 80015b4:	4841      	ldr	r0, [pc, #260]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0x228>)
 80015b6:	f003 f837 	bl	8004628 <HAL_GPIO_ReadPin>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b01      	cmp	r3, #1
 80015be:	f040 813d 	bne.w	800183c <HAL_TIM_PeriodElapsedCallback+0x3a8>
//    	tsms
//    if (tsms > 4000)
    {
    	tsms =1;
 80015c2:	4b48      	ldr	r3, [pc, #288]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	801a      	strh	r2, [r3, #0]
//      if (voltage_fd < 3984 && Volt_max < 4000)
    	if (voltage_fd < 4000 && Volt_max < 4000)
 80015c8:	4b42      	ldr	r3, [pc, #264]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80015d0:	d22c      	bcs.n	800162c <HAL_TIM_PeriodElapsedCallback+0x198>
 80015d2:	4b45      	ldr	r3, [pc, #276]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80015da:	d227      	bcs.n	800162c <HAL_TIM_PeriodElapsedCallback+0x198>
      {
//        uint16_t volt = 3984;
    	uint16_t volt = 4000;
 80015dc:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80015e0:	837b      	strh	r3, [r7, #26]
        uint16_t cur = 110;
 80015e2:	236e      	movs	r3, #110	; 0x6e
 80015e4:	833b      	strh	r3, [r7, #24]
        crnt = cur;
 80015e6:	4a41      	ldr	r2, [pc, #260]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x258>)
 80015e8:	8b3b      	ldrh	r3, [r7, #24]
 80015ea:	8013      	strh	r3, [r2, #0]
        TxData[0] = volt >> 8;
 80015ec:	8b7b      	ldrh	r3, [r7, #26]
 80015ee:	0a1b      	lsrs	r3, r3, #8
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	4b3e      	ldr	r3, [pc, #248]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80015f6:	701a      	strb	r2, [r3, #0]
        TxData[1] = volt & ((1 << 8) - 1);
 80015f8:	8b7b      	ldrh	r3, [r7, #26]
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	4b3c      	ldr	r3, [pc, #240]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80015fe:	705a      	strb	r2, [r3, #1]
        TxData[2] = cur >> 8;
 8001600:	8b3b      	ldrh	r3, [r7, #24]
 8001602:	0a1b      	lsrs	r3, r3, #8
 8001604:	b29b      	uxth	r3, r3
 8001606:	b2da      	uxtb	r2, r3
 8001608:	4b39      	ldr	r3, [pc, #228]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800160a:	709a      	strb	r2, [r3, #2]
        TxData[3] = cur & ((1 << 8) - 1);
 800160c:	8b3b      	ldrh	r3, [r7, #24]
 800160e:	b2da      	uxtb	r2, r3
 8001610:	4b37      	ldr	r3, [pc, #220]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001612:	70da      	strb	r2, [r3, #3]
        TxData[4] = 0;
 8001614:	4b36      	ldr	r3, [pc, #216]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001616:	2200      	movs	r2, #0
 8001618:	711a      	strb	r2, [r3, #4]
        Charger_CANTransmit(0x1806E5F4, 1, 0, 8, (uint8_t *)TxData);
 800161a:	4b35      	ldr	r3, [pc, #212]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	2308      	movs	r3, #8
 8001620:	2200      	movs	r2, #0
 8001622:	2101      	movs	r1, #1
 8001624:	4833      	ldr	r0, [pc, #204]	; (80016f4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001626:	f000 fd49 	bl	80020bc <Charger_CANTransmit>
      {
 800162a:	e097      	b.n	800175c <HAL_TIM_PeriodElapsedCallback+0x2c8>

//        HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_5);
      }
//      else if (voltage_fd < 3984 && Volt_max >= 4000 && Volt_max < 4120)
    	else if (voltage_fd < 4000 && Volt_max >= 4000 && Volt_max < 4120)
 800162c:	4b29      	ldr	r3, [pc, #164]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001634:	d260      	bcs.n	80016f8 <HAL_TIM_PeriodElapsedCallback+0x264>
 8001636:	4b2c      	ldr	r3, [pc, #176]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800163e:	d35b      	bcc.n	80016f8 <HAL_TIM_PeriodElapsedCallback+0x264>
 8001640:	4b29      	ldr	r3, [pc, #164]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	f241 0217 	movw	r2, #4119	; 0x1017
 8001648:	4293      	cmp	r3, r2
 800164a:	d855      	bhi.n	80016f8 <HAL_TIM_PeriodElapsedCallback+0x264>
      {
        if (crnt == 0)
 800164c:	4b27      	ldr	r3, [pc, #156]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x258>)
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d102      	bne.n	800165a <HAL_TIM_PeriodElapsedCallback+0x1c6>
          crnt = 55;
 8001654:	4b25      	ldr	r3, [pc, #148]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001656:	2237      	movs	r2, #55	; 0x37
 8001658:	801a      	strh	r2, [r3, #0]

//        uint16_t volt = 3984;
        uint16_t volt = 4000;
 800165a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800165e:	82fb      	strh	r3, [r7, #22]
        uint16_t cur = crnt;
 8001660:	4b22      	ldr	r3, [pc, #136]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001662:	881b      	ldrh	r3, [r3, #0]
 8001664:	82bb      	strh	r3, [r7, #20]
        TxData[0] = volt >> 8;
 8001666:	8afb      	ldrh	r3, [r7, #22]
 8001668:	0a1b      	lsrs	r3, r3, #8
 800166a:	b29b      	uxth	r3, r3
 800166c:	b2da      	uxtb	r2, r3
 800166e:	4b20      	ldr	r3, [pc, #128]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001670:	701a      	strb	r2, [r3, #0]
        TxData[1] = volt & ((1 << 8) - 1);
 8001672:	8afb      	ldrh	r3, [r7, #22]
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4b1e      	ldr	r3, [pc, #120]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001678:	705a      	strb	r2, [r3, #1]
        TxData[2] = cur >> 8;
 800167a:	8abb      	ldrh	r3, [r7, #20]
 800167c:	0a1b      	lsrs	r3, r3, #8
 800167e:	b29b      	uxth	r3, r3
 8001680:	b2da      	uxtb	r2, r3
 8001682:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001684:	709a      	strb	r2, [r3, #2]
        TxData[3] = cur & ((1 << 8) - 1);
 8001686:	8abb      	ldrh	r3, [r7, #20]
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800168c:	70da      	strb	r2, [r3, #3]
        TxData[4] = 0;
 800168e:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001690:	2200      	movs	r2, #0
 8001692:	711a      	strb	r2, [r3, #4]
        Charger_CANTransmit(0x1806E5F4, 1, 0, 8, (uint8_t *)TxData);
 8001694:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	2308      	movs	r3, #8
 800169a:	2200      	movs	r2, #0
 800169c:	2101      	movs	r1, #1
 800169e:	4815      	ldr	r0, [pc, #84]	; (80016f4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80016a0:	f000 fd0c 	bl	80020bc <Charger_CANTransmit>
      {
 80016a4:	e05a      	b.n	800175c <HAL_TIM_PeriodElapsedCallback+0x2c8>
 80016a6:	bf00      	nop
 80016a8:	200007b8 	.word	0x200007b8
 80016ac:	20000000 	.word	0x20000000
 80016b0:	200007b4 	.word	0x200007b4
 80016b4:	200000f0 	.word	0x200000f0
 80016b8:	20000004 	.word	0x20000004
 80016bc:	40021800 	.word	0x40021800
 80016c0:	20000b04 	.word	0x20000b04
 80016c4:	20000008 	.word	0x20000008
 80016c8:	20000b24 	.word	0x20000b24
 80016cc:	40000400 	.word	0x40000400
 80016d0:	20000aa0 	.word	0x20000aa0
 80016d4:	20000aa8 	.word	0x20000aa8
 80016d8:	20000aaa 	.word	0x20000aaa
 80016dc:	cccccccd 	.word	0xcccccccd
 80016e0:	20000aae 	.word	0x20000aae
 80016e4:	20000ab0 	.word	0x20000ab0
 80016e8:	20000a90 	.word	0x20000a90
 80016ec:	200007d0 	.word	0x200007d0
 80016f0:	20000a98 	.word	0x20000a98
 80016f4:	1806e5f4 	.word	0x1806e5f4

//        HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_5);
      }
//      else if (voltage_fd < 3984 && Volt_max >= 4120)
    	else if (voltage_fd < 4000 && Volt_max >= 4120)
 80016f8:	4b4a      	ldr	r3, [pc, #296]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001700:	d22c      	bcs.n	800175c <HAL_TIM_PeriodElapsedCallback+0x2c8>
 8001702:	4b49      	ldr	r3, [pc, #292]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x394>)
 8001704:	881b      	ldrh	r3, [r3, #0]
 8001706:	f241 0217 	movw	r2, #4119	; 0x1017
 800170a:	4293      	cmp	r3, r2
 800170c:	d926      	bls.n	800175c <HAL_TIM_PeriodElapsedCallback+0x2c8>
      {
//        uint16_t volt = 3984;
    	uint16_t volt = 4000;
 800170e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001712:	827b      	strh	r3, [r7, #18]
//        uint16_t cur = 22;
    	uint16_t cur = 55;
 8001714:	2337      	movs	r3, #55	; 0x37
 8001716:	823b      	strh	r3, [r7, #16]
        crnt = cur;
 8001718:	4a44      	ldr	r2, [pc, #272]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x398>)
 800171a:	8a3b      	ldrh	r3, [r7, #16]
 800171c:	8013      	strh	r3, [r2, #0]
        TxData[0] = volt >> 8;
 800171e:	8a7b      	ldrh	r3, [r7, #18]
 8001720:	0a1b      	lsrs	r3, r3, #8
 8001722:	b29b      	uxth	r3, r3
 8001724:	b2da      	uxtb	r2, r3
 8001726:	4b42      	ldr	r3, [pc, #264]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001728:	701a      	strb	r2, [r3, #0]
        TxData[1] = volt & ((1 << 8) - 1);
 800172a:	8a7b      	ldrh	r3, [r7, #18]
 800172c:	b2da      	uxtb	r2, r3
 800172e:	4b40      	ldr	r3, [pc, #256]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001730:	705a      	strb	r2, [r3, #1]
        TxData[2] = cur >> 8;
 8001732:	8a3b      	ldrh	r3, [r7, #16]
 8001734:	0a1b      	lsrs	r3, r3, #8
 8001736:	b29b      	uxth	r3, r3
 8001738:	b2da      	uxtb	r2, r3
 800173a:	4b3d      	ldr	r3, [pc, #244]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 800173c:	709a      	strb	r2, [r3, #2]
        TxData[3] = cur & ((1 << 8) - 1);
 800173e:	8a3b      	ldrh	r3, [r7, #16]
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4b3b      	ldr	r3, [pc, #236]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001744:	70da      	strb	r2, [r3, #3]
        TxData[4] = 0;
 8001746:	4b3a      	ldr	r3, [pc, #232]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001748:	2200      	movs	r2, #0
 800174a:	711a      	strb	r2, [r3, #4]
        Charger_CANTransmit(0x1806E5F4, 1, 0, 8, (uint8_t *)TxData);
 800174c:	4b38      	ldr	r3, [pc, #224]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	2308      	movs	r3, #8
 8001752:	2200      	movs	r2, #0
 8001754:	2101      	movs	r1, #1
 8001756:	4837      	ldr	r0, [pc, #220]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001758:	f000 fcb0 	bl	80020bc <Charger_CANTransmit>

//        HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_5);
      }
//      if (voltage_fd < 3984 && Volt_max > 4200)
    	if (voltage_fd < 4000 && Volt_max > 4198)
 800175c:	4b31      	ldr	r3, [pc, #196]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x390>)
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001764:	d22c      	bcs.n	80017c0 <HAL_TIM_PeriodElapsedCallback+0x32c>
 8001766:	4b30      	ldr	r3, [pc, #192]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x394>)
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	f241 0266 	movw	r2, #4198	; 0x1066
 800176e:	4293      	cmp	r3, r2
 8001770:	d926      	bls.n	80017c0 <HAL_TIM_PeriodElapsedCallback+0x32c>
      { //?
//        uint16_t volt = 3984;
        uint16_t volt = 4000;
 8001772:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001776:	81fb      	strh	r3, [r7, #14]
        uint16_t cur = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	81bb      	strh	r3, [r7, #12]
        crnt = cur;
 800177c:	4a2b      	ldr	r2, [pc, #172]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x398>)
 800177e:	89bb      	ldrh	r3, [r7, #12]
 8001780:	8013      	strh	r3, [r2, #0]
        TxData[0] = volt >> 8;
 8001782:	89fb      	ldrh	r3, [r7, #14]
 8001784:	0a1b      	lsrs	r3, r3, #8
 8001786:	b29b      	uxth	r3, r3
 8001788:	b2da      	uxtb	r2, r3
 800178a:	4b29      	ldr	r3, [pc, #164]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 800178c:	701a      	strb	r2, [r3, #0]
        TxData[1] = volt & ((1 << 8) - 1);
 800178e:	89fb      	ldrh	r3, [r7, #14]
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4b27      	ldr	r3, [pc, #156]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001794:	705a      	strb	r2, [r3, #1]
        TxData[2] = cur >> 8;
 8001796:	89bb      	ldrh	r3, [r7, #12]
 8001798:	0a1b      	lsrs	r3, r3, #8
 800179a:	b29b      	uxth	r3, r3
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4b24      	ldr	r3, [pc, #144]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 80017a0:	709a      	strb	r2, [r3, #2]
        TxData[3] = cur & ((1 << 8) - 1);
 80017a2:	89bb      	ldrh	r3, [r7, #12]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4b22      	ldr	r3, [pc, #136]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 80017a8:	70da      	strb	r2, [r3, #3]
        TxData[4] = 1;
 80017aa:	4b21      	ldr	r3, [pc, #132]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	711a      	strb	r2, [r3, #4]
        Charger_CANTransmit(0x1806E5F4, 1, 0, 8, (uint8_t *)TxData);
 80017b0:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	2308      	movs	r3, #8
 80017b6:	2200      	movs	r2, #0
 80017b8:	2101      	movs	r1, #1
 80017ba:	481e      	ldr	r0, [pc, #120]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 80017bc:	f000 fc7e 	bl	80020bc <Charger_CANTransmit>
      }
//      if (voltage_fd > 3984)
    	if (voltage_fd > 4000)
 80017c0:	4b18      	ldr	r3, [pc, #96]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80017c8:	d94b      	bls.n	8001862 <HAL_TIM_PeriodElapsedCallback+0x3ce>
      {
//        uint16_t volt = 3984;
    	uint16_t volt = 4000;
 80017ca:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80017ce:	817b      	strh	r3, [r7, #10]
        uint16_t cur = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	813b      	strh	r3, [r7, #8]
        crnt = cur;
 80017d4:	4a15      	ldr	r2, [pc, #84]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x398>)
 80017d6:	893b      	ldrh	r3, [r7, #8]
 80017d8:	8013      	strh	r3, [r2, #0]
        TxData[0] = volt >> 8;
 80017da:	897b      	ldrh	r3, [r7, #10]
 80017dc:	0a1b      	lsrs	r3, r3, #8
 80017de:	b29b      	uxth	r3, r3
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	4b13      	ldr	r3, [pc, #76]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 80017e4:	701a      	strb	r2, [r3, #0]
        TxData[1] = volt & ((1 << 8) - 1);
 80017e6:	897b      	ldrh	r3, [r7, #10]
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 80017ec:	705a      	strb	r2, [r3, #1]
        TxData[2] = cur >> 8;
 80017ee:	893b      	ldrh	r3, [r7, #8]
 80017f0:	0a1b      	lsrs	r3, r3, #8
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 80017f8:	709a      	strb	r2, [r3, #2]
        TxData[3] = cur & ((1 << 8) - 1);
 80017fa:	893b      	ldrh	r3, [r7, #8]
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001800:	70da      	strb	r2, [r3, #3]
        TxData[4] = 1;
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001804:	2201      	movs	r2, #1
 8001806:	711a      	strb	r2, [r3, #4]
        Charger_CANTransmit(0x1806E5F4, 1, 0, 8, (uint8_t *)TxData);
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	2308      	movs	r3, #8
 800180e:	2200      	movs	r2, #0
 8001810:	2101      	movs	r1, #1
 8001812:	4808      	ldr	r0, [pc, #32]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001814:	f000 fc52 	bl	80020bc <Charger_CANTransmit>
        //				HAL_Delay(400);
        HAL_GPIO_WritePin(BMS_Latch_GPIO_Port, BMS_Latch_Pin, RESET);
 8001818:	2200      	movs	r2, #0
 800181a:	2120      	movs	r1, #32
 800181c:	4806      	ldr	r0, [pc, #24]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 800181e:	f002 ff1b 	bl	8004658 <HAL_GPIO_WritePin>
 8001822:	e01e      	b.n	8001862 <HAL_TIM_PeriodElapsedCallback+0x3ce>
 8001824:	20000aa8 	.word	0x20000aa8
 8001828:	20000a90 	.word	0x20000a90
 800182c:	200007d0 	.word	0x200007d0
 8001830:	20000a98 	.word	0x20000a98
 8001834:	1806e5f4 	.word	0x1806e5f4
 8001838:	40020400 	.word	0x40020400
      }
    }
    else
    {
      tsms = 0;
 800183c:	4b81      	ldr	r3, [pc, #516]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 800183e:	2200      	movs	r2, #0
 8001840:	801a      	strh	r2, [r3, #0]
      TxData[4] = 1;
 8001842:	4b81      	ldr	r3, [pc, #516]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001844:	2201      	movs	r2, #1
 8001846:	711a      	strb	r2, [r3, #4]
      Charger_CANTransmit(0x1806E5F4, 1, 0, 8, (uint8_t *)TxData);
 8001848:	4b7f      	ldr	r3, [pc, #508]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	2308      	movs	r3, #8
 800184e:	2200      	movs	r2, #0
 8001850:	2101      	movs	r1, #1
 8001852:	487e      	ldr	r0, [pc, #504]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001854:	f000 fc32 	bl	80020bc <Charger_CANTransmit>
      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, RESET);
 8001858:	2200      	movs	r2, #0
 800185a:	2120      	movs	r1, #32
 800185c:	487c      	ldr	r0, [pc, #496]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 800185e:	f002 fefb 	bl	8004658 <HAL_GPIO_WritePin>
    }
  }

  if (htim->Instance == TIM4) // check error, measure current and operate BMS latch in each 400 ms
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a7b      	ldr	r2, [pc, #492]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8001868:	4293      	cmp	r3, r2
 800186a:	f040 80dc 	bne.w	8001a26 <HAL_TIM_PeriodElapsedCallback+0x592>
  {
    /*Write the part of code where we reset the slave can error flag*/
    if ((canHealthMonitoringArray[0] <= canHealthMonitoringThreshold) && (canHealthMonitoringArray[1] <= canHealthMonitoringThreshold) && (canHealthMonitoringArray[2] <= canHealthMonitoringThreshold) && (canHealthMonitoringArray[3] <= canHealthMonitoringThreshold) && (canHealthMonitoringArray[4] <= canHealthMonitoringThreshold) && (canHealthMonitoringArray[5] <= canHealthMonitoringThreshold) && (canHealthMonitoringArray[6] <= canHealthMonitoringThreshold) && (canHealthMonitoringArray[7] <= canHealthMonitoringThreshold) && (canHealthMonitoringArray[8] <= canHealthMonitoringThreshold))
 800186e:	4b7a      	ldr	r3, [pc, #488]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	4b7a      	ldr	r3, [pc, #488]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d832      	bhi.n	80018e0 <HAL_TIM_PeriodElapsedCallback+0x44c>
 800187a:	4b77      	ldr	r3, [pc, #476]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	4b77      	ldr	r3, [pc, #476]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d82c      	bhi.n	80018e0 <HAL_TIM_PeriodElapsedCallback+0x44c>
 8001886:	4b74      	ldr	r3, [pc, #464]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	4b74      	ldr	r3, [pc, #464]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d826      	bhi.n	80018e0 <HAL_TIM_PeriodElapsedCallback+0x44c>
 8001892:	4b71      	ldr	r3, [pc, #452]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8001894:	68da      	ldr	r2, [r3, #12]
 8001896:	4b71      	ldr	r3, [pc, #452]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	429a      	cmp	r2, r3
 800189c:	d820      	bhi.n	80018e0 <HAL_TIM_PeriodElapsedCallback+0x44c>
 800189e:	4b6e      	ldr	r3, [pc, #440]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 80018a0:	691a      	ldr	r2, [r3, #16]
 80018a2:	4b6e      	ldr	r3, [pc, #440]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d81a      	bhi.n	80018e0 <HAL_TIM_PeriodElapsedCallback+0x44c>
 80018aa:	4b6b      	ldr	r3, [pc, #428]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 80018ac:	695a      	ldr	r2, [r3, #20]
 80018ae:	4b6b      	ldr	r3, [pc, #428]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d814      	bhi.n	80018e0 <HAL_TIM_PeriodElapsedCallback+0x44c>
 80018b6:	4b68      	ldr	r3, [pc, #416]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 80018b8:	699a      	ldr	r2, [r3, #24]
 80018ba:	4b68      	ldr	r3, [pc, #416]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d80e      	bhi.n	80018e0 <HAL_TIM_PeriodElapsedCallback+0x44c>
 80018c2:	4b65      	ldr	r3, [pc, #404]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 80018c4:	69da      	ldr	r2, [r3, #28]
 80018c6:	4b65      	ldr	r3, [pc, #404]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d808      	bhi.n	80018e0 <HAL_TIM_PeriodElapsedCallback+0x44c>
 80018ce:	4b62      	ldr	r3, [pc, #392]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 80018d0:	6a1a      	ldr	r2, [r3, #32]
 80018d2:	4b62      	ldr	r3, [pc, #392]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d802      	bhi.n	80018e0 <HAL_TIM_PeriodElapsedCallback+0x44c>
    {
//      /This imlpies that all the indices in the array have indicated that the slave CAN is working correctly/
      slaveCanErrorFlag = RESET;
 80018da:	4b61      	ldr	r3, [pc, #388]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
    }
    // HAL_GPIO_TogglePin(indication3_led_GPIO_Port, indication3_led_Pin);
    //  measure current
    CheckErrors();
 80018e0:	f000 f9f6 	bl	8001cd0 <CheckErrors>
    current_value = current_sensor();
 80018e4:	f000 fb38 	bl	8001f58 <current_sensor>
 80018e8:	eef0 7a40 	vmov.f32	s15, s0
 80018ec:	4b5d      	ldr	r3, [pc, #372]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80018ee:	edc3 7a00 	vstr	s15, [r3]
    if (current_value >= 220.00 || current_value <= -50.00)
 80018f2:	4b5c      	ldr	r3, [pc, #368]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80018f4:	edd3 7a00 	vldr	s15, [r3]
 80018f8:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8001a68 <HAL_TIM_PeriodElapsedCallback+0x5d4>
 80018fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
//      Error_State = Overcurrent;
    }
    // error check
    // CheckErrors();
    // BMS_latch operation
    if ((Error_State == Overvoltage) | (Error_State == Undervoltage) | (Error_State == Overtemperature) | (Error_State == Overcurrent) | (slaveCanErrorFlag == SET))
 8001904:	4b59      	ldr	r3, [pc, #356]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b01      	cmp	r3, #1
 800190a:	bf0c      	ite	eq
 800190c:	2301      	moveq	r3, #1
 800190e:	2300      	movne	r3, #0
 8001910:	b2da      	uxtb	r2, r3
 8001912:	4b56      	ldr	r3, [pc, #344]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b02      	cmp	r3, #2
 8001918:	bf0c      	ite	eq
 800191a:	2301      	moveq	r3, #1
 800191c:	2300      	movne	r3, #0
 800191e:	b2db      	uxtb	r3, r3
 8001920:	4313      	orrs	r3, r2
 8001922:	b2db      	uxtb	r3, r3
 8001924:	461a      	mov	r2, r3
 8001926:	4b51      	ldr	r3, [pc, #324]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b03      	cmp	r3, #3
 800192c:	bf0c      	ite	eq
 800192e:	2301      	moveq	r3, #1
 8001930:	2300      	movne	r3, #0
 8001932:	b2db      	uxtb	r3, r3
 8001934:	4313      	orrs	r3, r2
 8001936:	4a4d      	ldr	r2, [pc, #308]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8001938:	7812      	ldrb	r2, [r2, #0]
 800193a:	2a04      	cmp	r2, #4
 800193c:	bf0c      	ite	eq
 800193e:	2201      	moveq	r2, #1
 8001940:	2200      	movne	r2, #0
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	4313      	orrs	r3, r2
 8001946:	4a46      	ldr	r2, [pc, #280]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8001948:	7812      	ldrb	r2, [r2, #0]
 800194a:	2a01      	cmp	r2, #1
 800194c:	bf0c      	ite	eq
 800194e:	2201      	moveq	r2, #1
 8001950:	2200      	movne	r2, #0
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	4313      	orrs	r3, r2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00f      	beq.n	800197a <HAL_TIM_PeriodElapsedCallback+0x4e6>
    {
    	++err_flag_cntr;
 800195a:	4b45      	ldr	r3, [pc, #276]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	3301      	adds	r3, #1
 8001960:	b29a      	uxth	r2, r3
 8001962:	4b43      	ldr	r3, [pc, #268]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8001964:	801a      	strh	r2, [r3, #0]
    	if(err_flag_cntr > 40)
 8001966:	4b42      	ldr	r3, [pc, #264]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	2b28      	cmp	r3, #40	; 0x28
 800196c:	d90d      	bls.n	800198a <HAL_TIM_PeriodElapsedCallback+0x4f6>

    	{
    		HAL_GPIO_WritePin(BMS_Latch_GPIO_Port, BMS_Latch_Pin, RESET); // error then RESET
 800196e:	2200      	movs	r2, #0
 8001970:	2120      	movs	r1, #32
 8001972:	4840      	ldr	r0, [pc, #256]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8001974:	f002 fe70 	bl	8004658 <HAL_GPIO_WritePin>
 8001978:	e007      	b.n	800198a <HAL_TIM_PeriodElapsedCallback+0x4f6>
      //				HAL_GPIO_TogglePin(comm_led_GPIO_Port, comm_led_Pin);
    	}
    }
    else
    {
      err_flag_cntr = 0;
 800197a:	4b3d      	ldr	r3, [pc, #244]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800197c:	2200      	movs	r2, #0
 800197e:	801a      	strh	r2, [r3, #0]
      HAL_GPIO_WritePin(BMS_Latch_GPIO_Port, BMS_Latch_Pin, SET);
 8001980:	2201      	movs	r2, #1
 8001982:	2120      	movs	r1, #32
 8001984:	483b      	ldr	r0, [pc, #236]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8001986:	f002 fe67 	bl	8004658 <HAL_GPIO_WritePin>
    }

    for (uint8_t i = 0; i < STACK_COUNT; i++)
 800198a:	2300      	movs	r3, #0
 800198c:	77fb      	strb	r3, [r7, #31]
 800198e:	e047      	b.n	8001a20 <HAL_TIM_PeriodElapsedCallback+0x58c>
    {
      for (uint8_t j = 0; j < VOLT_COUNT; j++)
 8001990:	2300      	movs	r3, #0
 8001992:	77bb      	strb	r3, [r7, #30]
 8001994:	e021      	b.n	80019da <HAL_TIM_PeriodElapsedCallback+0x546>
      {
        Cell_Voltage[VOLT_COUNT * i + j] = (float)Volt_Reg[i][j] / 1000;
 8001996:	7ffa      	ldrb	r2, [r7, #31]
 8001998:	7fb9      	ldrb	r1, [r7, #30]
 800199a:	4837      	ldr	r0, [pc, #220]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 800199c:	4613      	mov	r3, r2
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	4413      	add	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	440b      	add	r3, r1
 80019a6:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80019aa:	ee07 3a90 	vmov	s15, r3
 80019ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019b2:	7ffa      	ldrb	r2, [r7, #31]
 80019b4:	4613      	mov	r3, r2
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	4413      	add	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	461a      	mov	r2, r3
 80019be:	7fbb      	ldrb	r3, [r7, #30]
 80019c0:	4413      	add	r3, r2
 80019c2:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001a7c <HAL_TIM_PeriodElapsedCallback+0x5e8>
 80019c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ca:	4a2d      	ldr	r2, [pc, #180]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	edc3 7a00 	vstr	s15, [r3]
      for (uint8_t j = 0; j < VOLT_COUNT; j++)
 80019d4:	7fbb      	ldrb	r3, [r7, #30]
 80019d6:	3301      	adds	r3, #1
 80019d8:	77bb      	strb	r3, [r7, #30]
 80019da:	7fbb      	ldrb	r3, [r7, #30]
 80019dc:	2b0b      	cmp	r3, #11
 80019de:	d9da      	bls.n	8001996 <HAL_TIM_PeriodElapsedCallback+0x502>
      }
      for (uint8_t k = 0; k < TEMP_COUNT; k++)
 80019e0:	2300      	movs	r3, #0
 80019e2:	777b      	strb	r3, [r7, #29]
 80019e4:	e016      	b.n	8001a14 <HAL_TIM_PeriodElapsedCallback+0x580>
      {
        Cell_Temperature[TEMP_COUNT * i + k] = Temp_Reg[i][k];
 80019e6:	7ffa      	ldrb	r2, [r7, #31]
 80019e8:	7f78      	ldrb	r0, [r7, #29]
 80019ea:	7ff9      	ldrb	r1, [r7, #31]
 80019ec:	460b      	mov	r3, r1
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	440b      	add	r3, r1
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	4619      	mov	r1, r3
 80019f6:	7f7b      	ldrb	r3, [r7, #29]
 80019f8:	4419      	add	r1, r3
 80019fa:	4c22      	ldr	r4, [pc, #136]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 80019fc:	4613      	mov	r3, r2
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	4413      	add	r3, r2
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	4423      	add	r3, r4
 8001a06:	4403      	add	r3, r0
 8001a08:	781a      	ldrb	r2, [r3, #0]
 8001a0a:	4b1f      	ldr	r3, [pc, #124]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001a0c:	545a      	strb	r2, [r3, r1]
      for (uint8_t k = 0; k < TEMP_COUNT; k++)
 8001a0e:	7f7b      	ldrb	r3, [r7, #29]
 8001a10:	3301      	adds	r3, #1
 8001a12:	777b      	strb	r3, [r7, #29]
 8001a14:	7f7b      	ldrb	r3, [r7, #29]
 8001a16:	2b05      	cmp	r3, #5
 8001a18:	d9e5      	bls.n	80019e6 <HAL_TIM_PeriodElapsedCallback+0x552>
    for (uint8_t i = 0; i < STACK_COUNT; i++)
 8001a1a:	7ffb      	ldrb	r3, [r7, #31]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	77fb      	strb	r3, [r7, #31]
 8001a20:	7ffb      	ldrb	r3, [r7, #31]
 8001a22:	2b07      	cmp	r3, #7
 8001a24:	d9b4      	bls.n	8001990 <HAL_TIM_PeriodElapsedCallback+0x4fc>
      }
    }
  }
  if(htim == &htim10)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a18      	ldr	r2, [pc, #96]	; (8001a8c <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d105      	bne.n	8001a3a <HAL_TIM_PeriodElapsedCallback+0x5a6>
  {
	if(tsms==1)
 8001a2e:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d101      	bne.n	8001a3a <HAL_TIM_PeriodElapsedCallback+0x5a6>
		CAN1Transmit();
 8001a36:	f000 fb91 	bl	800215c <CAN1Transmit>
  }


}
 8001a3a:	bf00      	nop
 8001a3c:	3724      	adds	r7, #36	; 0x24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000ab0 	.word	0x20000ab0
 8001a48:	20000a98 	.word	0x20000a98
 8001a4c:	1806e5f4 	.word	0x1806e5f4
 8001a50:	40021800 	.word	0x40021800
 8001a54:	40000800 	.word	0x40000800
 8001a58:	20000b04 	.word	0x20000b04
 8001a5c:	20000008 	.word	0x20000008
 8001a60:	20000b24 	.word	0x20000b24
 8001a64:	20000ac8 	.word	0x20000ac8
 8001a68:	435c0000 	.word	0x435c0000
 8001a6c:	20000acc 	.word	0x20000acc
 8001a70:	20000ab2 	.word	0x20000ab2
 8001a74:	40020400 	.word	0x40020400
 8001a78:	2000080c 	.word	0x2000080c
 8001a7c:	447a0000 	.word	0x447a0000
 8001a80:	200008cc 	.word	0x200008cc
 8001a84:	200007dc 	.word	0x200007dc
 8001a88:	20000a4c 	.word	0x20000a4c
 8001a8c:	200001f0 	.word	0x200001f0

08001a90 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a90:	b590      	push	{r4, r7, lr}
 8001a92:	b08b      	sub	sp, #44	; 0x2c
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  testVar1 = 10;
 8001a98:	4b80      	ldr	r3, [pc, #512]	; (8001c9c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8001a9a:	220a      	movs	r2, #10
 8001a9c:	701a      	strb	r2, [r3, #0]
//  /Checking for CAN messages/
  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, (uint8_t *)Volt_Temp);
 8001a9e:	4b80      	ldr	r3, [pc, #512]	; (8001ca0 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8001aa0:	4a80      	ldr	r2, [pc, #512]	; (8001ca4 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f001 ff99 	bl	80039dc <HAL_CAN_GetRxMessage>
  if (hcan->Instance == CAN1)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a7e      	ldr	r2, [pc, #504]	; (8001ca8 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d143      	bne.n	8001b3c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
  {
//    /This implies that the charger CAN has responded/
    if (rxHeader.ExtId == 0x18FF50E5)
 8001ab4:	4b7b      	ldr	r3, [pc, #492]	; (8001ca4 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	4a7c      	ldr	r2, [pc, #496]	; (8001cac <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d121      	bne.n	8001b02 <HAL_CAN_RxFifo0MsgPendingCallback+0x72>
    {
      uint8_t *RxData1 = (uint8_t *)Volt_Temp;
 8001abe:	4b78      	ldr	r3, [pc, #480]	; (8001ca0 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8001ac0:	60fb      	str	r3, [r7, #12]
      Ch_fd[0] = RxData1[0];
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	781a      	ldrb	r2, [r3, #0]
 8001ac6:	4b7a      	ldr	r3, [pc, #488]	; (8001cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8001ac8:	701a      	strb	r2, [r3, #0]
      Ch_fd[1] = RxData1[1];
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	785a      	ldrb	r2, [r3, #1]
 8001ace:	4b78      	ldr	r3, [pc, #480]	; (8001cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8001ad0:	705a      	strb	r2, [r3, #1]
      Ch_fd[2] = RxData1[2];
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	789a      	ldrb	r2, [r3, #2]
 8001ad6:	4b76      	ldr	r3, [pc, #472]	; (8001cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8001ad8:	709a      	strb	r2, [r3, #2]
      Ch_fd[3] = RxData1[3];
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	78da      	ldrb	r2, [r3, #3]
 8001ade:	4b74      	ldr	r3, [pc, #464]	; (8001cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8001ae0:	70da      	strb	r2, [r3, #3]
      Ch_fd[4] = RxData1[4];
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	791a      	ldrb	r2, [r3, #4]
 8001ae6:	4b72      	ldr	r3, [pc, #456]	; (8001cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8001ae8:	711a      	strb	r2, [r3, #4]
      Ch_fd[5] = RxData1[5];
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	795a      	ldrb	r2, [r3, #5]
 8001aee:	4b70      	ldr	r3, [pc, #448]	; (8001cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8001af0:	715a      	strb	r2, [r3, #5]
      Ch_fd[6] = RxData1[6];
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	799a      	ldrb	r2, [r3, #6]
 8001af6:	4b6e      	ldr	r3, [pc, #440]	; (8001cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8001af8:	719a      	strb	r2, [r3, #6]
      Ch_fd[7] = RxData1[7];
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	79da      	ldrb	r2, [r3, #7]
 8001afe:	4b6c      	ldr	r3, [pc, #432]	; (8001cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8001b00:	71da      	strb	r2, [r3, #7]
    }
    if (rxHeader.StdId == 0x13)
 8001b02:	4b68      	ldr	r3, [pc, #416]	; (8001ca4 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b13      	cmp	r3, #19
 8001b08:	d113      	bne.n	8001b32 <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
    {
      RxData1[3] = Volt_Temp[3];
 8001b0a:	4b65      	ldr	r3, [pc, #404]	; (8001ca0 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8001b0c:	88db      	ldrh	r3, [r3, #6]
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	4b68      	ldr	r3, [pc, #416]	; (8001cb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8001b12:	70da      	strb	r2, [r3, #3]
      RxData1[2] = Volt_Temp[2];
 8001b14:	4b62      	ldr	r3, [pc, #392]	; (8001ca0 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8001b16:	889b      	ldrh	r3, [r3, #4]
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	4b66      	ldr	r3, [pc, #408]	; (8001cb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8001b1c:	709a      	strb	r2, [r3, #2]
      RxData1[1] = Volt_Temp[1];
 8001b1e:	4b60      	ldr	r3, [pc, #384]	; (8001ca0 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8001b20:	885b      	ldrh	r3, [r3, #2]
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	4b63      	ldr	r3, [pc, #396]	; (8001cb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8001b26:	705a      	strb	r2, [r3, #1]
      RxData1[0] = Volt_Temp[0];
 8001b28:	4b5d      	ldr	r3, [pc, #372]	; (8001ca0 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4b61      	ldr	r3, [pc, #388]	; (8001cb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8001b30:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_5);
 8001b32:	2120      	movs	r1, #32
 8001b34:	4860      	ldr	r0, [pc, #384]	; (8001cb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 8001b36:	f002 fda8 	bl	800468a <HAL_GPIO_TogglePin>
        Temp_Reg[slave_no - 1][i] = Volt_Temp[j] >> 8;
        Temp_Reg[slave_no - 1][i + 1] = Volt_Temp[j] & 0xff;
      }
    }
  }
}
 8001b3a:	e0aa      	b.n	8001c92 <HAL_CAN_RxFifo0MsgPendingCallback+0x202>
  else if (hcan->Instance == CAN2)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a5e      	ldr	r2, [pc, #376]	; (8001cbc <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	f040 80a5 	bne.w	8001c92 <HAL_CAN_RxFifo0MsgPendingCallback+0x202>
    uint8_t slave_no = rxHeader.StdId / 100;
 8001b48:	4b56      	ldr	r3, [pc, #344]	; (8001ca4 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a5c      	ldr	r2, [pc, #368]	; (8001cc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b52:	095b      	lsrs	r3, r3, #5
 8001b54:	74fb      	strb	r3, [r7, #19]
    uint8_t slave_data_id = rxHeader.StdId % 100;
 8001b56:	4b53      	ldr	r3, [pc, #332]	; (8001ca4 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	4b59      	ldr	r3, [pc, #356]	; (8001cc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001b5c:	fba3 1302 	umull	r1, r3, r3, r2
 8001b60:	095b      	lsrs	r3, r3, #5
 8001b62:	2164      	movs	r1, #100	; 0x64
 8001b64:	fb01 f303 	mul.w	r3, r1, r3
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	74bb      	strb	r3, [r7, #18]
    canHealthMonitoringArray[slave_no - 1] = RESET;
 8001b6c:	7cfb      	ldrb	r3, [r7, #19]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	4a54      	ldr	r2, [pc, #336]	; (8001cc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8001b72:	2100      	movs	r1, #0
 8001b74:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if (slave_data_id == 1)
 8001b78:	7cbb      	ldrb	r3, [r7, #18]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d118      	bne.n	8001bb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>
      for (int i = 0; i < 4; i++)
 8001b7e:	2300      	movs	r3, #0
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
 8001b82:	e012      	b.n	8001baa <HAL_CAN_RxFifo0MsgPendingCallback+0x11a>
        Volt_Reg[slave_no - 1][i] = Volt_Temp[i];
 8001b84:	7cfb      	ldrb	r3, [r7, #19]
 8001b86:	1e5a      	subs	r2, r3, #1
 8001b88:	4945      	ldr	r1, [pc, #276]	; (8001ca0 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8001b90:	494d      	ldr	r1, [pc, #308]	; (8001cc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8001b92:	4613      	mov	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4413      	add	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b9c:	4413      	add	r3, r2
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      for (int i = 0; i < 4; i++)
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	dde9      	ble.n	8001b84 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>
    if (slave_data_id == 5)
 8001bb0:	7cbb      	ldrb	r3, [r7, #18]
 8001bb2:	2b05      	cmp	r3, #5
 8001bb4:	d119      	bne.n	8001bea <HAL_CAN_RxFifo0MsgPendingCallback+0x15a>
      for (int i = 0; i < 4; i++)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	623b      	str	r3, [r7, #32]
 8001bba:	e013      	b.n	8001be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
        Volt_Reg[slave_no - 1][i + 4] = Volt_Temp[i];
 8001bbc:	7cfb      	ldrb	r3, [r7, #19]
 8001bbe:	1e5a      	subs	r2, r3, #1
 8001bc0:	6a3b      	ldr	r3, [r7, #32]
 8001bc2:	1d19      	adds	r1, r3, #4
 8001bc4:	4836      	ldr	r0, [pc, #216]	; (8001ca0 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8001bc6:	6a3b      	ldr	r3, [r7, #32]
 8001bc8:	f830 4013 	ldrh.w	r4, [r0, r3, lsl #1]
 8001bcc:	483e      	ldr	r0, [pc, #248]	; (8001cc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8001bce:	4613      	mov	r3, r2
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	4413      	add	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	4622      	mov	r2, r4
 8001bda:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
      for (int i = 0; i < 4; i++)
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	3301      	adds	r3, #1
 8001be2:	623b      	str	r3, [r7, #32]
 8001be4:	6a3b      	ldr	r3, [r7, #32]
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	dde8      	ble.n	8001bbc <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>
    if (slave_data_id == 9)
 8001bea:	7cbb      	ldrb	r3, [r7, #18]
 8001bec:	2b09      	cmp	r3, #9
 8001bee:	d11a      	bne.n	8001c26 <HAL_CAN_RxFifo0MsgPendingCallback+0x196>
      for (int i = 0; i < 4; i++)
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61fb      	str	r3, [r7, #28]
 8001bf4:	e014      	b.n	8001c20 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>
        Volt_Reg[slave_no - 1][i + 8] = Volt_Temp[i];
 8001bf6:	7cfb      	ldrb	r3, [r7, #19]
 8001bf8:	1e5a      	subs	r2, r3, #1
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	f103 0108 	add.w	r1, r3, #8
 8001c00:	4827      	ldr	r0, [pc, #156]	; (8001ca0 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	f830 4013 	ldrh.w	r4, [r0, r3, lsl #1]
 8001c08:	482f      	ldr	r0, [pc, #188]	; (8001cc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	4413      	add	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	440b      	add	r3, r1
 8001c14:	4622      	mov	r2, r4
 8001c16:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
      for (int i = 0; i < 4; i++)
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	61fb      	str	r3, [r7, #28]
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	dde7      	ble.n	8001bf6 <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
    if (slave_data_id == 21)
 8001c26:	7cbb      	ldrb	r3, [r7, #18]
 8001c28:	2b15      	cmp	r3, #21
 8001c2a:	d132      	bne.n	8001c92 <HAL_CAN_RxFifo0MsgPendingCallback+0x202>
      for (int i = 0, j = 0; i < 5; i += 2, j++)
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61bb      	str	r3, [r7, #24]
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	e02a      	b.n	8001c8c <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>
        Temp_Reg[slave_no - 1][i] = Volt_Temp[j] >> 8;
 8001c36:	4a1a      	ldr	r2, [pc, #104]	; (8001ca0 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c3e:	0a1b      	lsrs	r3, r3, #8
 8001c40:	b299      	uxth	r1, r3
 8001c42:	7cfb      	ldrb	r3, [r7, #19]
 8001c44:	1e5a      	subs	r2, r3, #1
 8001c46:	b2c8      	uxtb	r0, r1
 8001c48:	4920      	ldr	r1, [pc, #128]	; (8001ccc <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	4413      	add	r3, r2
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	18ca      	adds	r2, r1, r3
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	4413      	add	r3, r2
 8001c58:	4602      	mov	r2, r0
 8001c5a:	701a      	strb	r2, [r3, #0]
        Temp_Reg[slave_no - 1][i + 1] = Volt_Temp[j] & 0xff;
 8001c5c:	4a10      	ldr	r2, [pc, #64]	; (8001ca0 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8001c64:	7cfb      	ldrb	r3, [r7, #19]
 8001c66:	1e5a      	subs	r2, r3, #1
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	1c59      	adds	r1, r3, #1
 8001c6c:	b2c4      	uxtb	r4, r0
 8001c6e:	4817      	ldr	r0, [pc, #92]	; (8001ccc <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 8001c70:	4613      	mov	r3, r2
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	4413      	add	r3, r2
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	4403      	add	r3, r0
 8001c7a:	440b      	add	r3, r1
 8001c7c:	4622      	mov	r2, r4
 8001c7e:	701a      	strb	r2, [r3, #0]
      for (int i = 0, j = 0; i < 5; i += 2, j++)
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	3302      	adds	r3, #2
 8001c84:	61bb      	str	r3, [r7, #24]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	ddd1      	ble.n	8001c36 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a6>
}
 8001c92:	bf00      	nop
 8001c94:	372c      	adds	r7, #44	; 0x2c
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd90      	pop	{r4, r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	2000000c 	.word	0x2000000c
 8001ca0:	20000a7c 	.word	0x20000a7c
 8001ca4:	20000ad0 	.word	0x20000ad0
 8001ca8:	40006400 	.word	0x40006400
 8001cac:	18ff50e5 	.word	0x18ff50e5
 8001cb0:	20000aa0 	.word	0x20000aa0
 8001cb4:	200007d4 	.word	0x200007d4
 8001cb8:	40021800 	.word	0x40021800
 8001cbc:	40006800 	.word	0x40006800
 8001cc0:	51eb851f 	.word	0x51eb851f
 8001cc4:	20000b04 	.word	0x20000b04
 8001cc8:	2000080c 	.word	0x2000080c
 8001ccc:	200007dc 	.word	0x200007dc

08001cd0 <CheckErrors>:

void CheckErrors(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
  Volt_max = 0;
 8001cd6:	4b95      	ldr	r3, [pc, #596]	; (8001f2c <CheckErrors+0x25c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	801a      	strh	r2, [r3, #0]
  Volt_min = 5000;
 8001cdc:	4b94      	ldr	r3, [pc, #592]	; (8001f30 <CheckErrors+0x260>)
 8001cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce2:	801a      	strh	r2, [r3, #0]
  volt_total = 0;
 8001ce4:	4b93      	ldr	r3, [pc, #588]	; (8001f34 <CheckErrors+0x264>)
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
  Temp_max = 0;
 8001cec:	4b92      	ldr	r3, [pc, #584]	; (8001f38 <CheckErrors+0x268>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	701a      	strb	r2, [r3, #0]
  Temp_min = 100;
 8001cf2:	4b92      	ldr	r3, [pc, #584]	; (8001f3c <CheckErrors+0x26c>)
 8001cf4:	2264      	movs	r2, #100	; 0x64
 8001cf6:	701a      	strb	r2, [r3, #0]

  Error_State = OK;
 8001cf8:	4b91      	ldr	r3, [pc, #580]	; (8001f40 <CheckErrors+0x270>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	701a      	strb	r2, [r3, #0]

  for (int i = 0; i < STACK_COUNT; i++)
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	e055      	b.n	8001db0 <CheckErrors+0xe0>
  {
    for (int j = 0; j < VOLT_COUNT; j++)
 8001d04:	2300      	movs	r3, #0
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	e04c      	b.n	8001da4 <CheckErrors+0xd4>
    {
      if (Volt_Reg[i][j] > Volt_max)
 8001d0a:	498e      	ldr	r1, [pc, #568]	; (8001f44 <CheckErrors+0x274>)
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4413      	add	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	4413      	add	r3, r2
 8001d1a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001d1e:	4b83      	ldr	r3, [pc, #524]	; (8001f2c <CheckErrors+0x25c>)
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d90b      	bls.n	8001d3e <CheckErrors+0x6e>
        Volt_max = Volt_Reg[i][j];
 8001d26:	4987      	ldr	r1, [pc, #540]	; (8001f44 <CheckErrors+0x274>)
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	4413      	add	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	4413      	add	r3, r2
 8001d36:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001d3a:	4b7c      	ldr	r3, [pc, #496]	; (8001f2c <CheckErrors+0x25c>)
 8001d3c:	801a      	strh	r2, [r3, #0]

      if (Volt_Reg[i][j] < Volt_min)
 8001d3e:	4981      	ldr	r1, [pc, #516]	; (8001f44 <CheckErrors+0x274>)
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	4613      	mov	r3, r2
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	4413      	add	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001d52:	4b77      	ldr	r3, [pc, #476]	; (8001f30 <CheckErrors+0x260>)
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d20b      	bcs.n	8001d72 <CheckErrors+0xa2>
        Volt_min = Volt_Reg[i][j];
 8001d5a:	497a      	ldr	r1, [pc, #488]	; (8001f44 <CheckErrors+0x274>)
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	4413      	add	r3, r2
 8001d6a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001d6e:	4b70      	ldr	r3, [pc, #448]	; (8001f30 <CheckErrors+0x260>)
 8001d70:	801a      	strh	r2, [r3, #0]

      volt_total += Volt_Reg[i][j]; // Calculating overall voltage
 8001d72:	4974      	ldr	r1, [pc, #464]	; (8001f44 <CheckErrors+0x274>)
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	4613      	mov	r3, r2
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	4413      	add	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	4413      	add	r3, r2
 8001d82:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001d86:	ee07 3a90 	vmov	s15, r3
 8001d8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d8e:	4b69      	ldr	r3, [pc, #420]	; (8001f34 <CheckErrors+0x264>)
 8001d90:	edd3 7a00 	vldr	s15, [r3]
 8001d94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d98:	4b66      	ldr	r3, [pc, #408]	; (8001f34 <CheckErrors+0x264>)
 8001d9a:	edc3 7a00 	vstr	s15, [r3]
    for (int j = 0; j < VOLT_COUNT; j++)
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	3301      	adds	r3, #1
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	2b0b      	cmp	r3, #11
 8001da8:	ddaf      	ble.n	8001d0a <CheckErrors+0x3a>
  for (int i = 0; i < STACK_COUNT; i++)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	3301      	adds	r3, #1
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2b07      	cmp	r3, #7
 8001db4:	dda6      	ble.n	8001d04 <CheckErrors+0x34>
    }
  }

  volt_total = volt_total / 1000.0; // converting milli-Volts to Volts
 8001db6:	4b5f      	ldr	r3, [pc, #380]	; (8001f34 <CheckErrors+0x264>)
 8001db8:	ed93 7a00 	vldr	s14, [r3]
 8001dbc:	eddf 6a62 	vldr	s13, [pc, #392]	; 8001f48 <CheckErrors+0x278>
 8001dc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dc4:	4b5b      	ldr	r3, [pc, #364]	; (8001f34 <CheckErrors+0x264>)
 8001dc6:	edc3 7a00 	vstr	s15, [r3]

  for (int i = 0; i < STACK_COUNT; i++)
 8001dca:	2300      	movs	r3, #0
 8001dcc:	607b      	str	r3, [r7, #4]
 8001dce:	e03f      	b.n	8001e50 <CheckErrors+0x180>
  {
    //		Temp_avg[i] = 0;

    for (int j = 0; j < TEMP_COUNT; j++)
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	603b      	str	r3, [r7, #0]
 8001dd4:	e036      	b.n	8001e44 <CheckErrors+0x174>
    {
      if (Temp_Reg[i][j] > Temp_max)
 8001dd6:	495d      	ldr	r1, [pc, #372]	; (8001f4c <CheckErrors+0x27c>)
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4413      	add	r3, r2
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	18ca      	adds	r2, r1, r3
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	4413      	add	r3, r2
 8001de8:	781a      	ldrb	r2, [r3, #0]
 8001dea:	4b53      	ldr	r3, [pc, #332]	; (8001f38 <CheckErrors+0x268>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d90b      	bls.n	8001e0a <CheckErrors+0x13a>
        Temp_max = Temp_Reg[i][j];
 8001df2:	4956      	ldr	r1, [pc, #344]	; (8001f4c <CheckErrors+0x27c>)
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	4613      	mov	r3, r2
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	4413      	add	r3, r2
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	18ca      	adds	r2, r1, r3
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	4413      	add	r3, r2
 8001e04:	781a      	ldrb	r2, [r3, #0]
 8001e06:	4b4c      	ldr	r3, [pc, #304]	; (8001f38 <CheckErrors+0x268>)
 8001e08:	701a      	strb	r2, [r3, #0]

      if (Temp_Reg[i][j] < Temp_min)
 8001e0a:	4950      	ldr	r1, [pc, #320]	; (8001f4c <CheckErrors+0x27c>)
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	4413      	add	r3, r2
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	18ca      	adds	r2, r1, r3
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	781a      	ldrb	r2, [r3, #0]
 8001e1e:	4b47      	ldr	r3, [pc, #284]	; (8001f3c <CheckErrors+0x26c>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d20b      	bcs.n	8001e3e <CheckErrors+0x16e>
        Temp_min = Temp_Reg[i][j];
 8001e26:	4949      	ldr	r1, [pc, #292]	; (8001f4c <CheckErrors+0x27c>)
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	4413      	add	r3, r2
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	18ca      	adds	r2, r1, r3
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	4413      	add	r3, r2
 8001e38:	781a      	ldrb	r2, [r3, #0]
 8001e3a:	4b40      	ldr	r3, [pc, #256]	; (8001f3c <CheckErrors+0x26c>)
 8001e3c:	701a      	strb	r2, [r3, #0]
    for (int j = 0; j < TEMP_COUNT; j++)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	3301      	adds	r3, #1
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	2b05      	cmp	r3, #5
 8001e48:	ddc5      	ble.n	8001dd6 <CheckErrors+0x106>
  for (int i = 0; i < STACK_COUNT; i++)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	607b      	str	r3, [r7, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b07      	cmp	r3, #7
 8001e54:	ddbc      	ble.n	8001dd0 <CheckErrors+0x100>
    }

    //		Temp_avg[i] = Temp_avg[i]/TEMP_COUNT;
  }

  if (Volt_max > 4200)
 8001e56:	4b35      	ldr	r3, [pc, #212]	; (8001f2c <CheckErrors+0x25c>)
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	f241 0268 	movw	r2, #4200	; 0x1068
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d903      	bls.n	8001e6a <CheckErrors+0x19a>
    Error_State = Overvoltage;
 8001e62:	4b37      	ldr	r3, [pc, #220]	; (8001f40 <CheckErrors+0x270>)
 8001e64:	2201      	movs	r2, #1
 8001e66:	701a      	strb	r2, [r3, #0]
 8001e68:	e007      	b.n	8001e7a <CheckErrors+0x1aa>

  else if (Volt_min < 3200)
 8001e6a:	4b31      	ldr	r3, [pc, #196]	; (8001f30 <CheckErrors+0x260>)
 8001e6c:	881b      	ldrh	r3, [r3, #0]
 8001e6e:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8001e72:	d202      	bcs.n	8001e7a <CheckErrors+0x1aa>
    Error_State = Undervoltage;
 8001e74:	4b32      	ldr	r3, [pc, #200]	; (8001f40 <CheckErrors+0x270>)
 8001e76:	2202      	movs	r2, #2
 8001e78:	701a      	strb	r2, [r3, #0]
//	  temp_flag++;
//
//  }
//  else
//	  temp_flag = 0;
  if (chg_mode == 0 && Temp_max > 205 && Temp_max < 215) // in case of connector removal
 8001e7a:	4b35      	ldr	r3, [pc, #212]	; (8001f50 <CheckErrors+0x280>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10b      	bne.n	8001e9a <CheckErrors+0x1ca>
 8001e82:	4b2d      	ldr	r3, [pc, #180]	; (8001f38 <CheckErrors+0x268>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2bcd      	cmp	r3, #205	; 0xcd
 8001e88:	d907      	bls.n	8001e9a <CheckErrors+0x1ca>
 8001e8a:	4b2b      	ldr	r3, [pc, #172]	; (8001f38 <CheckErrors+0x268>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2bd6      	cmp	r3, #214	; 0xd6
 8001e90:	d803      	bhi.n	8001e9a <CheckErrors+0x1ca>
  	  Error_State = Overtemperature;
 8001e92:	4b2b      	ldr	r3, [pc, #172]	; (8001f40 <CheckErrors+0x270>)
 8001e94:	2203      	movs	r2, #3
 8001e96:	701a      	strb	r2, [r3, #0]
 8001e98:	e03b      	b.n	8001f12 <CheckErrors+0x242>

  else if (chg_mode == 0 && Temp_max < 54)
 8001e9a:	4b2d      	ldr	r3, [pc, #180]	; (8001f50 <CheckErrors+0x280>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d107      	bne.n	8001eb2 <CheckErrors+0x1e2>
 8001ea2:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <CheckErrors+0x268>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b35      	cmp	r3, #53	; 0x35
 8001ea8:	d803      	bhi.n	8001eb2 <CheckErrors+0x1e2>
	  temp_flag = 0;
 8001eaa:	4b2a      	ldr	r3, [pc, #168]	; (8001f54 <CheckErrors+0x284>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	801a      	strh	r2, [r3, #0]
 8001eb0:	e02f      	b.n	8001f12 <CheckErrors+0x242>
  else if (chg_mode == 0 && Temp_max > 54 && Temp_max < 59)
 8001eb2:	4b27      	ldr	r3, [pc, #156]	; (8001f50 <CheckErrors+0x280>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10e      	bne.n	8001ed8 <CheckErrors+0x208>
 8001eba:	4b1f      	ldr	r3, [pc, #124]	; (8001f38 <CheckErrors+0x268>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b36      	cmp	r3, #54	; 0x36
 8001ec0:	d90a      	bls.n	8001ed8 <CheckErrors+0x208>
 8001ec2:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <CheckErrors+0x268>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b3a      	cmp	r3, #58	; 0x3a
 8001ec8:	d806      	bhi.n	8001ed8 <CheckErrors+0x208>
	  ++temp_flag;
 8001eca:	4b22      	ldr	r3, [pc, #136]	; (8001f54 <CheckErrors+0x284>)
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <CheckErrors+0x284>)
 8001ed4:	801a      	strh	r2, [r3, #0]
 8001ed6:	e01c      	b.n	8001f12 <CheckErrors+0x242>
  else if (chg_mode == 0 && Temp_max > 59)
 8001ed8:	4b1d      	ldr	r3, [pc, #116]	; (8001f50 <CheckErrors+0x280>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d10d      	bne.n	8001efc <CheckErrors+0x22c>
 8001ee0:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <CheckErrors+0x268>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b3b      	cmp	r3, #59	; 0x3b
 8001ee6:	d909      	bls.n	8001efc <CheckErrors+0x22c>
  {
	  if(temp_flag > 10000)
 8001ee8:	4b1a      	ldr	r3, [pc, #104]	; (8001f54 <CheckErrors+0x284>)
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	f242 7210 	movw	r2, #10000	; 0x2710
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d90e      	bls.n	8001f12 <CheckErrors+0x242>
		  Error_State = Overtemperature;
 8001ef4:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <CheckErrors+0x270>)
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	701a      	strb	r2, [r3, #0]
	  if(temp_flag > 10000)
 8001efa:	e00a      	b.n	8001f12 <CheckErrors+0x242>
  }

  else if (chg_mode == 1 && Temp_max > 44) // in case of charging
 8001efc:	4b14      	ldr	r3, [pc, #80]	; (8001f50 <CheckErrors+0x280>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d106      	bne.n	8001f12 <CheckErrors+0x242>
 8001f04:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <CheckErrors+0x268>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b2c      	cmp	r3, #44	; 0x2c
 8001f0a:	d902      	bls.n	8001f12 <CheckErrors+0x242>
	  Error_State = Overtemperature;
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <CheckErrors+0x270>)
 8001f0e:	2203      	movs	r2, #3
 8001f10:	701a      	strb	r2, [r3, #0]
  //	}

  if (Temp_max > 216)
 8001f12:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <CheckErrors+0x268>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2bd8      	cmp	r3, #216	; 0xd8
 8001f18:	d902      	bls.n	8001f20 <CheckErrors+0x250>
	  Error_State = OK;
 8001f1a:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <CheckErrors+0x270>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	701a      	strb	r2, [r3, #0]
}
 8001f20:	bf00      	nop
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	20000a90 	.word	0x20000a90
 8001f30:	20000a92 	.word	0x20000a92
 8001f34:	20000a8c 	.word	0x20000a8c
 8001f38:	20000a94 	.word	0x20000a94
 8001f3c:	20000a95 	.word	0x20000a95
 8001f40:	20000acc 	.word	0x20000acc
 8001f44:	2000080c 	.word	0x2000080c
 8001f48:	447a0000 	.word	0x447a0000
 8001f4c:	200007dc 	.word	0x200007dc
 8001f50:	20000a88 	.word	0x20000a88
 8001f54:	20000aac 	.word	0x20000aac

08001f58 <current_sensor>:
//     float current = ((x/1.25)*400);
//	return current;
// }

float current_sensor()
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  HAL_ADC_Start(&hadc3);
 8001f5c:	484c      	ldr	r0, [pc, #304]	; (8002090 <current_sensor+0x138>)
 8001f5e:	f000 fe41 	bl	8002be4 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc3, 14);
 8001f62:	210e      	movs	r1, #14
 8001f64:	484a      	ldr	r0, [pc, #296]	; (8002090 <current_sensor+0x138>)
 8001f66:	f000 ff42 	bl	8002dee <HAL_ADC_PollForConversion>
  // int16_t v_out = HAL_ADC_GetValue(&hadc3);
  v_out = ADC_Read(ADC_CHANNEL_8);
 8001f6a:	2008      	movs	r0, #8
 8001f6c:	f000 f8ca 	bl	8002104 <ADC_Read>
 8001f70:	4603      	mov	r3, r0
 8001f72:	b21a      	sxth	r2, r3
 8001f74:	4b47      	ldr	r3, [pc, #284]	; (8002094 <current_sensor+0x13c>)
 8001f76:	801a      	strh	r2, [r3, #0]

  x = (v_out / 4096.00) * 3.3;
 8001f78:	4b46      	ldr	r3, [pc, #280]	; (8002094 <current_sensor+0x13c>)
 8001f7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe fa88 	bl	8000494 <__aeabi_i2d>
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	4b43      	ldr	r3, [pc, #268]	; (8002098 <current_sensor+0x140>)
 8001f8a:	f7fe fc17 	bl	80007bc <__aeabi_ddiv>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	4610      	mov	r0, r2
 8001f94:	4619      	mov	r1, r3
 8001f96:	a33c      	add	r3, pc, #240	; (adr r3, 8002088 <current_sensor+0x130>)
 8001f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9c:	f7fe fae4 	bl	8000568 <__aeabi_dmul>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f7fe fcf0 	bl	800098c <__aeabi_d2f>
 8001fac:	4603      	mov	r3, r0
 8001fae:	4a3b      	ldr	r2, [pc, #236]	; (800209c <current_sensor+0x144>)
 8001fb0:	6013      	str	r3, [r2, #0]
  x1 = x*2 - 2.5;
 8001fb2:	4b3a      	ldr	r3, [pc, #232]	; (800209c <current_sensor+0x144>)
 8001fb4:	edd3 7a00 	vldr	s15, [r3]
 8001fb8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001fbc:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8001fc0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001fc4:	4b36      	ldr	r3, [pc, #216]	; (80020a0 <current_sensor+0x148>)
 8001fc6:	edc3 7a00 	vstr	s15, [r3]
  current = ((x1 / 1.25) * 200)+5;
 8001fca:	4b35      	ldr	r3, [pc, #212]	; (80020a0 <current_sensor+0x148>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe fa72 	bl	80004b8 <__aeabi_f2d>
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	4b32      	ldr	r3, [pc, #200]	; (80020a4 <current_sensor+0x14c>)
 8001fda:	f7fe fbef 	bl	80007bc <__aeabi_ddiv>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	4b2f      	ldr	r3, [pc, #188]	; (80020a8 <current_sensor+0x150>)
 8001fec:	f7fe fabc 	bl	8000568 <__aeabi_dmul>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	4b2b      	ldr	r3, [pc, #172]	; (80020ac <current_sensor+0x154>)
 8001ffe:	f7fe f8fd 	bl	80001fc <__adddf3>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	4610      	mov	r0, r2
 8002008:	4619      	mov	r1, r3
 800200a:	f7fe fcbf 	bl	800098c <__aeabi_d2f>
 800200e:	4603      	mov	r3, r0
 8002010:	4a27      	ldr	r2, [pc, #156]	; (80020b0 <current_sensor+0x158>)
 8002012:	6013      	str	r3, [r2, #0]

  prev_current = curr_current;
 8002014:	4b27      	ldr	r3, [pc, #156]	; (80020b4 <current_sensor+0x15c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a27      	ldr	r2, [pc, #156]	; (80020b8 <current_sensor+0x160>)
 800201a:	6013      	str	r3, [r2, #0]
  curr_current = current;
 800201c:	4b24      	ldr	r3, [pc, #144]	; (80020b0 <current_sensor+0x158>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a24      	ldr	r2, [pc, #144]	; (80020b4 <current_sensor+0x15c>)
 8002022:	6013      	str	r3, [r2, #0]

  if (current < 8 && current > -2)
 8002024:	4b22      	ldr	r3, [pc, #136]	; (80020b0 <current_sensor+0x158>)
 8002026:	edd3 7a00 	vldr	s15, [r3]
 800202a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800202e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002036:	d50d      	bpl.n	8002054 <current_sensor+0xfc>
 8002038:	4b1d      	ldr	r3, [pc, #116]	; (80020b0 <current_sensor+0x158>)
 800203a:	edd3 7a00 	vldr	s15, [r3]
 800203e:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002042:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800204a:	dd03      	ble.n	8002054 <current_sensor+0xfc>
    current = 0;
 800204c:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <current_sensor+0x158>)
 800204e:	f04f 0200 	mov.w	r2, #0
 8002052:	601a      	str	r2, [r3, #0]

  if (curr_current - prev_current > 7)
 8002054:	4b17      	ldr	r3, [pc, #92]	; (80020b4 <current_sensor+0x15c>)
 8002056:	ed93 7a00 	vldr	s14, [r3]
 800205a:	4b17      	ldr	r3, [pc, #92]	; (80020b8 <current_sensor+0x160>)
 800205c:	edd3 7a00 	vldr	s15, [r3]
 8002060:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002064:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8002068:	eef4 7ac7 	vcmpe.f32	s15, s14
 800206c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002070:	dd03      	ble.n	800207a <current_sensor+0x122>
    current = 0;
 8002072:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <current_sensor+0x158>)
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	601a      	str	r2, [r3, #0]

  return current;
 800207a:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <current_sensor+0x158>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	ee07 3a90 	vmov	s15, r3
}
 8002082:	eeb0 0a67 	vmov.f32	s0, s15
 8002086:	bd80      	pop	{r7, pc}
 8002088:	66666666 	.word	0x66666666
 800208c:	400a6666 	.word	0x400a6666
 8002090:	20000080 	.word	0x20000080
 8002094:	20000a84 	.word	0x20000a84
 8002098:	40b00000 	.word	0x40b00000
 800209c:	20000ab4 	.word	0x20000ab4
 80020a0:	20000ab8 	.word	0x20000ab8
 80020a4:	3ff40000 	.word	0x3ff40000
 80020a8:	40690000 	.word	0x40690000
 80020ac:	40140000 	.word	0x40140000
 80020b0:	20000abc 	.word	0x20000abc
 80020b4:	20000ac4 	.word	0x20000ac4
 80020b8:	20000ac0 	.word	0x20000ac0

080020bc <Charger_CANTransmit>:

void Charger_CANTransmit(uint32_t id, uint32_t IDE, uint32_t RTR, uint32_t DLC, uint8_t *data)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08c      	sub	sp, #48	; 0x30
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
 80020c8:	603b      	str	r3, [r7, #0]
  uint32_t mailbox;
  CAN_TxHeaderTypeDef Header;
  Header.ExtId = id;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	61bb      	str	r3, [r7, #24]
  Header.IDE = CAN_ID_EXT;
 80020ce:	2304      	movs	r3, #4
 80020d0:	61fb      	str	r3, [r7, #28]
  Header.RTR = CAN_RTR_DATA;
 80020d2:	2300      	movs	r3, #0
 80020d4:	623b      	str	r3, [r7, #32]
  Header.DLC = DLC;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) > 0)
 80020da:	4809      	ldr	r0, [pc, #36]	; (8002100 <Charger_CANTransmit+0x44>)
 80020dc:	f001 fc49 	bl	8003972 <HAL_CAN_GetTxMailboxesFreeLevel>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d007      	beq.n	80020f6 <Charger_CANTransmit+0x3a>
  {
    HAL_CAN_AddTxMessage(&hcan1, &Header, data, &mailbox);
 80020e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020ea:	f107 0114 	add.w	r1, r7, #20
 80020ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020f0:	4803      	ldr	r0, [pc, #12]	; (8002100 <Charger_CANTransmit+0x44>)
 80020f2:	f001 fb63 	bl	80037bc <HAL_CAN_AddTxMessage>
  }
}
 80020f6:	bf00      	nop
 80020f8:	3730      	adds	r7, #48	; 0x30
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	200000c8 	.word	0x200000c8

08002104 <ADC_Read>:

uint16_t ADC_Read(uint32_t ADC_CH)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t val;
  ADC_ChannelConfTypeDef sConfig = {0};
 800210c:	f107 030c 	add.w	r3, r7, #12
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
  sConfig.Channel = ADC_CH;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	60fb      	str	r3, [r7, #12]
  sConfig.Rank = 1;
 800211e:	2301      	movs	r3, #1
 8002120:	613b      	str	r3, [r7, #16]
  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8002122:	f107 030c 	add.w	r3, r7, #12
 8002126:	4619      	mov	r1, r3
 8002128:	480b      	ldr	r0, [pc, #44]	; (8002158 <ADC_Read+0x54>)
 800212a:	f000 fef9 	bl	8002f20 <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(&hadc3);
 800212e:	480a      	ldr	r0, [pc, #40]	; (8002158 <ADC_Read+0x54>)
 8002130:	f000 fd58 	bl	8002be4 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc3, 1);
 8002134:	2101      	movs	r1, #1
 8002136:	4808      	ldr	r0, [pc, #32]	; (8002158 <ADC_Read+0x54>)
 8002138:	f000 fe59 	bl	8002dee <HAL_ADC_PollForConversion>
  val = HAL_ADC_GetValue(&hadc3);
 800213c:	4806      	ldr	r0, [pc, #24]	; (8002158 <ADC_Read+0x54>)
 800213e:	f000 fee1 	bl	8002f04 <HAL_ADC_GetValue>
 8002142:	61f8      	str	r0, [r7, #28]
  HAL_ADC_Stop(&hadc3);
 8002144:	4804      	ldr	r0, [pc, #16]	; (8002158 <ADC_Read+0x54>)
 8002146:	f000 fe1f 	bl	8002d88 <HAL_ADC_Stop>
  return val;
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	b29b      	uxth	r3, r3
}
 800214e:	4618      	mov	r0, r3
 8002150:	3720      	adds	r7, #32
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20000080 	.word	0x20000080

0800215c <CAN1Transmit>:
void CAN1Transmit(){
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
	for(int i=0;i<8;i++){
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	e06d      	b.n	8002244 <CAN1Transmit+0xe8>
		for(int j=0;j<4;j++){
 8002168:	2300      	movs	r3, #0
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	e010      	b.n	8002190 <CAN1Transmit+0x34>
			Txdata1[j]=Volt_Reg[i][j];
 800216e:	495f      	ldr	r1, [pc, #380]	; (80022ec <CAN1Transmit+0x190>)
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	4613      	mov	r3, r2
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	4413      	add	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4413      	add	r3, r2
 800217e:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8002182:	4a5b      	ldr	r2, [pc, #364]	; (80022f0 <CAN1Transmit+0x194>)
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int j=0;j<4;j++){
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	3301      	adds	r3, #1
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	2b03      	cmp	r3, #3
 8002194:	ddeb      	ble.n	800216e <CAN1Transmit+0x12>
		}
		eq_CAN_Tx(&hcan1,(i+1)*100,Txdata1,4);
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	3301      	adds	r3, #1
 800219a:	2264      	movs	r2, #100	; 0x64
 800219c:	fb02 f303 	mul.w	r3, r2, r3
 80021a0:	4619      	mov	r1, r3
 80021a2:	2304      	movs	r3, #4
 80021a4:	4a52      	ldr	r2, [pc, #328]	; (80022f0 <CAN1Transmit+0x194>)
 80021a6:	4853      	ldr	r0, [pc, #332]	; (80022f4 <CAN1Transmit+0x198>)
 80021a8:	f000 f8ae 	bl	8002308 <eq_CAN_Tx>
		for(int j=4;j<8;j++){
 80021ac:	2304      	movs	r3, #4
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	e011      	b.n	80021d6 <CAN1Transmit+0x7a>
			Txdata1[j-4]=Volt_Reg[i][j];
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	1f19      	subs	r1, r3, #4
 80021b6:	484d      	ldr	r0, [pc, #308]	; (80022ec <CAN1Transmit+0x190>)
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	4613      	mov	r3, r2
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	4413      	add	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	4413      	add	r3, r2
 80021c6:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 80021ca:	4b49      	ldr	r3, [pc, #292]	; (80022f0 <CAN1Transmit+0x194>)
 80021cc:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
		for(int j=4;j<8;j++){
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	3301      	adds	r3, #1
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2b07      	cmp	r3, #7
 80021da:	ddea      	ble.n	80021b2 <CAN1Transmit+0x56>
		}
		eq_CAN_Tx(&hcan1,(i+1)*100+1,Txdata1,4);
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	3301      	adds	r3, #1
 80021e0:	2264      	movs	r2, #100	; 0x64
 80021e2:	fb02 f303 	mul.w	r3, r2, r3
 80021e6:	3301      	adds	r3, #1
 80021e8:	4619      	mov	r1, r3
 80021ea:	2304      	movs	r3, #4
 80021ec:	4a40      	ldr	r2, [pc, #256]	; (80022f0 <CAN1Transmit+0x194>)
 80021ee:	4841      	ldr	r0, [pc, #260]	; (80022f4 <CAN1Transmit+0x198>)
 80021f0:	f000 f88a 	bl	8002308 <eq_CAN_Tx>
		for(int j=8;j<12;j++){
 80021f4:	2308      	movs	r3, #8
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	e012      	b.n	8002220 <CAN1Transmit+0xc4>
			Txdata1[j-8]=Volt_Reg[i][j];
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	f1a3 0108 	sub.w	r1, r3, #8
 8002200:	483a      	ldr	r0, [pc, #232]	; (80022ec <CAN1Transmit+0x190>)
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	4613      	mov	r3, r2
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	4413      	add	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	4413      	add	r3, r2
 8002210:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 8002214:	4b36      	ldr	r3, [pc, #216]	; (80022f0 <CAN1Transmit+0x194>)
 8002216:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
		for(int j=8;j<12;j++){
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	3301      	adds	r3, #1
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	2b0b      	cmp	r3, #11
 8002224:	dde9      	ble.n	80021fa <CAN1Transmit+0x9e>
		}
		eq_CAN_Tx(&hcan1,(i+1)*100+2,Txdata1,4);
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	3301      	adds	r3, #1
 800222a:	2264      	movs	r2, #100	; 0x64
 800222c:	fb02 f303 	mul.w	r3, r2, r3
 8002230:	3302      	adds	r3, #2
 8002232:	4619      	mov	r1, r3
 8002234:	2304      	movs	r3, #4
 8002236:	4a2e      	ldr	r2, [pc, #184]	; (80022f0 <CAN1Transmit+0x194>)
 8002238:	482e      	ldr	r0, [pc, #184]	; (80022f4 <CAN1Transmit+0x198>)
 800223a:	f000 f865 	bl	8002308 <eq_CAN_Tx>
	for(int i=0;i<8;i++){
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	3301      	adds	r3, #1
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	2b07      	cmp	r3, #7
 8002248:	dd8e      	ble.n	8002168 <CAN1Transmit+0xc>
	}
	for(int i=0;i<8;i++){
 800224a:	2300      	movs	r3, #0
 800224c:	607b      	str	r3, [r7, #4]
 800224e:	e026      	b.n	800229e <CAN1Transmit+0x142>
		for(int j=0;j<8;j++){
 8002250:	2300      	movs	r3, #0
 8002252:	603b      	str	r3, [r7, #0]
 8002254:	e011      	b.n	800227a <CAN1Transmit+0x11e>
			Txdata2[j]=Temp_Reg[i][j];
 8002256:	4928      	ldr	r1, [pc, #160]	; (80022f8 <CAN1Transmit+0x19c>)
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	4413      	add	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	18ca      	adds	r2, r1, r3
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	4413      	add	r3, r2
 8002268:	7819      	ldrb	r1, [r3, #0]
 800226a:	4a24      	ldr	r2, [pc, #144]	; (80022fc <CAN1Transmit+0x1a0>)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	4413      	add	r3, r2
 8002270:	460a      	mov	r2, r1
 8002272:	701a      	strb	r2, [r3, #0]
		for(int j=0;j<8;j++){
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	3301      	adds	r3, #1
 8002278:	603b      	str	r3, [r7, #0]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	2b07      	cmp	r3, #7
 800227e:	ddea      	ble.n	8002256 <CAN1Transmit+0xfa>
		}
		eq_CAN_Tx(&hcan1,(i+1)*100+3,Txdata2,8);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3301      	adds	r3, #1
 8002284:	2264      	movs	r2, #100	; 0x64
 8002286:	fb02 f303 	mul.w	r3, r2, r3
 800228a:	3303      	adds	r3, #3
 800228c:	4619      	mov	r1, r3
 800228e:	2308      	movs	r3, #8
 8002290:	4a1a      	ldr	r2, [pc, #104]	; (80022fc <CAN1Transmit+0x1a0>)
 8002292:	4818      	ldr	r0, [pc, #96]	; (80022f4 <CAN1Transmit+0x198>)
 8002294:	f000 f838 	bl	8002308 <eq_CAN_Tx>
	for(int i=0;i<8;i++){
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3301      	adds	r3, #1
 800229c:	607b      	str	r3, [r7, #4]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b07      	cmp	r3, #7
 80022a2:	ddd5      	ble.n	8002250 <CAN1Transmit+0xf4>
	}
	while(1)
		{
		   if ((hcan1.Instance->TSR & CAN_TSR_TME0) || (hcan1.Instance->TSR & CAN_TSR_TME1) || (hcan1.Instance->TSR & CAN_TSR_TME2))  // checking empty CAN Tx mailboxes for can2 replace hcan1 with hcan2
 80022a4:	4b13      	ldr	r3, [pc, #76]	; (80022f4 <CAN1Transmit+0x198>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10d      	bne.n	80022ce <CAN1Transmit+0x172>
 80022b2:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <CAN1Transmit+0x198>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d106      	bne.n	80022ce <CAN1Transmit+0x172>
 80022c0:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <CAN1Transmit+0x198>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0ea      	beq.n	80022a4 <CAN1Transmit+0x148>
		   {
			dq_CAN_Tx();
 80022ce:	f000 f887 	bl	80023e0 <dq_CAN_Tx>
			if (queueHead == queueTail) {
 80022d2:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <CAN1Transmit+0x1a4>)
 80022d4:	781a      	ldrb	r2, [r3, #0]
 80022d6:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <CAN1Transmit+0x1a8>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d000      	beq.n	80022e0 <CAN1Transmit+0x184>
		   if ((hcan1.Instance->TSR & CAN_TSR_TME0) || (hcan1.Instance->TSR & CAN_TSR_TME1) || (hcan1.Instance->TSR & CAN_TSR_TME2))  // checking empty CAN Tx mailboxes for can2 replace hcan1 with hcan2
 80022de:	e7e1      	b.n	80022a4 <CAN1Transmit+0x148>
					// Queue is empty, nothing to dequeue
					break; // once queue empty no need for infinite queue
 80022e0:	bf00      	nop
		   }
		}
	}
}
 80022e2:	bf00      	nop
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	2000080c 	.word	0x2000080c
 80022f0:	200007c0 	.word	0x200007c0
 80022f4:	200000c8 	.word	0x200000c8
 80022f8:	200007dc 	.word	0x200007dc
 80022fc:	200007c8 	.word	0x200007c8
 8002300:	200007b0 	.word	0x200007b0
 8002304:	200007b1 	.word	0x200007b1

08002308 <eq_CAN_Tx>:
void eq_CAN_Tx(CAN_HandleTypeDef* hcan, uint32_t id, uint16_t* data,uint8_t len) {
 8002308:	b480      	push	{r7}
 800230a:	b087      	sub	sp, #28
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
 8002314:	70fb      	strb	r3, [r7, #3]
    // Check if queue is full
    if ((queueHead + 1) % 10 == queueTail) {
 8002316:	4b2e      	ldr	r3, [pc, #184]	; (80023d0 <eq_CAN_Tx+0xc8>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	1c59      	adds	r1, r3, #1
 800231c:	4b2d      	ldr	r3, [pc, #180]	; (80023d4 <eq_CAN_Tx+0xcc>)
 800231e:	fb83 2301 	smull	r2, r3, r3, r1
 8002322:	109a      	asrs	r2, r3, #2
 8002324:	17cb      	asrs	r3, r1, #31
 8002326:	1ad2      	subs	r2, r2, r3
 8002328:	4613      	mov	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	1aca      	subs	r2, r1, r3
 8002332:	4b29      	ldr	r3, [pc, #164]	; (80023d8 <eq_CAN_Tx+0xd0>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d044      	beq.n	80023c4 <eq_CAN_Tx+0xbc>
        // Queue is full, discard new message
        return;
    }

    // Enqueue message
    canMessageQueue[queueHead].id = id;
 800233a:	4b25      	ldr	r3, [pc, #148]	; (80023d0 <eq_CAN_Tx+0xc8>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	4619      	mov	r1, r3
 8002340:	4a26      	ldr	r2, [pc, #152]	; (80023dc <eq_CAN_Tx+0xd4>)
 8002342:	460b      	mov	r3, r1
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	1a5b      	subs	r3, r3, r1
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	3304      	adds	r3, #4
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < len; i++) {
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	e014      	b.n	8002382 <eq_CAN_Tx+0x7a>
        canMessageQueue[queueHead].data[i] = data[i];
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	4413      	add	r3, r2
 8002360:	4a1b      	ldr	r2, [pc, #108]	; (80023d0 <eq_CAN_Tx+0xc8>)
 8002362:	7812      	ldrb	r2, [r2, #0]
 8002364:	8818      	ldrh	r0, [r3, #0]
 8002366:	491d      	ldr	r1, [pc, #116]	; (80023dc <eq_CAN_Tx+0xd4>)
 8002368:	4613      	mov	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	1a9b      	subs	r3, r3, r2
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	4413      	add	r3, r2
 8002374:	3304      	adds	r3, #4
 8002376:	4602      	mov	r2, r0
 8002378:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (int i = 0; i < len; i++) {
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	3301      	adds	r3, #1
 8002380:	617b      	str	r3, [r7, #20]
 8002382:	78fb      	ldrb	r3, [r7, #3]
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	429a      	cmp	r2, r3
 8002388:	dbe6      	blt.n	8002358 <eq_CAN_Tx+0x50>
    }
    canMessageQueue[queueHead].hcan = hcan;
 800238a:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <eq_CAN_Tx+0xc8>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	4619      	mov	r1, r3
 8002390:	4a12      	ldr	r2, [pc, #72]	; (80023dc <eq_CAN_Tx+0xd4>)
 8002392:	460b      	mov	r3, r1
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	1a5b      	subs	r3, r3, r1
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	601a      	str	r2, [r3, #0]
    queueHead = (queueHead + 1) % 10;
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <eq_CAN_Tx+0xc8>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <eq_CAN_Tx+0xcc>)
 80023a8:	fb83 1302 	smull	r1, r3, r3, r2
 80023ac:	1099      	asrs	r1, r3, #2
 80023ae:	17d3      	asrs	r3, r2, #31
 80023b0:	1ac9      	subs	r1, r1, r3
 80023b2:	460b      	mov	r3, r1
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	440b      	add	r3, r1
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	1ad1      	subs	r1, r2, r3
 80023bc:	b2ca      	uxtb	r2, r1
 80023be:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <eq_CAN_Tx+0xc8>)
 80023c0:	701a      	strb	r2, [r3, #0]
 80023c2:	e000      	b.n	80023c6 <eq_CAN_Tx+0xbe>
        return;
 80023c4:	bf00      	nop
}
 80023c6:	371c      	adds	r7, #28
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	200007b0 	.word	0x200007b0
 80023d4:	66666667 	.word	0x66666667
 80023d8:	200007b1 	.word	0x200007b1
 80023dc:	20000238 	.word	0x20000238

080023e0 <dq_CAN_Tx>:

void dq_CAN_Tx(void) {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
    // Check if queue is empty
    if (queueHead == queueTail) {
 80023e6:	4b17      	ldr	r3, [pc, #92]	; (8002444 <dq_CAN_Tx+0x64>)
 80023e8:	781a      	ldrb	r2, [r3, #0]
 80023ea:	4b17      	ldr	r3, [pc, #92]	; (8002448 <dq_CAN_Tx+0x68>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d024      	beq.n	800243c <dq_CAN_Tx+0x5c>
        // Queue is empty, nothing to dequeue
        return;
    }

    // Transmit message at the head of the queue
    CanMessage* message = &canMessageQueue[queueTail];
 80023f2:	4b15      	ldr	r3, [pc, #84]	; (8002448 <dq_CAN_Tx+0x68>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	461a      	mov	r2, r3
 80023f8:	4613      	mov	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	1a9b      	subs	r3, r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4a12      	ldr	r2, [pc, #72]	; (800244c <dq_CAN_Tx+0x6c>)
 8002402:	4413      	add	r3, r2
 8002404:	607b      	str	r3, [r7, #4]

    CAN_Tx(message -> hcan,message->id,message->data);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6859      	ldr	r1, [r3, #4]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3308      	adds	r3, #8
 8002412:	461a      	mov	r2, r3
 8002414:	f000 f81e 	bl	8002454 <CAN_Tx>
    // Update queue tail
    queueTail = (queueTail + 1) % 10;
 8002418:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <dq_CAN_Tx+0x68>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <dq_CAN_Tx+0x70>)
 8002420:	fb83 1302 	smull	r1, r3, r3, r2
 8002424:	1099      	asrs	r1, r3, #2
 8002426:	17d3      	asrs	r3, r2, #31
 8002428:	1ac9      	subs	r1, r1, r3
 800242a:	460b      	mov	r3, r1
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	1ad1      	subs	r1, r2, r3
 8002434:	b2ca      	uxtb	r2, r1
 8002436:	4b04      	ldr	r3, [pc, #16]	; (8002448 <dq_CAN_Tx+0x68>)
 8002438:	701a      	strb	r2, [r3, #0]
 800243a:	e000      	b.n	800243e <dq_CAN_Tx+0x5e>
        return;
 800243c:	bf00      	nop
}
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	200007b0 	.word	0x200007b0
 8002448:	200007b1 	.word	0x200007b1
 800244c:	20000238 	.word	0x20000238
 8002450:	66666667 	.word	0x66666667

08002454 <CAN_Tx>:

void CAN_Tx(CAN_HandleTypeDef* hcan, uint32_t id, uint8_t* data_tx){
 8002454:	b580      	push	{r7, lr}
 8002456:	b08c      	sub	sp, #48	; 0x30
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
	    CAN_TxHeaderTypeDef TxHeader;
		uint32_t Txmailbox = 0x00U;
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]
		TxHeader.DLC=8;
 8002464:	2308      	movs	r3, #8
 8002466:	62bb      	str	r3, [r7, #40]	; 0x28
	    TxHeader.StdId=id; // 11 bits
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	61bb      	str	r3, [r7, #24]
	    TxHeader.IDE=CAN_ID_STD;
 800246c:	2300      	movs	r3, #0
 800246e:	623b      	str	r3, [r7, #32]
	    TxHeader.RTR=CAN_RTR_DATA;
 8002470:	2300      	movs	r3, #0
 8002472:	627b      	str	r3, [r7, #36]	; 0x24

		if(HAL_CAN_GetTxMailboxesFreeLevel(hcan)>0){
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f001 fa7c 	bl	8003972 <HAL_CAN_GetTxMailboxesFreeLevel>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00c      	beq.n	800249a <CAN_Tx+0x46>


			if (HAL_CAN_AddTxMessage(hcan, &TxHeader, data_tx, &Txmailbox)!= HAL_OK){
 8002480:	f107 0314 	add.w	r3, r7, #20
 8002484:	f107 0118 	add.w	r1, r7, #24
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f001 f996 	bl	80037bc <HAL_CAN_AddTxMessage>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <CAN_Tx+0x46>
				Error_Handler();
 8002496:	f000 f804 	bl	80024a2 <Error_Handler>
			}
		}


}
 800249a:	bf00      	nop
 800249c:	3730      	adds	r7, #48	; 0x30
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024a2:	b480      	push	{r7}
 80024a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024a6:	b672      	cpsid	i
}
 80024a8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024aa:	e7fe      	b.n	80024aa <Error_Handler+0x8>

080024ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	607b      	str	r3, [r7, #4]
 80024b6:	4b10      	ldr	r3, [pc, #64]	; (80024f8 <HAL_MspInit+0x4c>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	4a0f      	ldr	r2, [pc, #60]	; (80024f8 <HAL_MspInit+0x4c>)
 80024bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024c0:	6453      	str	r3, [r2, #68]	; 0x44
 80024c2:	4b0d      	ldr	r3, [pc, #52]	; (80024f8 <HAL_MspInit+0x4c>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ca:	607b      	str	r3, [r7, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	603b      	str	r3, [r7, #0]
 80024d2:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <HAL_MspInit+0x4c>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	4a08      	ldr	r2, [pc, #32]	; (80024f8 <HAL_MspInit+0x4c>)
 80024d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024dc:	6413      	str	r3, [r2, #64]	; 0x40
 80024de:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <HAL_MspInit+0x4c>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e6:	603b      	str	r3, [r7, #0]
 80024e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40023800 	.word	0x40023800

080024fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08c      	sub	sp, #48	; 0x30
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002504:	f107 031c 	add.w	r3, r7, #28
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	60da      	str	r2, [r3, #12]
 8002512:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a3b      	ldr	r2, [pc, #236]	; (8002608 <HAL_ADC_MspInit+0x10c>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d128      	bne.n	8002570 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	61bb      	str	r3, [r7, #24]
 8002522:	4b3a      	ldr	r3, [pc, #232]	; (800260c <HAL_ADC_MspInit+0x110>)
 8002524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002526:	4a39      	ldr	r2, [pc, #228]	; (800260c <HAL_ADC_MspInit+0x110>)
 8002528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800252c:	6453      	str	r3, [r2, #68]	; 0x44
 800252e:	4b37      	ldr	r3, [pc, #220]	; (800260c <HAL_ADC_MspInit+0x110>)
 8002530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002536:	61bb      	str	r3, [r7, #24]
 8002538:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	4b33      	ldr	r3, [pc, #204]	; (800260c <HAL_ADC_MspInit+0x110>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	4a32      	ldr	r2, [pc, #200]	; (800260c <HAL_ADC_MspInit+0x110>)
 8002544:	f043 0304 	orr.w	r3, r3, #4
 8002548:	6313      	str	r3, [r2, #48]	; 0x30
 800254a:	4b30      	ldr	r3, [pc, #192]	; (800260c <HAL_ADC_MspInit+0x110>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	f003 0304 	and.w	r3, r3, #4
 8002552:	617b      	str	r3, [r7, #20]
 8002554:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002556:	2304      	movs	r3, #4
 8002558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800255a:	2303      	movs	r3, #3
 800255c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002562:	f107 031c 	add.w	r3, r7, #28
 8002566:	4619      	mov	r1, r3
 8002568:	4829      	ldr	r0, [pc, #164]	; (8002610 <HAL_ADC_MspInit+0x114>)
 800256a:	f001 feb1 	bl	80042d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800256e:	e047      	b.n	8002600 <HAL_ADC_MspInit+0x104>
  else if(hadc->Instance==ADC3)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a27      	ldr	r2, [pc, #156]	; (8002614 <HAL_ADC_MspInit+0x118>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d142      	bne.n	8002600 <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	4b23      	ldr	r3, [pc, #140]	; (800260c <HAL_ADC_MspInit+0x110>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	4a22      	ldr	r2, [pc, #136]	; (800260c <HAL_ADC_MspInit+0x110>)
 8002584:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002588:	6453      	str	r3, [r2, #68]	; 0x44
 800258a:	4b20      	ldr	r3, [pc, #128]	; (800260c <HAL_ADC_MspInit+0x110>)
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	4b1c      	ldr	r3, [pc, #112]	; (800260c <HAL_ADC_MspInit+0x110>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	4a1b      	ldr	r2, [pc, #108]	; (800260c <HAL_ADC_MspInit+0x110>)
 80025a0:	f043 0320 	orr.w	r3, r3, #32
 80025a4:	6313      	str	r3, [r2, #48]	; 0x30
 80025a6:	4b19      	ldr	r3, [pc, #100]	; (800260c <HAL_ADC_MspInit+0x110>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	f003 0320 	and.w	r3, r3, #32
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	4b15      	ldr	r3, [pc, #84]	; (800260c <HAL_ADC_MspInit+0x110>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	4a14      	ldr	r2, [pc, #80]	; (800260c <HAL_ADC_MspInit+0x110>)
 80025bc:	f043 0304 	orr.w	r3, r3, #4
 80025c0:	6313      	str	r3, [r2, #48]	; 0x30
 80025c2:	4b12      	ldr	r3, [pc, #72]	; (800260c <HAL_ADC_MspInit+0x110>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	f003 0304 	and.w	r3, r3, #4
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10;
 80025ce:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80025d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025d4:	2303      	movs	r3, #3
 80025d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025dc:	f107 031c 	add.w	r3, r7, #28
 80025e0:	4619      	mov	r1, r3
 80025e2:	480d      	ldr	r0, [pc, #52]	; (8002618 <HAL_ADC_MspInit+0x11c>)
 80025e4:	f001 fe74 	bl	80042d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80025e8:	2301      	movs	r3, #1
 80025ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025ec:	2303      	movs	r3, #3
 80025ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025f4:	f107 031c 	add.w	r3, r7, #28
 80025f8:	4619      	mov	r1, r3
 80025fa:	4805      	ldr	r0, [pc, #20]	; (8002610 <HAL_ADC_MspInit+0x114>)
 80025fc:	f001 fe68 	bl	80042d0 <HAL_GPIO_Init>
}
 8002600:	bf00      	nop
 8002602:	3730      	adds	r7, #48	; 0x30
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40012000 	.word	0x40012000
 800260c:	40023800 	.word	0x40023800
 8002610:	40020800 	.word	0x40020800
 8002614:	40012200 	.word	0x40012200
 8002618:	40021400 	.word	0x40021400

0800261c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08c      	sub	sp, #48	; 0x30
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002624:	f107 031c 	add.w	r3, r7, #28
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	60da      	str	r2, [r3, #12]
 8002632:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a63      	ldr	r2, [pc, #396]	; (80027c8 <HAL_CAN_MspInit+0x1ac>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d156      	bne.n	80026ec <HAL_CAN_MspInit+0xd0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800263e:	4b63      	ldr	r3, [pc, #396]	; (80027cc <HAL_CAN_MspInit+0x1b0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	3301      	adds	r3, #1
 8002644:	4a61      	ldr	r2, [pc, #388]	; (80027cc <HAL_CAN_MspInit+0x1b0>)
 8002646:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002648:	4b60      	ldr	r3, [pc, #384]	; (80027cc <HAL_CAN_MspInit+0x1b0>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d10d      	bne.n	800266c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002650:	2300      	movs	r3, #0
 8002652:	61bb      	str	r3, [r7, #24]
 8002654:	4b5e      	ldr	r3, [pc, #376]	; (80027d0 <HAL_CAN_MspInit+0x1b4>)
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	4a5d      	ldr	r2, [pc, #372]	; (80027d0 <HAL_CAN_MspInit+0x1b4>)
 800265a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800265e:	6413      	str	r3, [r2, #64]	; 0x40
 8002660:	4b5b      	ldr	r3, [pc, #364]	; (80027d0 <HAL_CAN_MspInit+0x1b4>)
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002668:	61bb      	str	r3, [r7, #24]
 800266a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	4b57      	ldr	r3, [pc, #348]	; (80027d0 <HAL_CAN_MspInit+0x1b4>)
 8002672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002674:	4a56      	ldr	r2, [pc, #344]	; (80027d0 <HAL_CAN_MspInit+0x1b4>)
 8002676:	f043 0301 	orr.w	r3, r3, #1
 800267a:	6313      	str	r3, [r2, #48]	; 0x30
 800267c:	4b54      	ldr	r3, [pc, #336]	; (80027d0 <HAL_CAN_MspInit+0x1b4>)
 800267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	617b      	str	r3, [r7, #20]
 8002686:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002688:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800268c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268e:	2302      	movs	r3, #2
 8002690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002696:	2303      	movs	r3, #3
 8002698:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800269a:	2309      	movs	r3, #9
 800269c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269e:	f107 031c 	add.w	r3, r7, #28
 80026a2:	4619      	mov	r1, r3
 80026a4:	484b      	ldr	r0, [pc, #300]	; (80027d4 <HAL_CAN_MspInit+0x1b8>)
 80026a6:	f001 fe13 	bl	80042d0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80026aa:	2200      	movs	r2, #0
 80026ac:	2100      	movs	r1, #0
 80026ae:	2013      	movs	r0, #19
 80026b0:	f001 fdd7 	bl	8004262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80026b4:	2013      	movs	r0, #19
 80026b6:	f001 fdf0 	bl	800429a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80026ba:	2200      	movs	r2, #0
 80026bc:	2100      	movs	r1, #0
 80026be:	2014      	movs	r0, #20
 80026c0:	f001 fdcf 	bl	8004262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80026c4:	2014      	movs	r0, #20
 80026c6:	f001 fde8 	bl	800429a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80026ca:	2200      	movs	r2, #0
 80026cc:	2100      	movs	r1, #0
 80026ce:	2015      	movs	r0, #21
 80026d0:	f001 fdc7 	bl	8004262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80026d4:	2015      	movs	r0, #21
 80026d6:	f001 fde0 	bl	800429a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80026da:	2200      	movs	r2, #0
 80026dc:	2100      	movs	r1, #0
 80026de:	2016      	movs	r0, #22
 80026e0:	f001 fdbf 	bl	8004262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80026e4:	2016      	movs	r0, #22
 80026e6:	f001 fdd8 	bl	800429a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80026ea:	e068      	b.n	80027be <HAL_CAN_MspInit+0x1a2>
  else if(hcan->Instance==CAN2)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a39      	ldr	r2, [pc, #228]	; (80027d8 <HAL_CAN_MspInit+0x1bc>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d163      	bne.n	80027be <HAL_CAN_MspInit+0x1a2>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	4b35      	ldr	r3, [pc, #212]	; (80027d0 <HAL_CAN_MspInit+0x1b4>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	4a34      	ldr	r2, [pc, #208]	; (80027d0 <HAL_CAN_MspInit+0x1b4>)
 8002700:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002704:	6413      	str	r3, [r2, #64]	; 0x40
 8002706:	4b32      	ldr	r3, [pc, #200]	; (80027d0 <HAL_CAN_MspInit+0x1b4>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800270e:	613b      	str	r3, [r7, #16]
 8002710:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002712:	4b2e      	ldr	r3, [pc, #184]	; (80027cc <HAL_CAN_MspInit+0x1b0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	3301      	adds	r3, #1
 8002718:	4a2c      	ldr	r2, [pc, #176]	; (80027cc <HAL_CAN_MspInit+0x1b0>)
 800271a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800271c:	4b2b      	ldr	r3, [pc, #172]	; (80027cc <HAL_CAN_MspInit+0x1b0>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d10d      	bne.n	8002740 <HAL_CAN_MspInit+0x124>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002724:	2300      	movs	r3, #0
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	4b29      	ldr	r3, [pc, #164]	; (80027d0 <HAL_CAN_MspInit+0x1b4>)
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	4a28      	ldr	r2, [pc, #160]	; (80027d0 <HAL_CAN_MspInit+0x1b4>)
 800272e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002732:	6413      	str	r3, [r2, #64]	; 0x40
 8002734:	4b26      	ldr	r3, [pc, #152]	; (80027d0 <HAL_CAN_MspInit+0x1b4>)
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002740:	2300      	movs	r3, #0
 8002742:	60bb      	str	r3, [r7, #8]
 8002744:	4b22      	ldr	r3, [pc, #136]	; (80027d0 <HAL_CAN_MspInit+0x1b4>)
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	4a21      	ldr	r2, [pc, #132]	; (80027d0 <HAL_CAN_MspInit+0x1b4>)
 800274a:	f043 0302 	orr.w	r3, r3, #2
 800274e:	6313      	str	r3, [r2, #48]	; 0x30
 8002750:	4b1f      	ldr	r3, [pc, #124]	; (80027d0 <HAL_CAN_MspInit+0x1b4>)
 8002752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800275c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002760:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002762:	2302      	movs	r3, #2
 8002764:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002766:	2300      	movs	r3, #0
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800276a:	2303      	movs	r3, #3
 800276c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800276e:	2309      	movs	r3, #9
 8002770:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002772:	f107 031c 	add.w	r3, r7, #28
 8002776:	4619      	mov	r1, r3
 8002778:	4818      	ldr	r0, [pc, #96]	; (80027dc <HAL_CAN_MspInit+0x1c0>)
 800277a:	f001 fda9 	bl	80042d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 800277e:	2200      	movs	r2, #0
 8002780:	2100      	movs	r1, #0
 8002782:	203f      	movs	r0, #63	; 0x3f
 8002784:	f001 fd6d 	bl	8004262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8002788:	203f      	movs	r0, #63	; 0x3f
 800278a:	f001 fd86 	bl	800429a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 800278e:	2200      	movs	r2, #0
 8002790:	2100      	movs	r1, #0
 8002792:	2040      	movs	r0, #64	; 0x40
 8002794:	f001 fd65 	bl	8004262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002798:	2040      	movs	r0, #64	; 0x40
 800279a:	f001 fd7e 	bl	800429a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 800279e:	2200      	movs	r2, #0
 80027a0:	2100      	movs	r1, #0
 80027a2:	2041      	movs	r0, #65	; 0x41
 80027a4:	f001 fd5d 	bl	8004262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80027a8:	2041      	movs	r0, #65	; 0x41
 80027aa:	f001 fd76 	bl	800429a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 0, 0);
 80027ae:	2200      	movs	r2, #0
 80027b0:	2100      	movs	r1, #0
 80027b2:	2042      	movs	r0, #66	; 0x42
 80027b4:	f001 fd55 	bl	8004262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 80027b8:	2042      	movs	r0, #66	; 0x42
 80027ba:	f001 fd6e 	bl	800429a <HAL_NVIC_EnableIRQ>
}
 80027be:	bf00      	nop
 80027c0:	3730      	adds	r7, #48	; 0x30
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40006400 	.word	0x40006400
 80027cc:	20000b28 	.word	0x20000b28
 80027d0:	40023800 	.word	0x40023800
 80027d4:	40020000 	.word	0x40020000
 80027d8:	40006800 	.word	0x40006800
 80027dc:	40020400 	.word	0x40020400

080027e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f0:	d116      	bne.n	8002820 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	617b      	str	r3, [r7, #20]
 80027f6:	4b32      	ldr	r3, [pc, #200]	; (80028c0 <HAL_TIM_Base_MspInit+0xe0>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	4a31      	ldr	r2, [pc, #196]	; (80028c0 <HAL_TIM_Base_MspInit+0xe0>)
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	6413      	str	r3, [r2, #64]	; 0x40
 8002802:	4b2f      	ldr	r3, [pc, #188]	; (80028c0 <HAL_TIM_Base_MspInit+0xe0>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800280e:	2200      	movs	r2, #0
 8002810:	2100      	movs	r1, #0
 8002812:	201c      	movs	r0, #28
 8002814:	f001 fd25 	bl	8004262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002818:	201c      	movs	r0, #28
 800281a:	f001 fd3e 	bl	800429a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800281e:	e04a      	b.n	80028b6 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a27      	ldr	r2, [pc, #156]	; (80028c4 <HAL_TIM_Base_MspInit+0xe4>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d116      	bne.n	8002858 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	4b24      	ldr	r3, [pc, #144]	; (80028c0 <HAL_TIM_Base_MspInit+0xe0>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	4a23      	ldr	r2, [pc, #140]	; (80028c0 <HAL_TIM_Base_MspInit+0xe0>)
 8002834:	f043 0302 	orr.w	r3, r3, #2
 8002838:	6413      	str	r3, [r2, #64]	; 0x40
 800283a:	4b21      	ldr	r3, [pc, #132]	; (80028c0 <HAL_TIM_Base_MspInit+0xe0>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	613b      	str	r3, [r7, #16]
 8002844:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002846:	2200      	movs	r2, #0
 8002848:	2100      	movs	r1, #0
 800284a:	201d      	movs	r0, #29
 800284c:	f001 fd09 	bl	8004262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002850:	201d      	movs	r0, #29
 8002852:	f001 fd22 	bl	800429a <HAL_NVIC_EnableIRQ>
}
 8002856:	e02e      	b.n	80028b6 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a1a      	ldr	r2, [pc, #104]	; (80028c8 <HAL_TIM_Base_MspInit+0xe8>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d116      	bne.n	8002890 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	4b16      	ldr	r3, [pc, #88]	; (80028c0 <HAL_TIM_Base_MspInit+0xe0>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	4a15      	ldr	r2, [pc, #84]	; (80028c0 <HAL_TIM_Base_MspInit+0xe0>)
 800286c:	f043 0304 	orr.w	r3, r3, #4
 8002870:	6413      	str	r3, [r2, #64]	; 0x40
 8002872:	4b13      	ldr	r3, [pc, #76]	; (80028c0 <HAL_TIM_Base_MspInit+0xe0>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800287e:	2200      	movs	r2, #0
 8002880:	2100      	movs	r1, #0
 8002882:	201e      	movs	r0, #30
 8002884:	f001 fced 	bl	8004262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002888:	201e      	movs	r0, #30
 800288a:	f001 fd06 	bl	800429a <HAL_NVIC_EnableIRQ>
}
 800288e:	e012      	b.n	80028b6 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM10)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a0d      	ldr	r2, [pc, #52]	; (80028cc <HAL_TIM_Base_MspInit+0xec>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d10d      	bne.n	80028b6 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <HAL_TIM_Base_MspInit+0xe0>)
 80028a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a2:	4a07      	ldr	r2, [pc, #28]	; (80028c0 <HAL_TIM_Base_MspInit+0xe0>)
 80028a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a8:	6453      	str	r3, [r2, #68]	; 0x44
 80028aa:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <HAL_TIM_Base_MspInit+0xe0>)
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b2:	60bb      	str	r3, [r7, #8]
 80028b4:	68bb      	ldr	r3, [r7, #8]
}
 80028b6:	bf00      	nop
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40000400 	.word	0x40000400
 80028c8:	40000800 	.word	0x40000800
 80028cc:	40014400 	.word	0x40014400

080028d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028d4:	e7fe      	b.n	80028d4 <NMI_Handler+0x4>

080028d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028d6:	b480      	push	{r7}
 80028d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028da:	e7fe      	b.n	80028da <HardFault_Handler+0x4>

080028dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028e0:	e7fe      	b.n	80028e0 <MemManage_Handler+0x4>

080028e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028e2:	b480      	push	{r7}
 80028e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028e6:	e7fe      	b.n	80028e6 <BusFault_Handler+0x4>

080028e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028ec:	e7fe      	b.n	80028ec <UsageFault_Handler+0x4>

080028ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028ee:	b480      	push	{r7}
 80028f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028f2:	bf00      	nop
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800290a:	b480      	push	{r7}
 800290c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800291c:	f000 f8fe 	bl	8002b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002920:	bf00      	nop
 8002922:	bd80      	pop	{r7, pc}

08002924 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002928:	4802      	ldr	r0, [pc, #8]	; (8002934 <CAN1_TX_IRQHandler+0x10>)
 800292a:	f001 f98f 	bl	8003c4c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	200000c8 	.word	0x200000c8

08002938 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800293c:	4802      	ldr	r0, [pc, #8]	; (8002948 <CAN1_RX0_IRQHandler+0x10>)
 800293e:	f001 f985 	bl	8003c4c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	200000c8 	.word	0x200000c8

0800294c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002950:	4802      	ldr	r0, [pc, #8]	; (800295c <CAN1_RX1_IRQHandler+0x10>)
 8002952:	f001 f97b 	bl	8003c4c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	200000c8 	.word	0x200000c8

08002960 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002964:	4802      	ldr	r0, [pc, #8]	; (8002970 <CAN1_SCE_IRQHandler+0x10>)
 8002966:	f001 f971 	bl	8003c4c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800296a:	bf00      	nop
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	200000c8 	.word	0x200000c8

08002974 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002978:	4802      	ldr	r0, [pc, #8]	; (8002984 <TIM2_IRQHandler+0x10>)
 800297a:	f002 fb85 	bl	8005088 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	20000118 	.word	0x20000118

08002988 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800298c:	4802      	ldr	r0, [pc, #8]	; (8002998 <TIM3_IRQHandler+0x10>)
 800298e:	f002 fb7b 	bl	8005088 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002992:	bf00      	nop
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	20000160 	.word	0x20000160

0800299c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80029a0:	4802      	ldr	r0, [pc, #8]	; (80029ac <TIM4_IRQHandler+0x10>)
 80029a2:	f002 fb71 	bl	8005088 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80029a6:	bf00      	nop
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	200001a8 	.word	0x200001a8

080029b0 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80029b4:	4802      	ldr	r0, [pc, #8]	; (80029c0 <CAN2_TX_IRQHandler+0x10>)
 80029b6:	f001 f949 	bl	8003c4c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 80029ba:	bf00      	nop
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	200000f0 	.word	0x200000f0

080029c4 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80029c8:	4802      	ldr	r0, [pc, #8]	; (80029d4 <CAN2_RX0_IRQHandler+0x10>)
 80029ca:	f001 f93f 	bl	8003c4c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	200000f0 	.word	0x200000f0

080029d8 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80029dc:	4802      	ldr	r0, [pc, #8]	; (80029e8 <CAN2_RX1_IRQHandler+0x10>)
 80029de:	f001 f935 	bl	8003c4c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 80029e2:	bf00      	nop
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	200000f0 	.word	0x200000f0

080029ec <CAN2_SCE_IRQHandler>:

/**
  * @brief This function handles CAN2 SCE interrupt.
  */
void CAN2_SCE_IRQHandler(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_SCE_IRQn 0 */

  /* USER CODE END CAN2_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80029f0:	4802      	ldr	r0, [pc, #8]	; (80029fc <CAN2_SCE_IRQHandler+0x10>)
 80029f2:	f001 f92b 	bl	8003c4c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_SCE_IRQn 1 */

  /* USER CODE END CAN2_SCE_IRQn 1 */
}
 80029f6:	bf00      	nop
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	200000f0 	.word	0x200000f0

08002a00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a04:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <SystemInit+0x20>)
 8002a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0a:	4a05      	ldr	r2, [pc, #20]	; (8002a20 <SystemInit+0x20>)
 8002a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a14:	bf00      	nop
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	e000ed00 	.word	0xe000ed00

08002a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a5c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a28:	480d      	ldr	r0, [pc, #52]	; (8002a60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a2a:	490e      	ldr	r1, [pc, #56]	; (8002a64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a2c:	4a0e      	ldr	r2, [pc, #56]	; (8002a68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a30:	e002      	b.n	8002a38 <LoopCopyDataInit>

08002a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a36:	3304      	adds	r3, #4

08002a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a3c:	d3f9      	bcc.n	8002a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a3e:	4a0b      	ldr	r2, [pc, #44]	; (8002a6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a40:	4c0b      	ldr	r4, [pc, #44]	; (8002a70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a44:	e001      	b.n	8002a4a <LoopFillZerobss>

08002a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a48:	3204      	adds	r2, #4

08002a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a4c:	d3fb      	bcc.n	8002a46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a4e:	f7ff ffd7 	bl	8002a00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a52:	f002 fee3 	bl	800581c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a56:	f7fe f967 	bl	8000d28 <main>
  bx  lr    
 8002a5a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002a5c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a64:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8002a68:	0800589c 	.word	0x0800589c
  ldr r2, =_sbss
 8002a6c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8002a70:	20000b30 	.word	0x20000b30

08002a74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a74:	e7fe      	b.n	8002a74 <ADC_IRQHandler>
	...

08002a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a7c:	4b0e      	ldr	r3, [pc, #56]	; (8002ab8 <HAL_Init+0x40>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a0d      	ldr	r2, [pc, #52]	; (8002ab8 <HAL_Init+0x40>)
 8002a82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a88:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <HAL_Init+0x40>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a0a      	ldr	r2, [pc, #40]	; (8002ab8 <HAL_Init+0x40>)
 8002a8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a94:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <HAL_Init+0x40>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a07      	ldr	r2, [pc, #28]	; (8002ab8 <HAL_Init+0x40>)
 8002a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aa0:	2003      	movs	r0, #3
 8002aa2:	f001 fbd3 	bl	800424c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002aa6:	200f      	movs	r0, #15
 8002aa8:	f000 f808 	bl	8002abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002aac:	f7ff fcfe 	bl	80024ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40023c00 	.word	0x40023c00

08002abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ac4:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <HAL_InitTick+0x54>)
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	4b12      	ldr	r3, [pc, #72]	; (8002b14 <HAL_InitTick+0x58>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	4619      	mov	r1, r3
 8002ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ada:	4618      	mov	r0, r3
 8002adc:	f001 fbeb 	bl	80042b6 <HAL_SYSTICK_Config>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e00e      	b.n	8002b08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b0f      	cmp	r3, #15
 8002aee:	d80a      	bhi.n	8002b06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002af0:	2200      	movs	r2, #0
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	f04f 30ff 	mov.w	r0, #4294967295
 8002af8:	f001 fbb3 	bl	8004262 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002afc:	4a06      	ldr	r2, [pc, #24]	; (8002b18 <HAL_InitTick+0x5c>)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	e000      	b.n	8002b08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	20000010 	.word	0x20000010
 8002b14:	20000018 	.word	0x20000018
 8002b18:	20000014 	.word	0x20000014

08002b1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b20:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <HAL_IncTick+0x20>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	461a      	mov	r2, r3
 8002b26:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <HAL_IncTick+0x24>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	4a04      	ldr	r2, [pc, #16]	; (8002b40 <HAL_IncTick+0x24>)
 8002b2e:	6013      	str	r3, [r2, #0]
}
 8002b30:	bf00      	nop
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	20000018 	.word	0x20000018
 8002b40:	20000b2c 	.word	0x20000b2c

08002b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return uwTick;
 8002b48:	4b03      	ldr	r3, [pc, #12]	; (8002b58 <HAL_GetTick+0x14>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	20000b2c 	.word	0x20000b2c

08002b5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b64:	2300      	movs	r3, #0
 8002b66:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e033      	b.n	8002bda <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d109      	bne.n	8002b8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff fcbe 	bl	80024fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f003 0310 	and.w	r3, r3, #16
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d118      	bne.n	8002bcc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ba2:	f023 0302 	bic.w	r3, r3, #2
 8002ba6:	f043 0202 	orr.w	r2, r3, #2
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 fae8 	bl	8003184 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f023 0303 	bic.w	r3, r3, #3
 8002bc2:	f043 0201 	orr.w	r2, r3, #1
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	641a      	str	r2, [r3, #64]	; 0x40
 8002bca:	e001      	b.n	8002bd0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
	...

08002be4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d101      	bne.n	8002bfe <HAL_ADC_Start+0x1a>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e0b2      	b.n	8002d64 <HAL_ADC_Start+0x180>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d018      	beq.n	8002c46 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0201 	orr.w	r2, r2, #1
 8002c22:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c24:	4b52      	ldr	r3, [pc, #328]	; (8002d70 <HAL_ADC_Start+0x18c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a52      	ldr	r2, [pc, #328]	; (8002d74 <HAL_ADC_Start+0x190>)
 8002c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2e:	0c9a      	lsrs	r2, r3, #18
 8002c30:	4613      	mov	r3, r2
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	4413      	add	r3, r2
 8002c36:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002c38:	e002      	b.n	8002c40 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f9      	bne.n	8002c3a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d17a      	bne.n	8002d4a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c5c:	f023 0301 	bic.w	r3, r3, #1
 8002c60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d007      	beq.n	8002c86 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c7e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c92:	d106      	bne.n	8002ca2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c98:	f023 0206 	bic.w	r2, r3, #6
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	645a      	str	r2, [r3, #68]	; 0x44
 8002ca0:	e002      	b.n	8002ca8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cb0:	4b31      	ldr	r3, [pc, #196]	; (8002d78 <HAL_ADC_Start+0x194>)
 8002cb2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002cbc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f003 031f 	and.w	r3, r3, #31
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d12a      	bne.n	8002d20 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a2b      	ldr	r2, [pc, #172]	; (8002d7c <HAL_ADC_Start+0x198>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d015      	beq.n	8002d00 <HAL_ADC_Start+0x11c>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a29      	ldr	r2, [pc, #164]	; (8002d80 <HAL_ADC_Start+0x19c>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d105      	bne.n	8002cea <HAL_ADC_Start+0x106>
 8002cde:	4b26      	ldr	r3, [pc, #152]	; (8002d78 <HAL_ADC_Start+0x194>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f003 031f 	and.w	r3, r3, #31
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00a      	beq.n	8002d00 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a25      	ldr	r2, [pc, #148]	; (8002d84 <HAL_ADC_Start+0x1a0>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d136      	bne.n	8002d62 <HAL_ADC_Start+0x17e>
 8002cf4:	4b20      	ldr	r3, [pc, #128]	; (8002d78 <HAL_ADC_Start+0x194>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 0310 	and.w	r3, r3, #16
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d130      	bne.n	8002d62 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d129      	bne.n	8002d62 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d1c:	609a      	str	r2, [r3, #8]
 8002d1e:	e020      	b.n	8002d62 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a15      	ldr	r2, [pc, #84]	; (8002d7c <HAL_ADC_Start+0x198>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d11b      	bne.n	8002d62 <HAL_ADC_Start+0x17e>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d114      	bne.n	8002d62 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689a      	ldr	r2, [r3, #8]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d46:	609a      	str	r2, [r3, #8]
 8002d48:	e00b      	b.n	8002d62 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	f043 0210 	orr.w	r2, r3, #16
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	f043 0201 	orr.w	r2, r3, #1
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	20000010 	.word	0x20000010
 8002d74:	431bde83 	.word	0x431bde83
 8002d78:	40012300 	.word	0x40012300
 8002d7c:	40012000 	.word	0x40012000
 8002d80:	40012100 	.word	0x40012100
 8002d84:	40012200 	.word	0x40012200

08002d88 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d101      	bne.n	8002d9e <HAL_ADC_Stop+0x16>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	e021      	b.n	8002de2 <HAL_ADC_Stop+0x5a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0201 	bic.w	r2, r2, #1
 8002db4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d109      	bne.n	8002dd8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002dcc:	f023 0301 	bic.w	r3, r3, #1
 8002dd0:	f043 0201 	orr.w	r2, r3, #1
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b084      	sub	sp, #16
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e0a:	d113      	bne.n	8002e34 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e1a:	d10b      	bne.n	8002e34 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	f043 0220 	orr.w	r2, r3, #32
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e063      	b.n	8002efc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002e34:	f7ff fe86 	bl	8002b44 <HAL_GetTick>
 8002e38:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e3a:	e021      	b.n	8002e80 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e42:	d01d      	beq.n	8002e80 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d007      	beq.n	8002e5a <HAL_ADC_PollForConversion+0x6c>
 8002e4a:	f7ff fe7b 	bl	8002b44 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d212      	bcs.n	8002e80 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d00b      	beq.n	8002e80 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	f043 0204 	orr.w	r2, r3, #4
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e03d      	b.n	8002efc <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d1d6      	bne.n	8002e3c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f06f 0212 	mvn.w	r2, #18
 8002e96:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d123      	bne.n	8002efa <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d11f      	bne.n	8002efa <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d006      	beq.n	8002ed6 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d111      	bne.n	8002efa <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d105      	bne.n	8002efa <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	f043 0201 	orr.w	r2, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
	...

08002f20 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d101      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x1c>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	e113      	b.n	8003164 <HAL_ADC_ConfigChannel+0x244>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2b09      	cmp	r3, #9
 8002f4a:	d925      	bls.n	8002f98 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68d9      	ldr	r1, [r3, #12]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	461a      	mov	r2, r3
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	4413      	add	r3, r2
 8002f60:	3b1e      	subs	r3, #30
 8002f62:	2207      	movs	r2, #7
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	43da      	mvns	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	400a      	ands	r2, r1
 8002f70:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68d9      	ldr	r1, [r3, #12]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	4618      	mov	r0, r3
 8002f84:	4603      	mov	r3, r0
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	4403      	add	r3, r0
 8002f8a:	3b1e      	subs	r3, #30
 8002f8c:	409a      	lsls	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	60da      	str	r2, [r3, #12]
 8002f96:	e022      	b.n	8002fde <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6919      	ldr	r1, [r3, #16]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	4413      	add	r3, r2
 8002fac:	2207      	movs	r2, #7
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	43da      	mvns	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	400a      	ands	r2, r1
 8002fba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6919      	ldr	r1, [r3, #16]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	4618      	mov	r0, r3
 8002fce:	4603      	mov	r3, r0
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	4403      	add	r3, r0
 8002fd4:	409a      	lsls	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b06      	cmp	r3, #6
 8002fe4:	d824      	bhi.n	8003030 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3b05      	subs	r3, #5
 8002ff8:	221f      	movs	r2, #31
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	43da      	mvns	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	400a      	ands	r2, r1
 8003006:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	b29b      	uxth	r3, r3
 8003014:	4618      	mov	r0, r3
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	3b05      	subs	r3, #5
 8003022:	fa00 f203 	lsl.w	r2, r0, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	635a      	str	r2, [r3, #52]	; 0x34
 800302e:	e04c      	b.n	80030ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b0c      	cmp	r3, #12
 8003036:	d824      	bhi.n	8003082 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	3b23      	subs	r3, #35	; 0x23
 800304a:	221f      	movs	r2, #31
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43da      	mvns	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	400a      	ands	r2, r1
 8003058:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	b29b      	uxth	r3, r3
 8003066:	4618      	mov	r0, r3
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	4613      	mov	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	3b23      	subs	r3, #35	; 0x23
 8003074:	fa00 f203 	lsl.w	r2, r0, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	631a      	str	r2, [r3, #48]	; 0x30
 8003080:	e023      	b.n	80030ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	3b41      	subs	r3, #65	; 0x41
 8003094:	221f      	movs	r2, #31
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	43da      	mvns	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	400a      	ands	r2, r1
 80030a2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	4618      	mov	r0, r3
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	3b41      	subs	r3, #65	; 0x41
 80030be:	fa00 f203 	lsl.w	r2, r0, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030ca:	4b29      	ldr	r3, [pc, #164]	; (8003170 <HAL_ADC_ConfigChannel+0x250>)
 80030cc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a28      	ldr	r2, [pc, #160]	; (8003174 <HAL_ADC_ConfigChannel+0x254>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d10f      	bne.n	80030f8 <HAL_ADC_ConfigChannel+0x1d8>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b12      	cmp	r3, #18
 80030de:	d10b      	bne.n	80030f8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a1d      	ldr	r2, [pc, #116]	; (8003174 <HAL_ADC_ConfigChannel+0x254>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d12b      	bne.n	800315a <HAL_ADC_ConfigChannel+0x23a>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a1c      	ldr	r2, [pc, #112]	; (8003178 <HAL_ADC_ConfigChannel+0x258>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d003      	beq.n	8003114 <HAL_ADC_ConfigChannel+0x1f4>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b11      	cmp	r3, #17
 8003112:	d122      	bne.n	800315a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a11      	ldr	r2, [pc, #68]	; (8003178 <HAL_ADC_ConfigChannel+0x258>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d111      	bne.n	800315a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003136:	4b11      	ldr	r3, [pc, #68]	; (800317c <HAL_ADC_ConfigChannel+0x25c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a11      	ldr	r2, [pc, #68]	; (8003180 <HAL_ADC_ConfigChannel+0x260>)
 800313c:	fba2 2303 	umull	r2, r3, r2, r3
 8003140:	0c9a      	lsrs	r2, r3, #18
 8003142:	4613      	mov	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800314c:	e002      	b.n	8003154 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	3b01      	subs	r3, #1
 8003152:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f9      	bne.n	800314e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3714      	adds	r7, #20
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	40012300 	.word	0x40012300
 8003174:	40012000 	.word	0x40012000
 8003178:	10000012 	.word	0x10000012
 800317c:	20000010 	.word	0x20000010
 8003180:	431bde83 	.word	0x431bde83

08003184 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800318c:	4b79      	ldr	r3, [pc, #484]	; (8003374 <ADC_Init+0x1f0>)
 800318e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	431a      	orrs	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6859      	ldr	r1, [r3, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	021a      	lsls	r2, r3, #8
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80031dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6859      	ldr	r1, [r3, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689a      	ldr	r2, [r3, #8]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6899      	ldr	r1, [r3, #8]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003216:	4a58      	ldr	r2, [pc, #352]	; (8003378 <ADC_Init+0x1f4>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d022      	beq.n	8003262 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689a      	ldr	r2, [r3, #8]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800322a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6899      	ldr	r1, [r3, #8]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800324c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6899      	ldr	r1, [r3, #8]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	609a      	str	r2, [r3, #8]
 8003260:	e00f      	b.n	8003282 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003270:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003280:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0202 	bic.w	r2, r2, #2
 8003290:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6899      	ldr	r1, [r3, #8]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	7e1b      	ldrb	r3, [r3, #24]
 800329c:	005a      	lsls	r2, r3, #1
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d01b      	beq.n	80032e8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80032ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6859      	ldr	r1, [r3, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	3b01      	subs	r3, #1
 80032dc:	035a      	lsls	r2, r3, #13
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	605a      	str	r2, [r3, #4]
 80032e6:	e007      	b.n	80032f8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003306:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	3b01      	subs	r3, #1
 8003314:	051a      	lsls	r2, r3, #20
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800332c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6899      	ldr	r1, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800333a:	025a      	lsls	r2, r3, #9
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689a      	ldr	r2, [r3, #8]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003352:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6899      	ldr	r1, [r3, #8]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	029a      	lsls	r2, r3, #10
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	609a      	str	r2, [r3, #8]
}
 8003368:	bf00      	nop
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	40012300 	.word	0x40012300
 8003378:	0f000001 	.word	0x0f000001

0800337c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e0ed      	b.n	800356a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d102      	bne.n	80033a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7ff f93e 	bl	800261c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0201 	orr.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033b0:	f7ff fbc8 	bl	8002b44 <HAL_GetTick>
 80033b4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80033b6:	e012      	b.n	80033de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80033b8:	f7ff fbc4 	bl	8002b44 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b0a      	cmp	r3, #10
 80033c4:	d90b      	bls.n	80033de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2205      	movs	r2, #5
 80033d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e0c5      	b.n	800356a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0e5      	beq.n	80033b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0202 	bic.w	r2, r2, #2
 80033fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033fc:	f7ff fba2 	bl	8002b44 <HAL_GetTick>
 8003400:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003402:	e012      	b.n	800342a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003404:	f7ff fb9e 	bl	8002b44 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b0a      	cmp	r3, #10
 8003410:	d90b      	bls.n	800342a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2205      	movs	r2, #5
 8003422:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e09f      	b.n	800356a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1e5      	bne.n	8003404 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	7e1b      	ldrb	r3, [r3, #24]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d108      	bne.n	8003452 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	e007      	b.n	8003462 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003460:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	7e5b      	ldrb	r3, [r3, #25]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d108      	bne.n	800347c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	e007      	b.n	800348c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800348a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	7e9b      	ldrb	r3, [r3, #26]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d108      	bne.n	80034a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0220 	orr.w	r2, r2, #32
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	e007      	b.n	80034b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0220 	bic.w	r2, r2, #32
 80034b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	7edb      	ldrb	r3, [r3, #27]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d108      	bne.n	80034d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0210 	bic.w	r2, r2, #16
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	e007      	b.n	80034e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0210 	orr.w	r2, r2, #16
 80034de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	7f1b      	ldrb	r3, [r3, #28]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d108      	bne.n	80034fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0208 	orr.w	r2, r2, #8
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	e007      	b.n	800350a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 0208 	bic.w	r2, r2, #8
 8003508:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	7f5b      	ldrb	r3, [r3, #29]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d108      	bne.n	8003524 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f042 0204 	orr.w	r2, r2, #4
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	e007      	b.n	8003534 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0204 	bic.w	r2, r2, #4
 8003532:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	431a      	orrs	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	ea42 0103 	orr.w	r1, r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	1e5a      	subs	r2, r3, #1
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
	...

08003574 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 3020 	ldrb.w	r3, [r3, #32]
 800358a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800358c:	7cfb      	ldrb	r3, [r7, #19]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d003      	beq.n	800359a <HAL_CAN_ConfigFilter+0x26>
 8003592:	7cfb      	ldrb	r3, [r7, #19]
 8003594:	2b02      	cmp	r3, #2
 8003596:	f040 80be 	bne.w	8003716 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800359a:	4b65      	ldr	r3, [pc, #404]	; (8003730 <HAL_CAN_ConfigFilter+0x1bc>)
 800359c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80035a4:	f043 0201 	orr.w	r2, r3, #1
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80035b4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	021b      	lsls	r3, r3, #8
 80035ca:	431a      	orrs	r2, r3
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	f003 031f 	and.w	r3, r3, #31
 80035da:	2201      	movs	r2, #1
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	43db      	mvns	r3, r3
 80035ec:	401a      	ands	r2, r3
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	69db      	ldr	r3, [r3, #28]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d123      	bne.n	8003644 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	43db      	mvns	r3, r3
 8003606:	401a      	ands	r2, r3
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800361e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	3248      	adds	r2, #72	; 0x48
 8003624:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003638:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800363a:	6979      	ldr	r1, [r7, #20]
 800363c:	3348      	adds	r3, #72	; 0x48
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	440b      	add	r3, r1
 8003642:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d122      	bne.n	8003692 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	431a      	orrs	r2, r3
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800366c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	3248      	adds	r2, #72	; 0x48
 8003672:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003686:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003688:	6979      	ldr	r1, [r7, #20]
 800368a:	3348      	adds	r3, #72	; 0x48
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	440b      	add	r3, r1
 8003690:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d109      	bne.n	80036ae <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	43db      	mvns	r3, r3
 80036a4:	401a      	ands	r2, r3
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80036ac:	e007      	b.n	80036be <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	431a      	orrs	r2, r3
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d109      	bne.n	80036da <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	43db      	mvns	r3, r3
 80036d0:	401a      	ands	r2, r3
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80036d8:	e007      	b.n	80036ea <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	431a      	orrs	r2, r3
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d107      	bne.n	8003702 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	431a      	orrs	r2, r3
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003708:	f023 0201 	bic.w	r2, r3, #1
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003712:	2300      	movs	r3, #0
 8003714:	e006      	b.n	8003724 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
  }
}
 8003724:	4618      	mov	r0, r3
 8003726:	371c      	adds	r7, #28
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	40006400 	.word	0x40006400

08003734 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b01      	cmp	r3, #1
 8003746:	d12e      	bne.n	80037a6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0201 	bic.w	r2, r2, #1
 800375e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003760:	f7ff f9f0 	bl	8002b44 <HAL_GetTick>
 8003764:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003766:	e012      	b.n	800378e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003768:	f7ff f9ec 	bl	8002b44 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b0a      	cmp	r3, #10
 8003774:	d90b      	bls.n	800378e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2205      	movs	r2, #5
 8003786:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e012      	b.n	80037b4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1e5      	bne.n	8003768 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	e006      	b.n	80037b4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
  }
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80037bc:	b480      	push	{r7}
 80037be:	b089      	sub	sp, #36	; 0x24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
 80037c8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037d0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80037da:	7ffb      	ldrb	r3, [r7, #31]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d003      	beq.n	80037e8 <HAL_CAN_AddTxMessage+0x2c>
 80037e0:	7ffb      	ldrb	r3, [r7, #31]
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	f040 80b8 	bne.w	8003958 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10a      	bne.n	8003808 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d105      	bne.n	8003808 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 80a0 	beq.w	8003948 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	0e1b      	lsrs	r3, r3, #24
 800380c:	f003 0303 	and.w	r3, r3, #3
 8003810:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	2b02      	cmp	r3, #2
 8003816:	d907      	bls.n	8003828 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e09e      	b.n	8003966 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003828:	2201      	movs	r2, #1
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	409a      	lsls	r2, r3
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10d      	bne.n	8003856 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003844:	68f9      	ldr	r1, [r7, #12]
 8003846:	6809      	ldr	r1, [r1, #0]
 8003848:	431a      	orrs	r2, r3
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	3318      	adds	r3, #24
 800384e:	011b      	lsls	r3, r3, #4
 8003850:	440b      	add	r3, r1
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	e00f      	b.n	8003876 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003860:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003866:	68f9      	ldr	r1, [r7, #12]
 8003868:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800386a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	3318      	adds	r3, #24
 8003870:	011b      	lsls	r3, r3, #4
 8003872:	440b      	add	r3, r1
 8003874:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6819      	ldr	r1, [r3, #0]
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	691a      	ldr	r2, [r3, #16]
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	3318      	adds	r3, #24
 8003882:	011b      	lsls	r3, r3, #4
 8003884:	440b      	add	r3, r1
 8003886:	3304      	adds	r3, #4
 8003888:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	7d1b      	ldrb	r3, [r3, #20]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d111      	bne.n	80038b6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	3318      	adds	r3, #24
 800389a:	011b      	lsls	r3, r3, #4
 800389c:	4413      	add	r3, r2
 800389e:	3304      	adds	r3, #4
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	6811      	ldr	r1, [r2, #0]
 80038a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	3318      	adds	r3, #24
 80038ae:	011b      	lsls	r3, r3, #4
 80038b0:	440b      	add	r3, r1
 80038b2:	3304      	adds	r3, #4
 80038b4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3307      	adds	r3, #7
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	061a      	lsls	r2, r3, #24
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	3306      	adds	r3, #6
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	041b      	lsls	r3, r3, #16
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3305      	adds	r3, #5
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	021b      	lsls	r3, r3, #8
 80038d0:	4313      	orrs	r3, r2
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	3204      	adds	r2, #4
 80038d6:	7812      	ldrb	r2, [r2, #0]
 80038d8:	4610      	mov	r0, r2
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	6811      	ldr	r1, [r2, #0]
 80038de:	ea43 0200 	orr.w	r2, r3, r0
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	440b      	add	r3, r1
 80038e8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80038ec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	3303      	adds	r3, #3
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	061a      	lsls	r2, r3, #24
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3302      	adds	r3, #2
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	041b      	lsls	r3, r3, #16
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3301      	adds	r3, #1
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	021b      	lsls	r3, r3, #8
 8003908:	4313      	orrs	r3, r2
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	7812      	ldrb	r2, [r2, #0]
 800390e:	4610      	mov	r0, r2
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	6811      	ldr	r1, [r2, #0]
 8003914:	ea43 0200 	orr.w	r2, r3, r0
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	440b      	add	r3, r1
 800391e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003922:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	3318      	adds	r3, #24
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	4413      	add	r3, r2
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	6811      	ldr	r1, [r2, #0]
 8003936:	f043 0201 	orr.w	r2, r3, #1
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	3318      	adds	r3, #24
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	440b      	add	r3, r1
 8003942:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003944:	2300      	movs	r3, #0
 8003946:	e00e      	b.n	8003966 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e006      	b.n	8003966 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
  }
}
 8003966:	4618      	mov	r0, r3
 8003968:	3724      	adds	r7, #36	; 0x24
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8003972:	b480      	push	{r7}
 8003974:	b085      	sub	sp, #20
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800397a:	2300      	movs	r3, #0
 800397c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003984:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003986:	7afb      	ldrb	r3, [r7, #11]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d002      	beq.n	8003992 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800398c:	7afb      	ldrb	r3, [r7, #11]
 800398e:	2b02      	cmp	r3, #2
 8003990:	d11d      	bne.n	80039ce <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d002      	beq.n	80039a6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	3301      	adds	r3, #1
 80039a4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d002      	beq.n	80039ba <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	3301      	adds	r3, #1
 80039b8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d002      	beq.n	80039ce <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	3301      	adds	r3, #1
 80039cc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80039ce:	68fb      	ldr	r3, [r7, #12]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3714      	adds	r7, #20
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80039dc:	b480      	push	{r7}
 80039de:	b087      	sub	sp, #28
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
 80039e8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039f0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80039f2:	7dfb      	ldrb	r3, [r7, #23]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d003      	beq.n	8003a00 <HAL_CAN_GetRxMessage+0x24>
 80039f8:	7dfb      	ldrb	r3, [r7, #23]
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	f040 80f3 	bne.w	8003be6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10e      	bne.n	8003a24 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f003 0303 	and.w	r3, r3, #3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d116      	bne.n	8003a42 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0e7      	b.n	8003bf4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	f003 0303 	and.w	r3, r3, #3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d107      	bne.n	8003a42 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e0d8      	b.n	8003bf4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	331b      	adds	r3, #27
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	4413      	add	r3, r2
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0204 	and.w	r2, r3, #4
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10c      	bne.n	8003a7a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	331b      	adds	r3, #27
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	4413      	add	r3, r2
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	0d5b      	lsrs	r3, r3, #21
 8003a70:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	e00b      	b.n	8003a92 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	331b      	adds	r3, #27
 8003a82:	011b      	lsls	r3, r3, #4
 8003a84:	4413      	add	r3, r2
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	08db      	lsrs	r3, r3, #3
 8003a8a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	331b      	adds	r3, #27
 8003a9a:	011b      	lsls	r3, r3, #4
 8003a9c:	4413      	add	r3, r2
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0202 	and.w	r2, r3, #2
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	331b      	adds	r3, #27
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	4413      	add	r3, r2
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 020f 	and.w	r2, r3, #15
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	331b      	adds	r3, #27
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	4413      	add	r3, r2
 8003acc:	3304      	adds	r3, #4
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	0a1b      	lsrs	r3, r3, #8
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	331b      	adds	r3, #27
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	4413      	add	r3, r2
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	0c1b      	lsrs	r3, r3, #16
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	4413      	add	r3, r2
 8003afa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	0a1a      	lsrs	r2, r3, #8
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	011b      	lsls	r3, r3, #4
 8003b28:	4413      	add	r3, r2
 8003b2a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	0c1a      	lsrs	r2, r3, #16
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	3302      	adds	r3, #2
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	0e1a      	lsrs	r2, r3, #24
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	3303      	adds	r3, #3
 8003b50:	b2d2      	uxtb	r2, r2
 8003b52:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	3304      	adds	r3, #4
 8003b68:	b2d2      	uxtb	r2, r2
 8003b6a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	011b      	lsls	r3, r3, #4
 8003b74:	4413      	add	r3, r2
 8003b76:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	0a1a      	lsrs	r2, r3, #8
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	3305      	adds	r3, #5
 8003b82:	b2d2      	uxtb	r2, r2
 8003b84:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	011b      	lsls	r3, r3, #4
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	0c1a      	lsrs	r2, r3, #16
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	3306      	adds	r3, #6
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	011b      	lsls	r3, r3, #4
 8003ba8:	4413      	add	r3, r2
 8003baa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	0e1a      	lsrs	r2, r3, #24
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	3307      	adds	r3, #7
 8003bb6:	b2d2      	uxtb	r2, r2
 8003bb8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d108      	bne.n	8003bd2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0220 	orr.w	r2, r2, #32
 8003bce:	60da      	str	r2, [r3, #12]
 8003bd0:	e007      	b.n	8003be2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	691a      	ldr	r2, [r3, #16]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f042 0220 	orr.w	r2, r2, #32
 8003be0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003be2:	2300      	movs	r3, #0
 8003be4:	e006      	b.n	8003bf4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
  }
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	371c      	adds	r7, #28
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c10:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c12:	7bfb      	ldrb	r3, [r7, #15]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d002      	beq.n	8003c1e <HAL_CAN_ActivateNotification+0x1e>
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d109      	bne.n	8003c32 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6959      	ldr	r1, [r3, #20]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	e006      	b.n	8003c40 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
  }
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3714      	adds	r7, #20
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b08a      	sub	sp, #40	; 0x28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003c54:	2300      	movs	r3, #0
 8003c56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d07c      	beq.n	8003d8c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d023      	beq.n	8003ce4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f983 	bl	8003fba <HAL_CAN_TxMailbox0CompleteCallback>
 8003cb4:	e016      	b.n	8003ce4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d004      	beq.n	8003cca <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc8:	e00c      	b.n	8003ce4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	f003 0308 	and.w	r3, r3, #8
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d004      	beq.n	8003cde <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003cda:	627b      	str	r3, [r7, #36]	; 0x24
 8003cdc:	e002      	b.n	8003ce4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f989 	bl	8003ff6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d024      	beq.n	8003d38 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cf6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f963 	bl	8003fce <HAL_CAN_TxMailbox1CompleteCallback>
 8003d08:	e016      	b.n	8003d38 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d004      	beq.n	8003d1e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d1c:	e00c      	b.n	8003d38 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d004      	beq.n	8003d32 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d30:	e002      	b.n	8003d38 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f969 	bl	800400a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d024      	beq.n	8003d8c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003d4a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f943 	bl	8003fe2 <HAL_CAN_TxMailbox2CompleteCallback>
 8003d5c:	e016      	b.n	8003d8c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d004      	beq.n	8003d72 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d70:	e00c      	b.n	8003d8c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d004      	beq.n	8003d86 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d82:	627b      	str	r3, [r7, #36]	; 0x24
 8003d84:	e002      	b.n	8003d8c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f949 	bl	800401e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	f003 0308 	and.w	r3, r3, #8
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00c      	beq.n	8003db0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f003 0310 	and.w	r3, r3, #16
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d007      	beq.n	8003db0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2210      	movs	r2, #16
 8003dae:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003db0:	6a3b      	ldr	r3, [r7, #32]
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00b      	beq.n	8003dd2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f003 0308 	and.w	r3, r3, #8
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d006      	beq.n	8003dd2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2208      	movs	r2, #8
 8003dca:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 f930 	bl	8004032 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003dd2:	6a3b      	ldr	r3, [r7, #32]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d009      	beq.n	8003df0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	f003 0303 	and.w	r3, r3, #3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d002      	beq.n	8003df0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7fd fe50 	bl	8001a90 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00c      	beq.n	8003e14 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f003 0310 	and.w	r3, r3, #16
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d007      	beq.n	8003e14 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e0a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2210      	movs	r2, #16
 8003e12:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003e14:	6a3b      	ldr	r3, [r7, #32]
 8003e16:	f003 0320 	and.w	r3, r3, #32
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00b      	beq.n	8003e36 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d006      	beq.n	8003e36 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2208      	movs	r2, #8
 8003e2e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f912 	bl	800405a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	f003 0310 	and.w	r3, r3, #16
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d009      	beq.n	8003e54 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d002      	beq.n	8003e54 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f8f9 	bl	8004046 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00b      	beq.n	8003e76 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	f003 0310 	and.w	r3, r3, #16
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d006      	beq.n	8003e76 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2210      	movs	r2, #16
 8003e6e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f8fc 	bl	800406e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00b      	beq.n	8003e98 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	f003 0308 	and.w	r3, r3, #8
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d006      	beq.n	8003e98 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2208      	movs	r2, #8
 8003e90:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f8f5 	bl	8004082 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003e98:	6a3b      	ldr	r3, [r7, #32]
 8003e9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d07b      	beq.n	8003f9a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d072      	beq.n	8003f92 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d008      	beq.n	8003ec8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d003      	beq.n	8003ec8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	f043 0301 	orr.w	r3, r3, #1
 8003ec6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d008      	beq.n	8003ee4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	f043 0302 	orr.w	r3, r3, #2
 8003ee2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003ee4:	6a3b      	ldr	r3, [r7, #32]
 8003ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d008      	beq.n	8003f00 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d003      	beq.n	8003f00 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	f043 0304 	orr.w	r3, r3, #4
 8003efe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003f00:	6a3b      	ldr	r3, [r7, #32]
 8003f02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d043      	beq.n	8003f92 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d03e      	beq.n	8003f92 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f1a:	2b60      	cmp	r3, #96	; 0x60
 8003f1c:	d02b      	beq.n	8003f76 <HAL_CAN_IRQHandler+0x32a>
 8003f1e:	2b60      	cmp	r3, #96	; 0x60
 8003f20:	d82e      	bhi.n	8003f80 <HAL_CAN_IRQHandler+0x334>
 8003f22:	2b50      	cmp	r3, #80	; 0x50
 8003f24:	d022      	beq.n	8003f6c <HAL_CAN_IRQHandler+0x320>
 8003f26:	2b50      	cmp	r3, #80	; 0x50
 8003f28:	d82a      	bhi.n	8003f80 <HAL_CAN_IRQHandler+0x334>
 8003f2a:	2b40      	cmp	r3, #64	; 0x40
 8003f2c:	d019      	beq.n	8003f62 <HAL_CAN_IRQHandler+0x316>
 8003f2e:	2b40      	cmp	r3, #64	; 0x40
 8003f30:	d826      	bhi.n	8003f80 <HAL_CAN_IRQHandler+0x334>
 8003f32:	2b30      	cmp	r3, #48	; 0x30
 8003f34:	d010      	beq.n	8003f58 <HAL_CAN_IRQHandler+0x30c>
 8003f36:	2b30      	cmp	r3, #48	; 0x30
 8003f38:	d822      	bhi.n	8003f80 <HAL_CAN_IRQHandler+0x334>
 8003f3a:	2b10      	cmp	r3, #16
 8003f3c:	d002      	beq.n	8003f44 <HAL_CAN_IRQHandler+0x2f8>
 8003f3e:	2b20      	cmp	r3, #32
 8003f40:	d005      	beq.n	8003f4e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003f42:	e01d      	b.n	8003f80 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	f043 0308 	orr.w	r3, r3, #8
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f4c:	e019      	b.n	8003f82 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	f043 0310 	orr.w	r3, r3, #16
 8003f54:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f56:	e014      	b.n	8003f82 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	f043 0320 	orr.w	r3, r3, #32
 8003f5e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f60:	e00f      	b.n	8003f82 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f68:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f6a:	e00a      	b.n	8003f82 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f74:	e005      	b.n	8003f82 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f7e:	e000      	b.n	8003f82 <HAL_CAN_IRQHandler+0x336>
            break;
 8003f80:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	699a      	ldr	r2, [r3, #24]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003f90:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2204      	movs	r2, #4
 8003f98:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d008      	beq.n	8003fb2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 f872 	bl	8004096 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003fb2:	bf00      	nop
 8003fb4:	3728      	adds	r7, #40	; 0x28
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b083      	sub	sp, #12
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003fd6:	bf00      	nop
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b083      	sub	sp, #12
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800406e:	b480      	push	{r7}
 8004070:	b083      	sub	sp, #12
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004082:	b480      	push	{r7}
 8004084:	b083      	sub	sp, #12
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004096:	b480      	push	{r7}
 8004098:	b083      	sub	sp, #12
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800409e:	bf00      	nop
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
	...

080040ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040bc:	4b0c      	ldr	r3, [pc, #48]	; (80040f0 <__NVIC_SetPriorityGrouping+0x44>)
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040c8:	4013      	ands	r3, r2
 80040ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040de:	4a04      	ldr	r2, [pc, #16]	; (80040f0 <__NVIC_SetPriorityGrouping+0x44>)
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	60d3      	str	r3, [r2, #12]
}
 80040e4:	bf00      	nop
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	e000ed00 	.word	0xe000ed00

080040f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040f8:	4b04      	ldr	r3, [pc, #16]	; (800410c <__NVIC_GetPriorityGrouping+0x18>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	0a1b      	lsrs	r3, r3, #8
 80040fe:	f003 0307 	and.w	r3, r3, #7
}
 8004102:	4618      	mov	r0, r3
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	e000ed00 	.word	0xe000ed00

08004110 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	4603      	mov	r3, r0
 8004118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800411a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800411e:	2b00      	cmp	r3, #0
 8004120:	db0b      	blt.n	800413a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004122:	79fb      	ldrb	r3, [r7, #7]
 8004124:	f003 021f 	and.w	r2, r3, #31
 8004128:	4907      	ldr	r1, [pc, #28]	; (8004148 <__NVIC_EnableIRQ+0x38>)
 800412a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800412e:	095b      	lsrs	r3, r3, #5
 8004130:	2001      	movs	r0, #1
 8004132:	fa00 f202 	lsl.w	r2, r0, r2
 8004136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	e000e100 	.word	0xe000e100

0800414c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	4603      	mov	r3, r0
 8004154:	6039      	str	r1, [r7, #0]
 8004156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800415c:	2b00      	cmp	r3, #0
 800415e:	db0a      	blt.n	8004176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	b2da      	uxtb	r2, r3
 8004164:	490c      	ldr	r1, [pc, #48]	; (8004198 <__NVIC_SetPriority+0x4c>)
 8004166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800416a:	0112      	lsls	r2, r2, #4
 800416c:	b2d2      	uxtb	r2, r2
 800416e:	440b      	add	r3, r1
 8004170:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004174:	e00a      	b.n	800418c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	b2da      	uxtb	r2, r3
 800417a:	4908      	ldr	r1, [pc, #32]	; (800419c <__NVIC_SetPriority+0x50>)
 800417c:	79fb      	ldrb	r3, [r7, #7]
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	3b04      	subs	r3, #4
 8004184:	0112      	lsls	r2, r2, #4
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	440b      	add	r3, r1
 800418a:	761a      	strb	r2, [r3, #24]
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	e000e100 	.word	0xe000e100
 800419c:	e000ed00 	.word	0xe000ed00

080041a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b089      	sub	sp, #36	; 0x24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	f1c3 0307 	rsb	r3, r3, #7
 80041ba:	2b04      	cmp	r3, #4
 80041bc:	bf28      	it	cs
 80041be:	2304      	movcs	r3, #4
 80041c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	3304      	adds	r3, #4
 80041c6:	2b06      	cmp	r3, #6
 80041c8:	d902      	bls.n	80041d0 <NVIC_EncodePriority+0x30>
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	3b03      	subs	r3, #3
 80041ce:	e000      	b.n	80041d2 <NVIC_EncodePriority+0x32>
 80041d0:	2300      	movs	r3, #0
 80041d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041d4:	f04f 32ff 	mov.w	r2, #4294967295
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	fa02 f303 	lsl.w	r3, r2, r3
 80041de:	43da      	mvns	r2, r3
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	401a      	ands	r2, r3
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041e8:	f04f 31ff 	mov.w	r1, #4294967295
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	fa01 f303 	lsl.w	r3, r1, r3
 80041f2:	43d9      	mvns	r1, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041f8:	4313      	orrs	r3, r2
         );
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3724      	adds	r7, #36	; 0x24
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
	...

08004208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	3b01      	subs	r3, #1
 8004214:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004218:	d301      	bcc.n	800421e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800421a:	2301      	movs	r3, #1
 800421c:	e00f      	b.n	800423e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800421e:	4a0a      	ldr	r2, [pc, #40]	; (8004248 <SysTick_Config+0x40>)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3b01      	subs	r3, #1
 8004224:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004226:	210f      	movs	r1, #15
 8004228:	f04f 30ff 	mov.w	r0, #4294967295
 800422c:	f7ff ff8e 	bl	800414c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004230:	4b05      	ldr	r3, [pc, #20]	; (8004248 <SysTick_Config+0x40>)
 8004232:	2200      	movs	r2, #0
 8004234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004236:	4b04      	ldr	r3, [pc, #16]	; (8004248 <SysTick_Config+0x40>)
 8004238:	2207      	movs	r2, #7
 800423a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	e000e010 	.word	0xe000e010

0800424c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff ff29 	bl	80040ac <__NVIC_SetPriorityGrouping>
}
 800425a:	bf00      	nop
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004262:	b580      	push	{r7, lr}
 8004264:	b086      	sub	sp, #24
 8004266:	af00      	add	r7, sp, #0
 8004268:	4603      	mov	r3, r0
 800426a:	60b9      	str	r1, [r7, #8]
 800426c:	607a      	str	r2, [r7, #4]
 800426e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004270:	2300      	movs	r3, #0
 8004272:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004274:	f7ff ff3e 	bl	80040f4 <__NVIC_GetPriorityGrouping>
 8004278:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	68b9      	ldr	r1, [r7, #8]
 800427e:	6978      	ldr	r0, [r7, #20]
 8004280:	f7ff ff8e 	bl	80041a0 <NVIC_EncodePriority>
 8004284:	4602      	mov	r2, r0
 8004286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800428a:	4611      	mov	r1, r2
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff ff5d 	bl	800414c <__NVIC_SetPriority>
}
 8004292:	bf00      	nop
 8004294:	3718      	adds	r7, #24
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b082      	sub	sp, #8
 800429e:	af00      	add	r7, sp, #0
 80042a0:	4603      	mov	r3, r0
 80042a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff ff31 	bl	8004110 <__NVIC_EnableIRQ>
}
 80042ae:	bf00      	nop
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b082      	sub	sp, #8
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7ff ffa2 	bl	8004208 <SysTick_Config>
 80042c4:	4603      	mov	r3, r0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
	...

080042d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b089      	sub	sp, #36	; 0x24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042da:	2300      	movs	r3, #0
 80042dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042de:	2300      	movs	r3, #0
 80042e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042e2:	2300      	movs	r3, #0
 80042e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042e6:	2300      	movs	r3, #0
 80042e8:	61fb      	str	r3, [r7, #28]
 80042ea:	e177      	b.n	80045dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042ec:	2201      	movs	r2, #1
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	4013      	ands	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	429a      	cmp	r2, r3
 8004306:	f040 8166 	bne.w	80045d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f003 0303 	and.w	r3, r3, #3
 8004312:	2b01      	cmp	r3, #1
 8004314:	d005      	beq.n	8004322 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800431e:	2b02      	cmp	r3, #2
 8004320:	d130      	bne.n	8004384 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	2203      	movs	r2, #3
 800432e:	fa02 f303 	lsl.w	r3, r2, r3
 8004332:	43db      	mvns	r3, r3
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	4013      	ands	r3, r2
 8004338:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	fa02 f303 	lsl.w	r3, r2, r3
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	4313      	orrs	r3, r2
 800434a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004358:	2201      	movs	r2, #1
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	43db      	mvns	r3, r3
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	4013      	ands	r3, r2
 8004366:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	091b      	lsrs	r3, r3, #4
 800436e:	f003 0201 	and.w	r2, r3, #1
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	fa02 f303 	lsl.w	r3, r2, r3
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	4313      	orrs	r3, r2
 800437c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f003 0303 	and.w	r3, r3, #3
 800438c:	2b03      	cmp	r3, #3
 800438e:	d017      	beq.n	80043c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	2203      	movs	r2, #3
 800439c:	fa02 f303 	lsl.w	r3, r2, r3
 80043a0:	43db      	mvns	r3, r3
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	4013      	ands	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f003 0303 	and.w	r3, r3, #3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d123      	bne.n	8004414 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	08da      	lsrs	r2, r3, #3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3208      	adds	r2, #8
 80043d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	220f      	movs	r2, #15
 80043e4:	fa02 f303 	lsl.w	r3, r2, r3
 80043e8:	43db      	mvns	r3, r3
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	4013      	ands	r3, r2
 80043ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	691a      	ldr	r2, [r3, #16]
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	f003 0307 	and.w	r3, r3, #7
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	4313      	orrs	r3, r2
 8004404:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	08da      	lsrs	r2, r3, #3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	3208      	adds	r2, #8
 800440e:	69b9      	ldr	r1, [r7, #24]
 8004410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	2203      	movs	r2, #3
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	43db      	mvns	r3, r3
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	4013      	ands	r3, r2
 800442a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f003 0203 	and.w	r2, r3, #3
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	fa02 f303 	lsl.w	r3, r2, r3
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	4313      	orrs	r3, r2
 8004440:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 80c0 	beq.w	80045d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004456:	2300      	movs	r3, #0
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	4b66      	ldr	r3, [pc, #408]	; (80045f4 <HAL_GPIO_Init+0x324>)
 800445c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445e:	4a65      	ldr	r2, [pc, #404]	; (80045f4 <HAL_GPIO_Init+0x324>)
 8004460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004464:	6453      	str	r3, [r2, #68]	; 0x44
 8004466:	4b63      	ldr	r3, [pc, #396]	; (80045f4 <HAL_GPIO_Init+0x324>)
 8004468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004472:	4a61      	ldr	r2, [pc, #388]	; (80045f8 <HAL_GPIO_Init+0x328>)
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	089b      	lsrs	r3, r3, #2
 8004478:	3302      	adds	r3, #2
 800447a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800447e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	220f      	movs	r2, #15
 800448a:	fa02 f303 	lsl.w	r3, r2, r3
 800448e:	43db      	mvns	r3, r3
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	4013      	ands	r3, r2
 8004494:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a58      	ldr	r2, [pc, #352]	; (80045fc <HAL_GPIO_Init+0x32c>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d037      	beq.n	800450e <HAL_GPIO_Init+0x23e>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a57      	ldr	r2, [pc, #348]	; (8004600 <HAL_GPIO_Init+0x330>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d031      	beq.n	800450a <HAL_GPIO_Init+0x23a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a56      	ldr	r2, [pc, #344]	; (8004604 <HAL_GPIO_Init+0x334>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d02b      	beq.n	8004506 <HAL_GPIO_Init+0x236>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a55      	ldr	r2, [pc, #340]	; (8004608 <HAL_GPIO_Init+0x338>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d025      	beq.n	8004502 <HAL_GPIO_Init+0x232>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a54      	ldr	r2, [pc, #336]	; (800460c <HAL_GPIO_Init+0x33c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d01f      	beq.n	80044fe <HAL_GPIO_Init+0x22e>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a53      	ldr	r2, [pc, #332]	; (8004610 <HAL_GPIO_Init+0x340>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d019      	beq.n	80044fa <HAL_GPIO_Init+0x22a>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a52      	ldr	r2, [pc, #328]	; (8004614 <HAL_GPIO_Init+0x344>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d013      	beq.n	80044f6 <HAL_GPIO_Init+0x226>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a51      	ldr	r2, [pc, #324]	; (8004618 <HAL_GPIO_Init+0x348>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d00d      	beq.n	80044f2 <HAL_GPIO_Init+0x222>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a50      	ldr	r2, [pc, #320]	; (800461c <HAL_GPIO_Init+0x34c>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d007      	beq.n	80044ee <HAL_GPIO_Init+0x21e>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a4f      	ldr	r2, [pc, #316]	; (8004620 <HAL_GPIO_Init+0x350>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d101      	bne.n	80044ea <HAL_GPIO_Init+0x21a>
 80044e6:	2309      	movs	r3, #9
 80044e8:	e012      	b.n	8004510 <HAL_GPIO_Init+0x240>
 80044ea:	230a      	movs	r3, #10
 80044ec:	e010      	b.n	8004510 <HAL_GPIO_Init+0x240>
 80044ee:	2308      	movs	r3, #8
 80044f0:	e00e      	b.n	8004510 <HAL_GPIO_Init+0x240>
 80044f2:	2307      	movs	r3, #7
 80044f4:	e00c      	b.n	8004510 <HAL_GPIO_Init+0x240>
 80044f6:	2306      	movs	r3, #6
 80044f8:	e00a      	b.n	8004510 <HAL_GPIO_Init+0x240>
 80044fa:	2305      	movs	r3, #5
 80044fc:	e008      	b.n	8004510 <HAL_GPIO_Init+0x240>
 80044fe:	2304      	movs	r3, #4
 8004500:	e006      	b.n	8004510 <HAL_GPIO_Init+0x240>
 8004502:	2303      	movs	r3, #3
 8004504:	e004      	b.n	8004510 <HAL_GPIO_Init+0x240>
 8004506:	2302      	movs	r3, #2
 8004508:	e002      	b.n	8004510 <HAL_GPIO_Init+0x240>
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <HAL_GPIO_Init+0x240>
 800450e:	2300      	movs	r3, #0
 8004510:	69fa      	ldr	r2, [r7, #28]
 8004512:	f002 0203 	and.w	r2, r2, #3
 8004516:	0092      	lsls	r2, r2, #2
 8004518:	4093      	lsls	r3, r2
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	4313      	orrs	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004520:	4935      	ldr	r1, [pc, #212]	; (80045f8 <HAL_GPIO_Init+0x328>)
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	089b      	lsrs	r3, r3, #2
 8004526:	3302      	adds	r3, #2
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800452e:	4b3d      	ldr	r3, [pc, #244]	; (8004624 <HAL_GPIO_Init+0x354>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	43db      	mvns	r3, r3
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	4013      	ands	r3, r2
 800453c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	4313      	orrs	r3, r2
 8004550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004552:	4a34      	ldr	r2, [pc, #208]	; (8004624 <HAL_GPIO_Init+0x354>)
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004558:	4b32      	ldr	r3, [pc, #200]	; (8004624 <HAL_GPIO_Init+0x354>)
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	43db      	mvns	r3, r3
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	4013      	ands	r3, r2
 8004566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	4313      	orrs	r3, r2
 800457a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800457c:	4a29      	ldr	r2, [pc, #164]	; (8004624 <HAL_GPIO_Init+0x354>)
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004582:	4b28      	ldr	r3, [pc, #160]	; (8004624 <HAL_GPIO_Init+0x354>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	43db      	mvns	r3, r3
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	4013      	ands	r3, r2
 8004590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045a6:	4a1f      	ldr	r2, [pc, #124]	; (8004624 <HAL_GPIO_Init+0x354>)
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045ac:	4b1d      	ldr	r3, [pc, #116]	; (8004624 <HAL_GPIO_Init+0x354>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	43db      	mvns	r3, r3
 80045b6:	69ba      	ldr	r2, [r7, #24]
 80045b8:	4013      	ands	r3, r2
 80045ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045d0:	4a14      	ldr	r2, [pc, #80]	; (8004624 <HAL_GPIO_Init+0x354>)
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	3301      	adds	r3, #1
 80045da:	61fb      	str	r3, [r7, #28]
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	2b0f      	cmp	r3, #15
 80045e0:	f67f ae84 	bls.w	80042ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045e4:	bf00      	nop
 80045e6:	bf00      	nop
 80045e8:	3724      	adds	r7, #36	; 0x24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	40023800 	.word	0x40023800
 80045f8:	40013800 	.word	0x40013800
 80045fc:	40020000 	.word	0x40020000
 8004600:	40020400 	.word	0x40020400
 8004604:	40020800 	.word	0x40020800
 8004608:	40020c00 	.word	0x40020c00
 800460c:	40021000 	.word	0x40021000
 8004610:	40021400 	.word	0x40021400
 8004614:	40021800 	.word	0x40021800
 8004618:	40021c00 	.word	0x40021c00
 800461c:	40022000 	.word	0x40022000
 8004620:	40022400 	.word	0x40022400
 8004624:	40013c00 	.word	0x40013c00

08004628 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	460b      	mov	r3, r1
 8004632:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691a      	ldr	r2, [r3, #16]
 8004638:	887b      	ldrh	r3, [r7, #2]
 800463a:	4013      	ands	r3, r2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d002      	beq.n	8004646 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004640:	2301      	movs	r3, #1
 8004642:	73fb      	strb	r3, [r7, #15]
 8004644:	e001      	b.n	800464a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004646:	2300      	movs	r3, #0
 8004648:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800464a:	7bfb      	ldrb	r3, [r7, #15]
}
 800464c:	4618      	mov	r0, r3
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	460b      	mov	r3, r1
 8004662:	807b      	strh	r3, [r7, #2]
 8004664:	4613      	mov	r3, r2
 8004666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004668:	787b      	ldrb	r3, [r7, #1]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800466e:	887a      	ldrh	r2, [r7, #2]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004674:	e003      	b.n	800467e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004676:	887b      	ldrh	r3, [r7, #2]
 8004678:	041a      	lsls	r2, r3, #16
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	619a      	str	r2, [r3, #24]
}
 800467e:	bf00      	nop
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800468a:	b480      	push	{r7}
 800468c:	b085      	sub	sp, #20
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
 8004692:	460b      	mov	r3, r1
 8004694:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800469c:	887a      	ldrh	r2, [r7, #2]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	4013      	ands	r3, r2
 80046a2:	041a      	lsls	r2, r3, #16
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	43d9      	mvns	r1, r3
 80046a8:	887b      	ldrh	r3, [r7, #2]
 80046aa:	400b      	ands	r3, r1
 80046ac:	431a      	orrs	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	619a      	str	r2, [r3, #24]
}
 80046b2:	bf00      	nop
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
	...

080046c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e267      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d075      	beq.n	80047ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046de:	4b88      	ldr	r3, [pc, #544]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f003 030c 	and.w	r3, r3, #12
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	d00c      	beq.n	8004704 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ea:	4b85      	ldr	r3, [pc, #532]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	d112      	bne.n	800471c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046f6:	4b82      	ldr	r3, [pc, #520]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004702:	d10b      	bne.n	800471c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004704:	4b7e      	ldr	r3, [pc, #504]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d05b      	beq.n	80047c8 <HAL_RCC_OscConfig+0x108>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d157      	bne.n	80047c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e242      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004724:	d106      	bne.n	8004734 <HAL_RCC_OscConfig+0x74>
 8004726:	4b76      	ldr	r3, [pc, #472]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a75      	ldr	r2, [pc, #468]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 800472c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004730:	6013      	str	r3, [r2, #0]
 8004732:	e01d      	b.n	8004770 <HAL_RCC_OscConfig+0xb0>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800473c:	d10c      	bne.n	8004758 <HAL_RCC_OscConfig+0x98>
 800473e:	4b70      	ldr	r3, [pc, #448]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a6f      	ldr	r2, [pc, #444]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 8004744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	4b6d      	ldr	r3, [pc, #436]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a6c      	ldr	r2, [pc, #432]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 8004750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	e00b      	b.n	8004770 <HAL_RCC_OscConfig+0xb0>
 8004758:	4b69      	ldr	r3, [pc, #420]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a68      	ldr	r2, [pc, #416]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 800475e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004762:	6013      	str	r3, [r2, #0]
 8004764:	4b66      	ldr	r3, [pc, #408]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a65      	ldr	r2, [pc, #404]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 800476a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800476e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d013      	beq.n	80047a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004778:	f7fe f9e4 	bl	8002b44 <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004780:	f7fe f9e0 	bl	8002b44 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b64      	cmp	r3, #100	; 0x64
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e207      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004792:	4b5b      	ldr	r3, [pc, #364]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0f0      	beq.n	8004780 <HAL_RCC_OscConfig+0xc0>
 800479e:	e014      	b.n	80047ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a0:	f7fe f9d0 	bl	8002b44 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047a8:	f7fe f9cc 	bl	8002b44 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b64      	cmp	r3, #100	; 0x64
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e1f3      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ba:	4b51      	ldr	r3, [pc, #324]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1f0      	bne.n	80047a8 <HAL_RCC_OscConfig+0xe8>
 80047c6:	e000      	b.n	80047ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d063      	beq.n	800489e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047d6:	4b4a      	ldr	r3, [pc, #296]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f003 030c 	and.w	r3, r3, #12
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00b      	beq.n	80047fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047e2:	4b47      	ldr	r3, [pc, #284]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047ea:	2b08      	cmp	r3, #8
 80047ec:	d11c      	bne.n	8004828 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ee:	4b44      	ldr	r3, [pc, #272]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d116      	bne.n	8004828 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047fa:	4b41      	ldr	r3, [pc, #260]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d005      	beq.n	8004812 <HAL_RCC_OscConfig+0x152>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d001      	beq.n	8004812 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e1c7      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004812:	4b3b      	ldr	r3, [pc, #236]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	4937      	ldr	r1, [pc, #220]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 8004822:	4313      	orrs	r3, r2
 8004824:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004826:	e03a      	b.n	800489e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d020      	beq.n	8004872 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004830:	4b34      	ldr	r3, [pc, #208]	; (8004904 <HAL_RCC_OscConfig+0x244>)
 8004832:	2201      	movs	r2, #1
 8004834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004836:	f7fe f985 	bl	8002b44 <HAL_GetTick>
 800483a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800483c:	e008      	b.n	8004850 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800483e:	f7fe f981 	bl	8002b44 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d901      	bls.n	8004850 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e1a8      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004850:	4b2b      	ldr	r3, [pc, #172]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0f0      	beq.n	800483e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800485c:	4b28      	ldr	r3, [pc, #160]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	4925      	ldr	r1, [pc, #148]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 800486c:	4313      	orrs	r3, r2
 800486e:	600b      	str	r3, [r1, #0]
 8004870:	e015      	b.n	800489e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004872:	4b24      	ldr	r3, [pc, #144]	; (8004904 <HAL_RCC_OscConfig+0x244>)
 8004874:	2200      	movs	r2, #0
 8004876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004878:	f7fe f964 	bl	8002b44 <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004880:	f7fe f960 	bl	8002b44 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e187      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004892:	4b1b      	ldr	r3, [pc, #108]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1f0      	bne.n	8004880 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0308 	and.w	r3, r3, #8
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d036      	beq.n	8004918 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d016      	beq.n	80048e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048b2:	4b15      	ldr	r3, [pc, #84]	; (8004908 <HAL_RCC_OscConfig+0x248>)
 80048b4:	2201      	movs	r2, #1
 80048b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b8:	f7fe f944 	bl	8002b44 <HAL_GetTick>
 80048bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048be:	e008      	b.n	80048d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048c0:	f7fe f940 	bl	8002b44 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e167      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048d2:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 80048d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d0f0      	beq.n	80048c0 <HAL_RCC_OscConfig+0x200>
 80048de:	e01b      	b.n	8004918 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048e0:	4b09      	ldr	r3, [pc, #36]	; (8004908 <HAL_RCC_OscConfig+0x248>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048e6:	f7fe f92d 	bl	8002b44 <HAL_GetTick>
 80048ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048ec:	e00e      	b.n	800490c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048ee:	f7fe f929 	bl	8002b44 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d907      	bls.n	800490c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e150      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
 8004900:	40023800 	.word	0x40023800
 8004904:	42470000 	.word	0x42470000
 8004908:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800490c:	4b88      	ldr	r3, [pc, #544]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 800490e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1ea      	bne.n	80048ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0304 	and.w	r3, r3, #4
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 8097 	beq.w	8004a54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004926:	2300      	movs	r3, #0
 8004928:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800492a:	4b81      	ldr	r3, [pc, #516]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10f      	bne.n	8004956 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004936:	2300      	movs	r3, #0
 8004938:	60bb      	str	r3, [r7, #8]
 800493a:	4b7d      	ldr	r3, [pc, #500]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	4a7c      	ldr	r2, [pc, #496]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004944:	6413      	str	r3, [r2, #64]	; 0x40
 8004946:	4b7a      	ldr	r3, [pc, #488]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800494e:	60bb      	str	r3, [r7, #8]
 8004950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004952:	2301      	movs	r3, #1
 8004954:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004956:	4b77      	ldr	r3, [pc, #476]	; (8004b34 <HAL_RCC_OscConfig+0x474>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495e:	2b00      	cmp	r3, #0
 8004960:	d118      	bne.n	8004994 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004962:	4b74      	ldr	r3, [pc, #464]	; (8004b34 <HAL_RCC_OscConfig+0x474>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a73      	ldr	r2, [pc, #460]	; (8004b34 <HAL_RCC_OscConfig+0x474>)
 8004968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800496c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800496e:	f7fe f8e9 	bl	8002b44 <HAL_GetTick>
 8004972:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004974:	e008      	b.n	8004988 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004976:	f7fe f8e5 	bl	8002b44 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d901      	bls.n	8004988 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e10c      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004988:	4b6a      	ldr	r3, [pc, #424]	; (8004b34 <HAL_RCC_OscConfig+0x474>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004990:	2b00      	cmp	r3, #0
 8004992:	d0f0      	beq.n	8004976 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d106      	bne.n	80049aa <HAL_RCC_OscConfig+0x2ea>
 800499c:	4b64      	ldr	r3, [pc, #400]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 800499e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a0:	4a63      	ldr	r2, [pc, #396]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 80049a2:	f043 0301 	orr.w	r3, r3, #1
 80049a6:	6713      	str	r3, [r2, #112]	; 0x70
 80049a8:	e01c      	b.n	80049e4 <HAL_RCC_OscConfig+0x324>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	2b05      	cmp	r3, #5
 80049b0:	d10c      	bne.n	80049cc <HAL_RCC_OscConfig+0x30c>
 80049b2:	4b5f      	ldr	r3, [pc, #380]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 80049b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b6:	4a5e      	ldr	r2, [pc, #376]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 80049b8:	f043 0304 	orr.w	r3, r3, #4
 80049bc:	6713      	str	r3, [r2, #112]	; 0x70
 80049be:	4b5c      	ldr	r3, [pc, #368]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 80049c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c2:	4a5b      	ldr	r2, [pc, #364]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 80049c4:	f043 0301 	orr.w	r3, r3, #1
 80049c8:	6713      	str	r3, [r2, #112]	; 0x70
 80049ca:	e00b      	b.n	80049e4 <HAL_RCC_OscConfig+0x324>
 80049cc:	4b58      	ldr	r3, [pc, #352]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 80049ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d0:	4a57      	ldr	r2, [pc, #348]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 80049d2:	f023 0301 	bic.w	r3, r3, #1
 80049d6:	6713      	str	r3, [r2, #112]	; 0x70
 80049d8:	4b55      	ldr	r3, [pc, #340]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 80049da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049dc:	4a54      	ldr	r2, [pc, #336]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 80049de:	f023 0304 	bic.w	r3, r3, #4
 80049e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d015      	beq.n	8004a18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ec:	f7fe f8aa 	bl	8002b44 <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049f2:	e00a      	b.n	8004a0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049f4:	f7fe f8a6 	bl	8002b44 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e0cb      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a0a:	4b49      	ldr	r3, [pc, #292]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d0ee      	beq.n	80049f4 <HAL_RCC_OscConfig+0x334>
 8004a16:	e014      	b.n	8004a42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a18:	f7fe f894 	bl	8002b44 <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a1e:	e00a      	b.n	8004a36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a20:	f7fe f890 	bl	8002b44 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e0b5      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a36:	4b3e      	ldr	r3, [pc, #248]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1ee      	bne.n	8004a20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a42:	7dfb      	ldrb	r3, [r7, #23]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d105      	bne.n	8004a54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a48:	4b39      	ldr	r3, [pc, #228]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4c:	4a38      	ldr	r2, [pc, #224]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004a4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 80a1 	beq.w	8004ba0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a5e:	4b34      	ldr	r3, [pc, #208]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 030c 	and.w	r3, r3, #12
 8004a66:	2b08      	cmp	r3, #8
 8004a68:	d05c      	beq.n	8004b24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d141      	bne.n	8004af6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a72:	4b31      	ldr	r3, [pc, #196]	; (8004b38 <HAL_RCC_OscConfig+0x478>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a78:	f7fe f864 	bl	8002b44 <HAL_GetTick>
 8004a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a80:	f7fe f860 	bl	8002b44 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e087      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a92:	4b27      	ldr	r3, [pc, #156]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1f0      	bne.n	8004a80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	69da      	ldr	r2, [r3, #28]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	019b      	lsls	r3, r3, #6
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab4:	085b      	lsrs	r3, r3, #1
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	041b      	lsls	r3, r3, #16
 8004aba:	431a      	orrs	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac0:	061b      	lsls	r3, r3, #24
 8004ac2:	491b      	ldr	r1, [pc, #108]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ac8:	4b1b      	ldr	r3, [pc, #108]	; (8004b38 <HAL_RCC_OscConfig+0x478>)
 8004aca:	2201      	movs	r2, #1
 8004acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ace:	f7fe f839 	bl	8002b44 <HAL_GetTick>
 8004ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ad6:	f7fe f835 	bl	8002b44 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e05c      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ae8:	4b11      	ldr	r3, [pc, #68]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0f0      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x416>
 8004af4:	e054      	b.n	8004ba0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004af6:	4b10      	ldr	r3, [pc, #64]	; (8004b38 <HAL_RCC_OscConfig+0x478>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004afc:	f7fe f822 	bl	8002b44 <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b02:	e008      	b.n	8004b16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b04:	f7fe f81e 	bl	8002b44 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e045      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b16:	4b06      	ldr	r3, [pc, #24]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1f0      	bne.n	8004b04 <HAL_RCC_OscConfig+0x444>
 8004b22:	e03d      	b.n	8004ba0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d107      	bne.n	8004b3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e038      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
 8004b30:	40023800 	.word	0x40023800
 8004b34:	40007000 	.word	0x40007000
 8004b38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b3c:	4b1b      	ldr	r3, [pc, #108]	; (8004bac <HAL_RCC_OscConfig+0x4ec>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d028      	beq.n	8004b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d121      	bne.n	8004b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d11a      	bne.n	8004b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d111      	bne.n	8004b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b82:	085b      	lsrs	r3, r3, #1
 8004b84:	3b01      	subs	r3, #1
 8004b86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d107      	bne.n	8004b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d001      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e000      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3718      	adds	r7, #24
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	40023800 	.word	0x40023800

08004bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e0cc      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bc4:	4b68      	ldr	r3, [pc, #416]	; (8004d68 <HAL_RCC_ClockConfig+0x1b8>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 030f 	and.w	r3, r3, #15
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d90c      	bls.n	8004bec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bd2:	4b65      	ldr	r3, [pc, #404]	; (8004d68 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	b2d2      	uxtb	r2, r2
 8004bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bda:	4b63      	ldr	r3, [pc, #396]	; (8004d68 <HAL_RCC_ClockConfig+0x1b8>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 030f 	and.w	r3, r3, #15
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d001      	beq.n	8004bec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0b8      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d020      	beq.n	8004c3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d005      	beq.n	8004c10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c04:	4b59      	ldr	r3, [pc, #356]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	4a58      	ldr	r2, [pc, #352]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0308 	and.w	r3, r3, #8
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d005      	beq.n	8004c28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c1c:	4b53      	ldr	r3, [pc, #332]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	4a52      	ldr	r2, [pc, #328]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c28:	4b50      	ldr	r3, [pc, #320]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	494d      	ldr	r1, [pc, #308]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d044      	beq.n	8004cd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d107      	bne.n	8004c5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c4e:	4b47      	ldr	r3, [pc, #284]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d119      	bne.n	8004c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e07f      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d003      	beq.n	8004c6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c6a:	2b03      	cmp	r3, #3
 8004c6c:	d107      	bne.n	8004c7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c6e:	4b3f      	ldr	r3, [pc, #252]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d109      	bne.n	8004c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e06f      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c7e:	4b3b      	ldr	r3, [pc, #236]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e067      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c8e:	4b37      	ldr	r3, [pc, #220]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f023 0203 	bic.w	r2, r3, #3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	4934      	ldr	r1, [pc, #208]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ca0:	f7fd ff50 	bl	8002b44 <HAL_GetTick>
 8004ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ca6:	e00a      	b.n	8004cbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ca8:	f7fd ff4c 	bl	8002b44 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e04f      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cbe:	4b2b      	ldr	r3, [pc, #172]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 020c 	and.w	r2, r3, #12
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d1eb      	bne.n	8004ca8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cd0:	4b25      	ldr	r3, [pc, #148]	; (8004d68 <HAL_RCC_ClockConfig+0x1b8>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 030f 	and.w	r3, r3, #15
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d20c      	bcs.n	8004cf8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cde:	4b22      	ldr	r3, [pc, #136]	; (8004d68 <HAL_RCC_ClockConfig+0x1b8>)
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	b2d2      	uxtb	r2, r2
 8004ce4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ce6:	4b20      	ldr	r3, [pc, #128]	; (8004d68 <HAL_RCC_ClockConfig+0x1b8>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 030f 	and.w	r3, r3, #15
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d001      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e032      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d008      	beq.n	8004d16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d04:	4b19      	ldr	r3, [pc, #100]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	4916      	ldr	r1, [pc, #88]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0308 	and.w	r3, r3, #8
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d009      	beq.n	8004d36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d22:	4b12      	ldr	r3, [pc, #72]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	490e      	ldr	r1, [pc, #56]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d36:	f000 f821 	bl	8004d7c <HAL_RCC_GetSysClockFreq>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	4b0b      	ldr	r3, [pc, #44]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	091b      	lsrs	r3, r3, #4
 8004d42:	f003 030f 	and.w	r3, r3, #15
 8004d46:	490a      	ldr	r1, [pc, #40]	; (8004d70 <HAL_RCC_ClockConfig+0x1c0>)
 8004d48:	5ccb      	ldrb	r3, [r1, r3]
 8004d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d4e:	4a09      	ldr	r2, [pc, #36]	; (8004d74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d52:	4b09      	ldr	r3, [pc, #36]	; (8004d78 <HAL_RCC_ClockConfig+0x1c8>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fd feb0 	bl	8002abc <HAL_InitTick>

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	40023c00 	.word	0x40023c00
 8004d6c:	40023800 	.word	0x40023800
 8004d70:	0800587c 	.word	0x0800587c
 8004d74:	20000010 	.word	0x20000010
 8004d78:	20000014 	.word	0x20000014

08004d7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d80:	b090      	sub	sp, #64	; 0x40
 8004d82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d84:	2300      	movs	r3, #0
 8004d86:	637b      	str	r3, [r7, #52]	; 0x34
 8004d88:	2300      	movs	r3, #0
 8004d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d94:	4b59      	ldr	r3, [pc, #356]	; (8004efc <HAL_RCC_GetSysClockFreq+0x180>)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f003 030c 	and.w	r3, r3, #12
 8004d9c:	2b08      	cmp	r3, #8
 8004d9e:	d00d      	beq.n	8004dbc <HAL_RCC_GetSysClockFreq+0x40>
 8004da0:	2b08      	cmp	r3, #8
 8004da2:	f200 80a1 	bhi.w	8004ee8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <HAL_RCC_GetSysClockFreq+0x34>
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d003      	beq.n	8004db6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004dae:	e09b      	b.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004db0:	4b53      	ldr	r3, [pc, #332]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x184>)
 8004db2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004db4:	e09b      	b.n	8004eee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004db6:	4b53      	ldr	r3, [pc, #332]	; (8004f04 <HAL_RCC_GetSysClockFreq+0x188>)
 8004db8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004dba:	e098      	b.n	8004eee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dbc:	4b4f      	ldr	r3, [pc, #316]	; (8004efc <HAL_RCC_GetSysClockFreq+0x180>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dc4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dc6:	4b4d      	ldr	r3, [pc, #308]	; (8004efc <HAL_RCC_GetSysClockFreq+0x180>)
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d028      	beq.n	8004e24 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dd2:	4b4a      	ldr	r3, [pc, #296]	; (8004efc <HAL_RCC_GetSysClockFreq+0x180>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	099b      	lsrs	r3, r3, #6
 8004dd8:	2200      	movs	r2, #0
 8004dda:	623b      	str	r3, [r7, #32]
 8004ddc:	627a      	str	r2, [r7, #36]	; 0x24
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004de4:	2100      	movs	r1, #0
 8004de6:	4b47      	ldr	r3, [pc, #284]	; (8004f04 <HAL_RCC_GetSysClockFreq+0x188>)
 8004de8:	fb03 f201 	mul.w	r2, r3, r1
 8004dec:	2300      	movs	r3, #0
 8004dee:	fb00 f303 	mul.w	r3, r0, r3
 8004df2:	4413      	add	r3, r2
 8004df4:	4a43      	ldr	r2, [pc, #268]	; (8004f04 <HAL_RCC_GetSysClockFreq+0x188>)
 8004df6:	fba0 1202 	umull	r1, r2, r0, r2
 8004dfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dfc:	460a      	mov	r2, r1
 8004dfe:	62ba      	str	r2, [r7, #40]	; 0x28
 8004e00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e02:	4413      	add	r3, r2
 8004e04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e08:	2200      	movs	r2, #0
 8004e0a:	61bb      	str	r3, [r7, #24]
 8004e0c:	61fa      	str	r2, [r7, #28]
 8004e0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004e16:	f7fb fe09 	bl	8000a2c <__aeabi_uldivmod>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	4613      	mov	r3, r2
 8004e20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e22:	e053      	b.n	8004ecc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e24:	4b35      	ldr	r3, [pc, #212]	; (8004efc <HAL_RCC_GetSysClockFreq+0x180>)
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	099b      	lsrs	r3, r3, #6
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	613b      	str	r3, [r7, #16]
 8004e2e:	617a      	str	r2, [r7, #20]
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004e36:	f04f 0b00 	mov.w	fp, #0
 8004e3a:	4652      	mov	r2, sl
 8004e3c:	465b      	mov	r3, fp
 8004e3e:	f04f 0000 	mov.w	r0, #0
 8004e42:	f04f 0100 	mov.w	r1, #0
 8004e46:	0159      	lsls	r1, r3, #5
 8004e48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e4c:	0150      	lsls	r0, r2, #5
 8004e4e:	4602      	mov	r2, r0
 8004e50:	460b      	mov	r3, r1
 8004e52:	ebb2 080a 	subs.w	r8, r2, sl
 8004e56:	eb63 090b 	sbc.w	r9, r3, fp
 8004e5a:	f04f 0200 	mov.w	r2, #0
 8004e5e:	f04f 0300 	mov.w	r3, #0
 8004e62:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004e66:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004e6a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004e6e:	ebb2 0408 	subs.w	r4, r2, r8
 8004e72:	eb63 0509 	sbc.w	r5, r3, r9
 8004e76:	f04f 0200 	mov.w	r2, #0
 8004e7a:	f04f 0300 	mov.w	r3, #0
 8004e7e:	00eb      	lsls	r3, r5, #3
 8004e80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e84:	00e2      	lsls	r2, r4, #3
 8004e86:	4614      	mov	r4, r2
 8004e88:	461d      	mov	r5, r3
 8004e8a:	eb14 030a 	adds.w	r3, r4, sl
 8004e8e:	603b      	str	r3, [r7, #0]
 8004e90:	eb45 030b 	adc.w	r3, r5, fp
 8004e94:	607b      	str	r3, [r7, #4]
 8004e96:	f04f 0200 	mov.w	r2, #0
 8004e9a:	f04f 0300 	mov.w	r3, #0
 8004e9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	028b      	lsls	r3, r1, #10
 8004ea6:	4621      	mov	r1, r4
 8004ea8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004eac:	4621      	mov	r1, r4
 8004eae:	028a      	lsls	r2, r1, #10
 8004eb0:	4610      	mov	r0, r2
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	60bb      	str	r3, [r7, #8]
 8004eba:	60fa      	str	r2, [r7, #12]
 8004ebc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ec0:	f7fb fdb4 	bl	8000a2c <__aeabi_uldivmod>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4613      	mov	r3, r2
 8004eca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ecc:	4b0b      	ldr	r3, [pc, #44]	; (8004efc <HAL_RCC_GetSysClockFreq+0x180>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	0c1b      	lsrs	r3, r3, #16
 8004ed2:	f003 0303 	and.w	r3, r3, #3
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004edc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ee6:	e002      	b.n	8004eee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ee8:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x184>)
 8004eea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004eec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3740      	adds	r7, #64	; 0x40
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004efa:	bf00      	nop
 8004efc:	40023800 	.word	0x40023800
 8004f00:	00f42400 	.word	0x00f42400
 8004f04:	017d7840 	.word	0x017d7840

08004f08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e041      	b.n	8004f9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d106      	bne.n	8004f34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7fd fc56 	bl	80027e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	3304      	adds	r3, #4
 8004f44:	4619      	mov	r1, r3
 8004f46:	4610      	mov	r0, r2
 8004f48:	f000 fa96 	bl	8005478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
	...

08004fa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d001      	beq.n	8004fc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e04e      	b.n	800505e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68da      	ldr	r2, [r3, #12]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0201 	orr.w	r2, r2, #1
 8004fd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a23      	ldr	r2, [pc, #140]	; (800506c <HAL_TIM_Base_Start_IT+0xc4>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d022      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x80>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fea:	d01d      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x80>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a1f      	ldr	r2, [pc, #124]	; (8005070 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d018      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x80>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a1e      	ldr	r2, [pc, #120]	; (8005074 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d013      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x80>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a1c      	ldr	r2, [pc, #112]	; (8005078 <HAL_TIM_Base_Start_IT+0xd0>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d00e      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x80>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a1b      	ldr	r2, [pc, #108]	; (800507c <HAL_TIM_Base_Start_IT+0xd4>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d009      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x80>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a19      	ldr	r2, [pc, #100]	; (8005080 <HAL_TIM_Base_Start_IT+0xd8>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d004      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x80>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a18      	ldr	r2, [pc, #96]	; (8005084 <HAL_TIM_Base_Start_IT+0xdc>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d111      	bne.n	800504c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 0307 	and.w	r3, r3, #7
 8005032:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2b06      	cmp	r3, #6
 8005038:	d010      	beq.n	800505c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f042 0201 	orr.w	r2, r2, #1
 8005048:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800504a:	e007      	b.n	800505c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f042 0201 	orr.w	r2, r2, #1
 800505a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3714      	adds	r7, #20
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	40010000 	.word	0x40010000
 8005070:	40000400 	.word	0x40000400
 8005074:	40000800 	.word	0x40000800
 8005078:	40000c00 	.word	0x40000c00
 800507c:	40010400 	.word	0x40010400
 8005080:	40014000 	.word	0x40014000
 8005084:	40001800 	.word	0x40001800

08005088 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b02      	cmp	r3, #2
 800509c:	d122      	bne.n	80050e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d11b      	bne.n	80050e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f06f 0202 	mvn.w	r2, #2
 80050b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	f003 0303 	and.w	r3, r3, #3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f9b5 	bl	800543a <HAL_TIM_IC_CaptureCallback>
 80050d0:	e005      	b.n	80050de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f9a7 	bl	8005426 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 f9b8 	bl	800544e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	f003 0304 	and.w	r3, r3, #4
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	d122      	bne.n	8005138 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f003 0304 	and.w	r3, r3, #4
 80050fc:	2b04      	cmp	r3, #4
 80050fe:	d11b      	bne.n	8005138 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f06f 0204 	mvn.w	r2, #4
 8005108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2202      	movs	r2, #2
 800510e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f98b 	bl	800543a <HAL_TIM_IC_CaptureCallback>
 8005124:	e005      	b.n	8005132 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f97d 	bl	8005426 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f98e 	bl	800544e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	f003 0308 	and.w	r3, r3, #8
 8005142:	2b08      	cmp	r3, #8
 8005144:	d122      	bne.n	800518c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f003 0308 	and.w	r3, r3, #8
 8005150:	2b08      	cmp	r3, #8
 8005152:	d11b      	bne.n	800518c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f06f 0208 	mvn.w	r2, #8
 800515c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2204      	movs	r2, #4
 8005162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	f003 0303 	and.w	r3, r3, #3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f961 	bl	800543a <HAL_TIM_IC_CaptureCallback>
 8005178:	e005      	b.n	8005186 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f953 	bl	8005426 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f964 	bl	800544e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	f003 0310 	and.w	r3, r3, #16
 8005196:	2b10      	cmp	r3, #16
 8005198:	d122      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f003 0310 	and.w	r3, r3, #16
 80051a4:	2b10      	cmp	r3, #16
 80051a6:	d11b      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f06f 0210 	mvn.w	r2, #16
 80051b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2208      	movs	r2, #8
 80051b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f937 	bl	800543a <HAL_TIM_IC_CaptureCallback>
 80051cc:	e005      	b.n	80051da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f929 	bl	8005426 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f93a 	bl	800544e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d10e      	bne.n	800520c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d107      	bne.n	800520c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f06f 0201 	mvn.w	r2, #1
 8005204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7fc f944 	bl	8001494 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005216:	2b80      	cmp	r3, #128	; 0x80
 8005218:	d10e      	bne.n	8005238 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005224:	2b80      	cmp	r3, #128	; 0x80
 8005226:	d107      	bne.n	8005238 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 fae0 	bl	80057f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005242:	2b40      	cmp	r3, #64	; 0x40
 8005244:	d10e      	bne.n	8005264 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005250:	2b40      	cmp	r3, #64	; 0x40
 8005252:	d107      	bne.n	8005264 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800525c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f8ff 	bl	8005462 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	f003 0320 	and.w	r3, r3, #32
 800526e:	2b20      	cmp	r3, #32
 8005270:	d10e      	bne.n	8005290 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	f003 0320 	and.w	r3, r3, #32
 800527c:	2b20      	cmp	r3, #32
 800527e:	d107      	bne.n	8005290 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f06f 0220 	mvn.w	r2, #32
 8005288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 faaa 	bl	80057e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005290:	bf00      	nop
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052a2:	2300      	movs	r3, #0
 80052a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d101      	bne.n	80052b4 <HAL_TIM_ConfigClockSource+0x1c>
 80052b0:	2302      	movs	r3, #2
 80052b2:	e0b4      	b.n	800541e <HAL_TIM_ConfigClockSource+0x186>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2202      	movs	r2, #2
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052ec:	d03e      	beq.n	800536c <HAL_TIM_ConfigClockSource+0xd4>
 80052ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052f2:	f200 8087 	bhi.w	8005404 <HAL_TIM_ConfigClockSource+0x16c>
 80052f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052fa:	f000 8086 	beq.w	800540a <HAL_TIM_ConfigClockSource+0x172>
 80052fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005302:	d87f      	bhi.n	8005404 <HAL_TIM_ConfigClockSource+0x16c>
 8005304:	2b70      	cmp	r3, #112	; 0x70
 8005306:	d01a      	beq.n	800533e <HAL_TIM_ConfigClockSource+0xa6>
 8005308:	2b70      	cmp	r3, #112	; 0x70
 800530a:	d87b      	bhi.n	8005404 <HAL_TIM_ConfigClockSource+0x16c>
 800530c:	2b60      	cmp	r3, #96	; 0x60
 800530e:	d050      	beq.n	80053b2 <HAL_TIM_ConfigClockSource+0x11a>
 8005310:	2b60      	cmp	r3, #96	; 0x60
 8005312:	d877      	bhi.n	8005404 <HAL_TIM_ConfigClockSource+0x16c>
 8005314:	2b50      	cmp	r3, #80	; 0x50
 8005316:	d03c      	beq.n	8005392 <HAL_TIM_ConfigClockSource+0xfa>
 8005318:	2b50      	cmp	r3, #80	; 0x50
 800531a:	d873      	bhi.n	8005404 <HAL_TIM_ConfigClockSource+0x16c>
 800531c:	2b40      	cmp	r3, #64	; 0x40
 800531e:	d058      	beq.n	80053d2 <HAL_TIM_ConfigClockSource+0x13a>
 8005320:	2b40      	cmp	r3, #64	; 0x40
 8005322:	d86f      	bhi.n	8005404 <HAL_TIM_ConfigClockSource+0x16c>
 8005324:	2b30      	cmp	r3, #48	; 0x30
 8005326:	d064      	beq.n	80053f2 <HAL_TIM_ConfigClockSource+0x15a>
 8005328:	2b30      	cmp	r3, #48	; 0x30
 800532a:	d86b      	bhi.n	8005404 <HAL_TIM_ConfigClockSource+0x16c>
 800532c:	2b20      	cmp	r3, #32
 800532e:	d060      	beq.n	80053f2 <HAL_TIM_ConfigClockSource+0x15a>
 8005330:	2b20      	cmp	r3, #32
 8005332:	d867      	bhi.n	8005404 <HAL_TIM_ConfigClockSource+0x16c>
 8005334:	2b00      	cmp	r3, #0
 8005336:	d05c      	beq.n	80053f2 <HAL_TIM_ConfigClockSource+0x15a>
 8005338:	2b10      	cmp	r3, #16
 800533a:	d05a      	beq.n	80053f2 <HAL_TIM_ConfigClockSource+0x15a>
 800533c:	e062      	b.n	8005404 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6818      	ldr	r0, [r3, #0]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	6899      	ldr	r1, [r3, #8]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	685a      	ldr	r2, [r3, #4]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f000 f9ad 	bl	80056ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005360:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	609a      	str	r2, [r3, #8]
      break;
 800536a:	e04f      	b.n	800540c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6818      	ldr	r0, [r3, #0]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	6899      	ldr	r1, [r3, #8]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f000 f996 	bl	80056ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689a      	ldr	r2, [r3, #8]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800538e:	609a      	str	r2, [r3, #8]
      break;
 8005390:	e03c      	b.n	800540c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6818      	ldr	r0, [r3, #0]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	6859      	ldr	r1, [r3, #4]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	461a      	mov	r2, r3
 80053a0:	f000 f90a 	bl	80055b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2150      	movs	r1, #80	; 0x50
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 f963 	bl	8005676 <TIM_ITRx_SetConfig>
      break;
 80053b0:	e02c      	b.n	800540c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6818      	ldr	r0, [r3, #0]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	6859      	ldr	r1, [r3, #4]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	461a      	mov	r2, r3
 80053c0:	f000 f929 	bl	8005616 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2160      	movs	r1, #96	; 0x60
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 f953 	bl	8005676 <TIM_ITRx_SetConfig>
      break;
 80053d0:	e01c      	b.n	800540c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6818      	ldr	r0, [r3, #0]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	6859      	ldr	r1, [r3, #4]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	461a      	mov	r2, r3
 80053e0:	f000 f8ea 	bl	80055b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2140      	movs	r1, #64	; 0x40
 80053ea:	4618      	mov	r0, r3
 80053ec:	f000 f943 	bl	8005676 <TIM_ITRx_SetConfig>
      break;
 80053f0:	e00c      	b.n	800540c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4619      	mov	r1, r3
 80053fc:	4610      	mov	r0, r2
 80053fe:	f000 f93a 	bl	8005676 <TIM_ITRx_SetConfig>
      break;
 8005402:	e003      	b.n	800540c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	73fb      	strb	r3, [r7, #15]
      break;
 8005408:	e000      	b.n	800540c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800540a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800541c:	7bfb      	ldrb	r3, [r7, #15]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005426:	b480      	push	{r7}
 8005428:	b083      	sub	sp, #12
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800542e:	bf00      	nop
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800543a:	b480      	push	{r7}
 800543c:	b083      	sub	sp, #12
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005442:	bf00      	nop
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800544e:	b480      	push	{r7}
 8005450:	b083      	sub	sp, #12
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005456:	bf00      	nop
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005462:	b480      	push	{r7}
 8005464:	b083      	sub	sp, #12
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800546a:	bf00      	nop
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
	...

08005478 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a40      	ldr	r2, [pc, #256]	; (800558c <TIM_Base_SetConfig+0x114>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d013      	beq.n	80054b8 <TIM_Base_SetConfig+0x40>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005496:	d00f      	beq.n	80054b8 <TIM_Base_SetConfig+0x40>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a3d      	ldr	r2, [pc, #244]	; (8005590 <TIM_Base_SetConfig+0x118>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d00b      	beq.n	80054b8 <TIM_Base_SetConfig+0x40>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a3c      	ldr	r2, [pc, #240]	; (8005594 <TIM_Base_SetConfig+0x11c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d007      	beq.n	80054b8 <TIM_Base_SetConfig+0x40>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a3b      	ldr	r2, [pc, #236]	; (8005598 <TIM_Base_SetConfig+0x120>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d003      	beq.n	80054b8 <TIM_Base_SetConfig+0x40>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a3a      	ldr	r2, [pc, #232]	; (800559c <TIM_Base_SetConfig+0x124>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d108      	bne.n	80054ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a2f      	ldr	r2, [pc, #188]	; (800558c <TIM_Base_SetConfig+0x114>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d02b      	beq.n	800552a <TIM_Base_SetConfig+0xb2>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054d8:	d027      	beq.n	800552a <TIM_Base_SetConfig+0xb2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a2c      	ldr	r2, [pc, #176]	; (8005590 <TIM_Base_SetConfig+0x118>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d023      	beq.n	800552a <TIM_Base_SetConfig+0xb2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a2b      	ldr	r2, [pc, #172]	; (8005594 <TIM_Base_SetConfig+0x11c>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d01f      	beq.n	800552a <TIM_Base_SetConfig+0xb2>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a2a      	ldr	r2, [pc, #168]	; (8005598 <TIM_Base_SetConfig+0x120>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d01b      	beq.n	800552a <TIM_Base_SetConfig+0xb2>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a29      	ldr	r2, [pc, #164]	; (800559c <TIM_Base_SetConfig+0x124>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d017      	beq.n	800552a <TIM_Base_SetConfig+0xb2>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a28      	ldr	r2, [pc, #160]	; (80055a0 <TIM_Base_SetConfig+0x128>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d013      	beq.n	800552a <TIM_Base_SetConfig+0xb2>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a27      	ldr	r2, [pc, #156]	; (80055a4 <TIM_Base_SetConfig+0x12c>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d00f      	beq.n	800552a <TIM_Base_SetConfig+0xb2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a26      	ldr	r2, [pc, #152]	; (80055a8 <TIM_Base_SetConfig+0x130>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d00b      	beq.n	800552a <TIM_Base_SetConfig+0xb2>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a25      	ldr	r2, [pc, #148]	; (80055ac <TIM_Base_SetConfig+0x134>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d007      	beq.n	800552a <TIM_Base_SetConfig+0xb2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a24      	ldr	r2, [pc, #144]	; (80055b0 <TIM_Base_SetConfig+0x138>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d003      	beq.n	800552a <TIM_Base_SetConfig+0xb2>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a23      	ldr	r2, [pc, #140]	; (80055b4 <TIM_Base_SetConfig+0x13c>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d108      	bne.n	800553c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005530:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	4313      	orrs	r3, r2
 800553a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	4313      	orrs	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a0a      	ldr	r2, [pc, #40]	; (800558c <TIM_Base_SetConfig+0x114>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d003      	beq.n	8005570 <TIM_Base_SetConfig+0xf8>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a0c      	ldr	r2, [pc, #48]	; (800559c <TIM_Base_SetConfig+0x124>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d103      	bne.n	8005578 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	691a      	ldr	r2, [r3, #16]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	615a      	str	r2, [r3, #20]
}
 800557e:	bf00      	nop
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	40010000 	.word	0x40010000
 8005590:	40000400 	.word	0x40000400
 8005594:	40000800 	.word	0x40000800
 8005598:	40000c00 	.word	0x40000c00
 800559c:	40010400 	.word	0x40010400
 80055a0:	40014000 	.word	0x40014000
 80055a4:	40014400 	.word	0x40014400
 80055a8:	40014800 	.word	0x40014800
 80055ac:	40001800 	.word	0x40001800
 80055b0:	40001c00 	.word	0x40001c00
 80055b4:	40002000 	.word	0x40002000

080055b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b087      	sub	sp, #28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6a1b      	ldr	r3, [r3, #32]
 80055c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	f023 0201 	bic.w	r2, r3, #1
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	011b      	lsls	r3, r3, #4
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f023 030a 	bic.w	r3, r3, #10
 80055f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	621a      	str	r2, [r3, #32]
}
 800560a:	bf00      	nop
 800560c:	371c      	adds	r7, #28
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005616:	b480      	push	{r7}
 8005618:	b087      	sub	sp, #28
 800561a:	af00      	add	r7, sp, #0
 800561c:	60f8      	str	r0, [r7, #12]
 800561e:	60b9      	str	r1, [r7, #8]
 8005620:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	f023 0210 	bic.w	r2, r3, #16
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6a1b      	ldr	r3, [r3, #32]
 8005638:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005640:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	031b      	lsls	r3, r3, #12
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	4313      	orrs	r3, r2
 800564a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005652:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	011b      	lsls	r3, r3, #4
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	4313      	orrs	r3, r2
 800565c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	621a      	str	r2, [r3, #32]
}
 800566a:	bf00      	nop
 800566c:	371c      	adds	r7, #28
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005676:	b480      	push	{r7}
 8005678:	b085      	sub	sp, #20
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
 800567e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800568c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4313      	orrs	r3, r2
 8005694:	f043 0307 	orr.w	r3, r3, #7
 8005698:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	609a      	str	r2, [r3, #8]
}
 80056a0:	bf00      	nop
 80056a2:	3714      	adds	r7, #20
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
 80056b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	021a      	lsls	r2, r3, #8
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	431a      	orrs	r2, r3
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	609a      	str	r2, [r3, #8]
}
 80056e0:	bf00      	nop
 80056e2:	371c      	adds	r7, #28
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d101      	bne.n	8005704 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005700:	2302      	movs	r3, #2
 8005702:	e05a      	b.n	80057ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2202      	movs	r2, #2
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800572a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a21      	ldr	r2, [pc, #132]	; (80057c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d022      	beq.n	800578e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005750:	d01d      	beq.n	800578e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a1d      	ldr	r2, [pc, #116]	; (80057cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d018      	beq.n	800578e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a1b      	ldr	r2, [pc, #108]	; (80057d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d013      	beq.n	800578e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a1a      	ldr	r2, [pc, #104]	; (80057d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d00e      	beq.n	800578e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a18      	ldr	r2, [pc, #96]	; (80057d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d009      	beq.n	800578e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a17      	ldr	r2, [pc, #92]	; (80057dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d004      	beq.n	800578e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a15      	ldr	r2, [pc, #84]	; (80057e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d10c      	bne.n	80057a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005794:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	4313      	orrs	r3, r2
 800579e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	40010000 	.word	0x40010000
 80057cc:	40000400 	.word	0x40000400
 80057d0:	40000800 	.word	0x40000800
 80057d4:	40000c00 	.word	0x40000c00
 80057d8:	40010400 	.word	0x40010400
 80057dc:	40014000 	.word	0x40014000
 80057e0:	40001800 	.word	0x40001800

080057e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <memset>:
 800580c:	4402      	add	r2, r0
 800580e:	4603      	mov	r3, r0
 8005810:	4293      	cmp	r3, r2
 8005812:	d100      	bne.n	8005816 <memset+0xa>
 8005814:	4770      	bx	lr
 8005816:	f803 1b01 	strb.w	r1, [r3], #1
 800581a:	e7f9      	b.n	8005810 <memset+0x4>

0800581c <__libc_init_array>:
 800581c:	b570      	push	{r4, r5, r6, lr}
 800581e:	4d0d      	ldr	r5, [pc, #52]	; (8005854 <__libc_init_array+0x38>)
 8005820:	4c0d      	ldr	r4, [pc, #52]	; (8005858 <__libc_init_array+0x3c>)
 8005822:	1b64      	subs	r4, r4, r5
 8005824:	10a4      	asrs	r4, r4, #2
 8005826:	2600      	movs	r6, #0
 8005828:	42a6      	cmp	r6, r4
 800582a:	d109      	bne.n	8005840 <__libc_init_array+0x24>
 800582c:	4d0b      	ldr	r5, [pc, #44]	; (800585c <__libc_init_array+0x40>)
 800582e:	4c0c      	ldr	r4, [pc, #48]	; (8005860 <__libc_init_array+0x44>)
 8005830:	f000 f818 	bl	8005864 <_init>
 8005834:	1b64      	subs	r4, r4, r5
 8005836:	10a4      	asrs	r4, r4, #2
 8005838:	2600      	movs	r6, #0
 800583a:	42a6      	cmp	r6, r4
 800583c:	d105      	bne.n	800584a <__libc_init_array+0x2e>
 800583e:	bd70      	pop	{r4, r5, r6, pc}
 8005840:	f855 3b04 	ldr.w	r3, [r5], #4
 8005844:	4798      	blx	r3
 8005846:	3601      	adds	r6, #1
 8005848:	e7ee      	b.n	8005828 <__libc_init_array+0xc>
 800584a:	f855 3b04 	ldr.w	r3, [r5], #4
 800584e:	4798      	blx	r3
 8005850:	3601      	adds	r6, #1
 8005852:	e7f2      	b.n	800583a <__libc_init_array+0x1e>
 8005854:	08005894 	.word	0x08005894
 8005858:	08005894 	.word	0x08005894
 800585c:	08005894 	.word	0x08005894
 8005860:	08005898 	.word	0x08005898

08005864 <_init>:
 8005864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005866:	bf00      	nop
 8005868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800586a:	bc08      	pop	{r3}
 800586c:	469e      	mov	lr, r3
 800586e:	4770      	bx	lr

08005870 <_fini>:
 8005870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005872:	bf00      	nop
 8005874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005876:	bc08      	pop	{r3}
 8005878:	469e      	mov	lr, r3
 800587a:	4770      	bx	lr
